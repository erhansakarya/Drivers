
HTU21D_TemperatureHumiditySensor_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000307c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800318c  0800318c  0001318c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031b8  080031b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080031b8  080031b8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031b8  080031b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031b8  080031b8  000131b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031bc  080031bc  000131bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  080031cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  080031cc  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2d1  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001af4  00000000  00000000  0002f306  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000870  00000000  00000000  00030e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007b8  00000000  00000000  00031670  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015136  00000000  00000000  00031e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b3f  00000000  00000000  00046f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006dc71  00000000  00000000  0004ea9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bc70e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002340  00000000  00000000  000bc78c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003174 	.word	0x08003174

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08003174 	.word	0x08003174

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <HAL_Init+0x28>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a07      	ldr	r2, [pc, #28]	; (80009b4 <HAL_Init+0x28>)
 8000996:	f043 0310 	orr.w	r3, r3, #16
 800099a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800099c:	2003      	movs	r0, #3
 800099e:	f000 f941 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f000 f808 	bl	80009b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a8:	f002 fa7e 	bl	8002ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40022000 	.word	0x40022000

080009b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_InitTick+0x54>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_InitTick+0x58>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	4619      	mov	r1, r3
 80009ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 f959 	bl	8000c8e <HAL_SYSTICK_Config>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e00e      	b.n	8000a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2b0f      	cmp	r3, #15
 80009ea:	d80a      	bhi.n	8000a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ec:	2200      	movs	r2, #0
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295
 80009f4:	f000 f921 	bl	8000c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f8:	4a06      	ldr	r2, [pc, #24]	; (8000a14 <HAL_InitTick+0x5c>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009fe:	2300      	movs	r3, #0
 8000a00:	e000      	b.n	8000a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	20000004 	.word	0x20000004
 8000a14:	20000000 	.word	0x20000000

08000a18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <HAL_IncTick+0x1c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <HAL_IncTick+0x20>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4413      	add	r3, r2
 8000a28:	4a03      	ldr	r2, [pc, #12]	; (8000a38 <HAL_IncTick+0x20>)
 8000a2a:	6013      	str	r3, [r2, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	20000004 	.word	0x20000004
 8000a38:	20000030 	.word	0x20000030

08000a3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a40:	4b02      	ldr	r3, [pc, #8]	; (8000a4c <HAL_GetTick+0x10>)
 8000a42:	681b      	ldr	r3, [r3, #0]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	20000030 	.word	0x20000030

08000a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a58:	f7ff fff0 	bl	8000a3c <HAL_GetTick>
 8000a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a68:	d005      	beq.n	8000a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_Delay+0x40>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a76:	bf00      	nop
 8000a78:	f7ff ffe0 	bl	8000a3c <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d8f7      	bhi.n	8000a78 <HAL_Delay+0x28>
  {
  }
}
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000004 	.word	0x20000004

08000a94 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <NVIC_SetPriorityGrouping+0x44>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac6:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <NVIC_SetPriorityGrouping+0x44>)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	60d3      	str	r3, [r2, #12]
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <NVIC_GetPriorityGrouping+0x18>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	f003 0307 	and.w	r3, r3, #7
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	f003 021f 	and.w	r2, r3, #31
 8000b08:	4906      	ldr	r1, [pc, #24]	; (8000b24 <NVIC_EnableIRQ+0x2c>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	095b      	lsrs	r3, r3, #5
 8000b10:	2001      	movs	r0, #1
 8000b12:	fa00 f202 	lsl.w	r2, r0, r2
 8000b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	e000e100 	.word	0xe000e100

08000b28 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	da0b      	bge.n	8000b54 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	490c      	ldr	r1, [pc, #48]	; (8000b74 <NVIC_SetPriority+0x4c>)
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	f003 030f 	and.w	r3, r3, #15
 8000b48:	3b04      	subs	r3, #4
 8000b4a:	0112      	lsls	r2, r2, #4
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	440b      	add	r3, r1
 8000b50:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b52:	e009      	b.n	8000b68 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	4907      	ldr	r1, [pc, #28]	; (8000b78 <NVIC_SetPriority+0x50>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	0112      	lsls	r2, r2, #4
 8000b60:	b2d2      	uxtb	r2, r2
 8000b62:	440b      	add	r3, r1
 8000b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00
 8000b78:	e000e100 	.word	0xe000e100

08000b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b089      	sub	sp, #36	; 0x24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	f1c3 0307 	rsb	r3, r3, #7
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	bf28      	it	cs
 8000b9a:	2304      	movcs	r3, #4
 8000b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	d902      	bls.n	8000bac <NVIC_EncodePriority+0x30>
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3b03      	subs	r3, #3
 8000baa:	e000      	b.n	8000bae <NVIC_EncodePriority+0x32>
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	fa01 f303 	lsl.w	r3, r1, r3
 8000bce:	43d9      	mvns	r1, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	4313      	orrs	r3, r2
         );
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3724      	adds	r7, #36	; 0x24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr

08000be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf0:	d301      	bcc.n	8000bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e00f      	b.n	8000c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <SysTick_Config+0x40>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfe:	210f      	movs	r1, #15
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	f7ff ff90 	bl	8000b28 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <SysTick_Config+0x40>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <SysTick_Config+0x40>)
 8000c10:	2207      	movs	r2, #7
 8000c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	e000e010 	.word	0xe000e010

08000c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ff31 	bl	8000a94 <NVIC_SetPriorityGrouping>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
 8000c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c4c:	f7ff ff46 	bl	8000adc <NVIC_GetPriorityGrouping>
 8000c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	68b9      	ldr	r1, [r7, #8]
 8000c56:	6978      	ldr	r0, [r7, #20]
 8000c58:	f7ff ff90 	bl	8000b7c <NVIC_EncodePriority>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff5f 	bl	8000b28 <NVIC_SetPriority>
}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff39 	bl	8000af8 <NVIC_EnableIRQ>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff ffa2 	bl	8000be0 <SysTick_Config>
 8000c9c:	4603      	mov	r3, r0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b08b      	sub	sp, #44	; 0x2c
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cca:	e127      	b.n	8000f1c <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	69fa      	ldr	r2, [r7, #28]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	f040 8116 	bne.w	8000f16 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b12      	cmp	r3, #18
 8000cf0:	d034      	beq.n	8000d5c <HAL_GPIO_Init+0xb4>
 8000cf2:	2b12      	cmp	r3, #18
 8000cf4:	d80d      	bhi.n	8000d12 <HAL_GPIO_Init+0x6a>
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d02b      	beq.n	8000d52 <HAL_GPIO_Init+0xaa>
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d804      	bhi.n	8000d08 <HAL_GPIO_Init+0x60>
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d031      	beq.n	8000d66 <HAL_GPIO_Init+0xbe>
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d01c      	beq.n	8000d40 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d06:	e048      	b.n	8000d9a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000d08:	2b03      	cmp	r3, #3
 8000d0a:	d043      	beq.n	8000d94 <HAL_GPIO_Init+0xec>
 8000d0c:	2b11      	cmp	r3, #17
 8000d0e:	d01b      	beq.n	8000d48 <HAL_GPIO_Init+0xa0>
          break;
 8000d10:	e043      	b.n	8000d9a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000d12:	4a87      	ldr	r2, [pc, #540]	; (8000f30 <HAL_GPIO_Init+0x288>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d026      	beq.n	8000d66 <HAL_GPIO_Init+0xbe>
 8000d18:	4a85      	ldr	r2, [pc, #532]	; (8000f30 <HAL_GPIO_Init+0x288>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d806      	bhi.n	8000d2c <HAL_GPIO_Init+0x84>
 8000d1e:	4a85      	ldr	r2, [pc, #532]	; (8000f34 <HAL_GPIO_Init+0x28c>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d020      	beq.n	8000d66 <HAL_GPIO_Init+0xbe>
 8000d24:	4a84      	ldr	r2, [pc, #528]	; (8000f38 <HAL_GPIO_Init+0x290>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d01d      	beq.n	8000d66 <HAL_GPIO_Init+0xbe>
          break;
 8000d2a:	e036      	b.n	8000d9a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000d2c:	4a83      	ldr	r2, [pc, #524]	; (8000f3c <HAL_GPIO_Init+0x294>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d019      	beq.n	8000d66 <HAL_GPIO_Init+0xbe>
 8000d32:	4a83      	ldr	r2, [pc, #524]	; (8000f40 <HAL_GPIO_Init+0x298>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d016      	beq.n	8000d66 <HAL_GPIO_Init+0xbe>
 8000d38:	4a82      	ldr	r2, [pc, #520]	; (8000f44 <HAL_GPIO_Init+0x29c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d013      	beq.n	8000d66 <HAL_GPIO_Init+0xbe>
          break;
 8000d3e:	e02c      	b.n	8000d9a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	623b      	str	r3, [r7, #32]
          break;
 8000d46:	e028      	b.n	8000d9a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	623b      	str	r3, [r7, #32]
          break;
 8000d50:	e023      	b.n	8000d9a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	3308      	adds	r3, #8
 8000d58:	623b      	str	r3, [r7, #32]
          break;
 8000d5a:	e01e      	b.n	8000d9a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	330c      	adds	r3, #12
 8000d62:	623b      	str	r3, [r7, #32]
          break;
 8000d64:	e019      	b.n	8000d9a <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d102      	bne.n	8000d74 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d6e:	2304      	movs	r3, #4
 8000d70:	623b      	str	r3, [r7, #32]
          break;
 8000d72:	e012      	b.n	8000d9a <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d105      	bne.n	8000d88 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d7c:	2308      	movs	r3, #8
 8000d7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	69fa      	ldr	r2, [r7, #28]
 8000d84:	611a      	str	r2, [r3, #16]
          break;
 8000d86:	e008      	b.n	8000d9a <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d88:	2308      	movs	r3, #8
 8000d8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	69fa      	ldr	r2, [r7, #28]
 8000d90:	615a      	str	r2, [r3, #20]
          break;
 8000d92:	e002      	b.n	8000d9a <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]
          break;
 8000d98:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	2bff      	cmp	r3, #255	; 0xff
 8000d9e:	d801      	bhi.n	8000da4 <HAL_GPIO_Init+0xfc>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	e001      	b.n	8000da8 <HAL_GPIO_Init+0x100>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3304      	adds	r3, #4
 8000da8:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	2bff      	cmp	r3, #255	; 0xff
 8000dae:	d802      	bhi.n	8000db6 <HAL_GPIO_Init+0x10e>
 8000db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	e002      	b.n	8000dbc <HAL_GPIO_Init+0x114>
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	3b08      	subs	r3, #8
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	210f      	movs	r1, #15
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	401a      	ands	r2, r3
 8000dce:	6a39      	ldr	r1, [r7, #32]
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f000 8096 	beq.w	8000f16 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dea:	4b57      	ldr	r3, [pc, #348]	; (8000f48 <HAL_GPIO_Init+0x2a0>)
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	4a56      	ldr	r2, [pc, #344]	; (8000f48 <HAL_GPIO_Init+0x2a0>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6193      	str	r3, [r2, #24]
 8000df6:	4b54      	ldr	r3, [pc, #336]	; (8000f48 <HAL_GPIO_Init+0x2a0>)
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000e02:	4a52      	ldr	r2, [pc, #328]	; (8000f4c <HAL_GPIO_Init+0x2a4>)
 8000e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e06:	089b      	lsrs	r3, r3, #2
 8000e08:	3302      	adds	r3, #2
 8000e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0e:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e12:	f003 0303 	and.w	r3, r3, #3
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	220f      	movs	r2, #15
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	4013      	ands	r3, r2
 8000e24:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a49      	ldr	r2, [pc, #292]	; (8000f50 <HAL_GPIO_Init+0x2a8>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d013      	beq.n	8000e56 <HAL_GPIO_Init+0x1ae>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a48      	ldr	r2, [pc, #288]	; (8000f54 <HAL_GPIO_Init+0x2ac>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d00d      	beq.n	8000e52 <HAL_GPIO_Init+0x1aa>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a47      	ldr	r2, [pc, #284]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d007      	beq.n	8000e4e <HAL_GPIO_Init+0x1a6>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a46      	ldr	r2, [pc, #280]	; (8000f5c <HAL_GPIO_Init+0x2b4>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d101      	bne.n	8000e4a <HAL_GPIO_Init+0x1a2>
 8000e46:	2303      	movs	r3, #3
 8000e48:	e006      	b.n	8000e58 <HAL_GPIO_Init+0x1b0>
 8000e4a:	2304      	movs	r3, #4
 8000e4c:	e004      	b.n	8000e58 <HAL_GPIO_Init+0x1b0>
 8000e4e:	2302      	movs	r3, #2
 8000e50:	e002      	b.n	8000e58 <HAL_GPIO_Init+0x1b0>
 8000e52:	2301      	movs	r3, #1
 8000e54:	e000      	b.n	8000e58 <HAL_GPIO_Init+0x1b0>
 8000e56:	2300      	movs	r3, #0
 8000e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e5a:	f002 0203 	and.w	r2, r2, #3
 8000e5e:	0092      	lsls	r2, r2, #2
 8000e60:	4093      	lsls	r3, r2
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000e68:	4938      	ldr	r1, [pc, #224]	; (8000f4c <HAL_GPIO_Init+0x2a4>)
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6c:	089b      	lsrs	r3, r3, #2
 8000e6e:	3302      	adds	r3, #2
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d006      	beq.n	8000e90 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e82:	4b37      	ldr	r3, [pc, #220]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4936      	ldr	r1, [pc, #216]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	600b      	str	r3, [r1, #0]
 8000e8e:	e006      	b.n	8000e9e <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e90:	4b33      	ldr	r3, [pc, #204]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	4931      	ldr	r1, [pc, #196]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d006      	beq.n	8000eb8 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000eaa:	4b2d      	ldr	r3, [pc, #180]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000eac:	685a      	ldr	r2, [r3, #4]
 8000eae:	492c      	ldr	r1, [pc, #176]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	604b      	str	r3, [r1, #4]
 8000eb6:	e006      	b.n	8000ec6 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eb8:	4b29      	ldr	r3, [pc, #164]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	4927      	ldr	r1, [pc, #156]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d006      	beq.n	8000ee0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ed2:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000ed4:	689a      	ldr	r2, [r3, #8]
 8000ed6:	4922      	ldr	r1, [pc, #136]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	608b      	str	r3, [r1, #8]
 8000ede:	e006      	b.n	8000eee <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	491d      	ldr	r1, [pc, #116]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000eea:	4013      	ands	r3, r2
 8000eec:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d006      	beq.n	8000f08 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000efa:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000efc:	68da      	ldr	r2, [r3, #12]
 8000efe:	4918      	ldr	r1, [pc, #96]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	60cb      	str	r3, [r1, #12]
 8000f06:	e006      	b.n	8000f16 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f08:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000f0a:	68da      	ldr	r2, [r3, #12]
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	4913      	ldr	r1, [pc, #76]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000f12:	4013      	ands	r3, r2
 8000f14:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f18:	3301      	adds	r3, #1
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1e:	2b0f      	cmp	r3, #15
 8000f20:	f67f aed4 	bls.w	8000ccc <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000f24:	bf00      	nop
 8000f26:	372c      	adds	r7, #44	; 0x2c
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	10210000 	.word	0x10210000
 8000f34:	10110000 	.word	0x10110000
 8000f38:	10120000 	.word	0x10120000
 8000f3c:	10310000 	.word	0x10310000
 8000f40:	10320000 	.word	0x10320000
 8000f44:	10220000 	.word	0x10220000
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40010000 	.word	0x40010000
 8000f50:	40010800 	.word	0x40010800
 8000f54:	40010c00 	.word	0x40010c00
 8000f58:	40011000 	.word	0x40011000
 8000f5c:	40011400 	.word	0x40011400
 8000f60:	40010400 	.word	0x40010400

08000f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	807b      	strh	r3, [r7, #2]
 8000f70:	4613      	mov	r3, r2
 8000f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f74:	787b      	ldrb	r3, [r7, #1]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f7a:	887a      	ldrh	r2, [r7, #2]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f80:	e003      	b.n	8000f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f82:	887b      	ldrh	r3, [r7, #2]
 8000f84:	041a      	lsls	r2, r3, #16
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	611a      	str	r2, [r3, #16]
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr

08000f94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fa0:	695a      	ldr	r2, [r3, #20]
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d006      	beq.n	8000fb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f806 	bl	8000fc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40010400 	.word	0x40010400

08000fc4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr

08000fd8 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e0e7      	b.n	80011c2 <HAL_I2C_Init+0x1ea>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d106      	bne.n	800100c <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f001 ff80 	bl	8002f0c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2224      	movs	r2, #36	; 0x24
 8001010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 0201 	bic.w	r2, r2, #1
 8001022:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001024:	f001 faf4 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 8001028:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	4a67      	ldr	r2, [pc, #412]	; (80011cc <HAL_I2C_Init+0x1f4>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d807      	bhi.n	8001044 <HAL_I2C_Init+0x6c>
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4a66      	ldr	r2, [pc, #408]	; (80011d0 <HAL_I2C_Init+0x1f8>)
 8001038:	4293      	cmp	r3, r2
 800103a:	bf94      	ite	ls
 800103c:	2301      	movls	r3, #1
 800103e:	2300      	movhi	r3, #0
 8001040:	b2db      	uxtb	r3, r3
 8001042:	e006      	b.n	8001052 <HAL_I2C_Init+0x7a>
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	4a63      	ldr	r2, [pc, #396]	; (80011d4 <HAL_I2C_Init+0x1fc>)
 8001048:	4293      	cmp	r3, r2
 800104a:	bf94      	ite	ls
 800104c:	2301      	movls	r3, #1
 800104e:	2300      	movhi	r3, #0
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e0b3      	b.n	80011c2 <HAL_I2C_Init+0x1ea>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	4a5e      	ldr	r2, [pc, #376]	; (80011d8 <HAL_I2C_Init+0x200>)
 800105e:	fba2 2303 	umull	r2, r3, r2, r3
 8001062:	0c9b      	lsrs	r3, r3, #18
 8001064:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	4a56      	ldr	r2, [pc, #344]	; (80011cc <HAL_I2C_Init+0x1f4>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d802      	bhi.n	800107e <HAL_I2C_Init+0xa6>
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3301      	adds	r3, #1
 800107c:	e009      	b.n	8001092 <HAL_I2C_Init+0xba>
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001084:	fb02 f303 	mul.w	r3, r2, r3
 8001088:	4a54      	ldr	r2, [pc, #336]	; (80011dc <HAL_I2C_Init+0x204>)
 800108a:	fba2 2303 	umull	r2, r3, r2, r3
 800108e:	099b      	lsrs	r3, r3, #6
 8001090:	3301      	adds	r3, #1
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	6812      	ldr	r2, [r2, #0]
 8001096:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	4a4b      	ldr	r2, [pc, #300]	; (80011cc <HAL_I2C_Init+0x1f4>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d80d      	bhi.n	80010be <HAL_I2C_Init+0xe6>
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	1e5a      	subs	r2, r3, #1
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b0:	3301      	adds	r3, #1
 80010b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	bf38      	it	cc
 80010ba:	2304      	movcc	r3, #4
 80010bc:	e04f      	b.n	800115e <HAL_I2C_Init+0x186>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d111      	bne.n	80010ea <HAL_I2C_Init+0x112>
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	1e59      	subs	r1, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4413      	add	r3, r2
 80010d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80010d8:	3301      	adds	r3, #1
 80010da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010de:	2b00      	cmp	r3, #0
 80010e0:	bf0c      	ite	eq
 80010e2:	2301      	moveq	r3, #1
 80010e4:	2300      	movne	r3, #0
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	e012      	b.n	8001110 <HAL_I2C_Init+0x138>
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	1e59      	subs	r1, r3, #1
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	009a      	lsls	r2, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001100:	3301      	adds	r3, #1
 8001102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001106:	2b00      	cmp	r3, #0
 8001108:	bf0c      	ite	eq
 800110a:	2301      	moveq	r3, #1
 800110c:	2300      	movne	r3, #0
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <HAL_I2C_Init+0x140>
 8001114:	2301      	movs	r3, #1
 8001116:	e022      	b.n	800115e <HAL_I2C_Init+0x186>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d10e      	bne.n	800113e <HAL_I2C_Init+0x166>
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	1e59      	subs	r1, r3, #1
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001132:	3301      	adds	r3, #1
 8001134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800113c:	e00f      	b.n	800115e <HAL_I2C_Init+0x186>
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	1e59      	subs	r1, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	009a      	lsls	r2, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	fbb1 f3f3 	udiv	r3, r1, r3
 8001154:	3301      	adds	r3, #1
 8001156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800115a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	6812      	ldr	r2, [r2, #0]
 8001162:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69d9      	ldr	r1, [r3, #28]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a1a      	ldr	r2, [r3, #32]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6919      	ldr	r1, [r3, #16]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	430a      	orrs	r2, r1
 8001182:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6959      	ldr	r1, [r3, #20]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	699a      	ldr	r2, [r3, #24]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	430a      	orrs	r2, r1
 8001192:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f042 0201 	orr.w	r2, r2, #1
 80011a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2220      	movs	r2, #32
 80011ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	000186a0 	.word	0x000186a0
 80011d0:	001e847f 	.word	0x001e847f
 80011d4:	003d08ff 	.word	0x003d08ff
 80011d8:	431bde83 	.word	0x431bde83
 80011dc:	10624dd3 	.word	0x10624dd3

080011e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	461a      	mov	r2, r3
 80011ec:	460b      	mov	r3, r1
 80011ee:	817b      	strh	r3, [r7, #10]
 80011f0:	4613      	mov	r3, r2
 80011f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80011f8:	f7ff fc20 	bl	8000a3c <HAL_GetTick>
 80011fc:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b20      	cmp	r3, #32
 8001208:	f040 80ee 	bne.w	80013e8 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2319      	movs	r3, #25
 8001212:	2201      	movs	r2, #1
 8001214:	4977      	ldr	r1, [pc, #476]	; (80013f4 <HAL_I2C_Master_Transmit+0x214>)
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f000 fc74 	bl	8001b04 <I2C_WaitOnFlagUntilTimeout>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8001222:	2302      	movs	r3, #2
 8001224:	e0e1      	b.n	80013ea <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800122c:	2b01      	cmp	r3, #1
 800122e:	d101      	bne.n	8001234 <HAL_I2C_Master_Transmit+0x54>
 8001230:	2302      	movs	r3, #2
 8001232:	e0da      	b.n	80013ea <HAL_I2C_Master_Transmit+0x20a>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2201      	movs	r2, #1
 8001238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b01      	cmp	r3, #1
 8001248:	d007      	beq.n	800125a <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f042 0201 	orr.w	r2, r2, #1
 8001258:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001268:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2221      	movs	r2, #33	; 0x21
 800126e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2210      	movs	r2, #16
 8001276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2200      	movs	r2, #0
 800127e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	893a      	ldrh	r2, [r7, #8]
 800128a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4a5a      	ldr	r2, [pc, #360]	; (80013f8 <HAL_I2C_Master_Transmit+0x218>)
 8001290:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001296:	b29a      	uxth	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800129c:	8979      	ldrh	r1, [r7, #10]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	6a3a      	ldr	r2, [r7, #32]
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f000 fae4 	bl	8001870 <I2C_MasterRequestWrite>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00f      	beq.n	80012ce <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d105      	bne.n	80012c2 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e093      	b.n	80013ea <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e08d      	b.n	80013ea <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 80012e4:	e066      	b.n	80013b4 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	6a39      	ldr	r1, [r7, #32]
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f000 fcc9 	bl	8001c82 <I2C_WaitOnTXEFlagUntilTimeout>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00f      	beq.n	8001316 <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	d109      	bne.n	8001312 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800130c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e06b      	b.n	80013ea <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e069      	b.n	80013ea <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	1c59      	adds	r1, r3, #1
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	6251      	str	r1, [r2, #36]	; 0x24
 8001320:	781a      	ldrb	r2, [r3, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800132c:	b29b      	uxth	r3, r3
 800132e:	3b01      	subs	r3, #1
 8001330:	b29a      	uxth	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800133a:	3b01      	subs	r3, #1
 800133c:	b29a      	uxth	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	2b04      	cmp	r3, #4
 800134e:	d119      	bne.n	8001384 <HAL_I2C_Master_Transmit+0x1a4>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001354:	2b00      	cmp	r3, #0
 8001356:	d015      	beq.n	8001384 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135c:	1c59      	adds	r1, r3, #1
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	6251      	str	r1, [r2, #36]	; 0x24
 8001362:	781a      	ldrb	r2, [r3, #0]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800136e:	b29b      	uxth	r3, r3
 8001370:	3b01      	subs	r3, #1
 8001372:	b29a      	uxth	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800137c:	3b01      	subs	r3, #1
 800137e:	b29a      	uxth	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	6a39      	ldr	r1, [r7, #32]
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f000 fcb7 	bl	8001cfc <I2C_WaitOnBTFFlagUntilTimeout>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00f      	beq.n	80013b4 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	2b04      	cmp	r3, #4
 800139a:	d109      	bne.n	80013b0 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013aa:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e01c      	b.n	80013ea <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e01a      	b.n	80013ea <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d194      	bne.n	80012e6 <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2220      	movs	r2, #32
 80013d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80013e4:	2300      	movs	r3, #0
 80013e6:	e000      	b.n	80013ea <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80013e8:	2302      	movs	r3, #2
  }
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	00100002 	.word	0x00100002
 80013f8:	ffff0000 	.word	0xffff0000

080013fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08c      	sub	sp, #48	; 0x30
 8001400:	af02      	add	r7, sp, #8
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	607a      	str	r2, [r7, #4]
 8001406:	461a      	mov	r2, r3
 8001408:	460b      	mov	r3, r1
 800140a:	817b      	strh	r3, [r7, #10]
 800140c:	4613      	mov	r3, r2
 800140e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001414:	f7ff fb12 	bl	8000a3c <HAL_GetTick>
 8001418:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b20      	cmp	r3, #32
 8001424:	f040 821d 	bne.w	8001862 <HAL_I2C_Master_Receive+0x466>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2319      	movs	r3, #25
 800142e:	2201      	movs	r2, #1
 8001430:	4987      	ldr	r1, [pc, #540]	; (8001650 <HAL_I2C_Master_Receive+0x254>)
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	f000 fb66 	bl	8001b04 <I2C_WaitOnFlagUntilTimeout>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800143e:	2302      	movs	r3, #2
 8001440:	e210      	b.n	8001864 <HAL_I2C_Master_Receive+0x468>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <HAL_I2C_Master_Receive+0x54>
 800144c:	2302      	movs	r3, #2
 800144e:	e209      	b.n	8001864 <HAL_I2C_Master_Receive+0x468>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b01      	cmp	r3, #1
 8001464:	d007      	beq.n	8001476 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f042 0201 	orr.w	r2, r2, #1
 8001474:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001484:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2222      	movs	r2, #34	; 0x22
 800148a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2210      	movs	r2, #16
 8001492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	893a      	ldrh	r2, [r7, #8]
 80014a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4a6a      	ldr	r2, [pc, #424]	; (8001654 <HAL_I2C_Master_Receive+0x258>)
 80014ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80014b8:	8979      	ldrh	r1, [r7, #10]
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f000 fa58 	bl	8001974 <I2C_MasterRequestRead>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00f      	beq.n	80014ea <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d105      	bne.n	80014de <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e1c2      	b.n	8001864 <HAL_I2C_Master_Receive+0x468>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e1bc      	b.n	8001864 <HAL_I2C_Master_Receive+0x468>
      }
    }

    if(hi2c->XferSize == 0U)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d113      	bne.n	800151a <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	623b      	str	r3, [r7, #32]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	623b      	str	r3, [r7, #32]
 8001506:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	e190      	b.n	800183c <HAL_I2C_Master_Receive+0x440>
    }
    else if(hi2c->XferSize == 1U)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800151e:	2b01      	cmp	r3, #1
 8001520:	d11d      	bne.n	800155e <HAL_I2C_Master_Receive+0x162>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001530:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001532:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	61fb      	str	r3, [r7, #28]
 8001548:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001558:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800155a:	b662      	cpsie	i
 800155c:	e16e      	b.n	800183c <HAL_I2C_Master_Receive+0x440>

      /* Re-enable IRQs */
      __enable_irq(); 
    }
    else if(hi2c->XferSize == 2U)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001562:	2b02      	cmp	r3, #2
 8001564:	d11d      	bne.n	80015a2 <HAL_I2C_Master_Receive+0x1a6>
    {
      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001574:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001576:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001578:	2300      	movs	r3, #0
 800157a:	61bb      	str	r3, [r7, #24]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	61bb      	str	r3, [r7, #24]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	61bb      	str	r3, [r7, #24]
 800158c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800159c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800159e:	b662      	cpsie	i
 80015a0:	e14c      	b.n	800183c <HAL_I2C_Master_Receive+0x440>
      __enable_irq(); 
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 80015c8:	e138      	b.n	800183c <HAL_I2C_Master_Receive+0x440>
    {
      if(hi2c->XferSize <= 3U)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	f200 80ef 	bhi.w	80017b2 <HAL_I2C_Master_Receive+0x3b6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d127      	bne.n	800162c <HAL_I2C_Master_Receive+0x230>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80015dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f000 fbc8 	bl	8001d76 <I2C_WaitOnRXNEFlagUntilTimeout>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d007      	beq.n	80015fc <HAL_I2C_Master_Receive+0x200>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	2b20      	cmp	r3, #32
 80015f2:	d101      	bne.n	80015f8 <HAL_I2C_Master_Receive+0x1fc>
            {
              return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e135      	b.n	8001864 <HAL_I2C_Master_Receive+0x468>
            }
            else
            {
              return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e133      	b.n	8001864 <HAL_I2C_Master_Receive+0x468>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6918      	ldr	r0, [r3, #16]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	1c59      	adds	r1, r3, #1
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	6251      	str	r1, [r2, #36]	; 0x24
 800160c:	b2c2      	uxtb	r2, r0
 800160e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001614:	3b01      	subs	r3, #1
 8001616:	b29a      	uxth	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001620:	b29b      	uxth	r3, r3
 8001622:	3b01      	subs	r3, #1
 8001624:	b29a      	uxth	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	855a      	strh	r2, [r3, #42]	; 0x2a
 800162a:	e107      	b.n	800183c <HAL_I2C_Master_Receive+0x440>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001630:	2b02      	cmp	r3, #2
 8001632:	d14c      	bne.n	80016ce <HAL_I2C_Master_Receive+0x2d2>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163a:	2200      	movs	r2, #0
 800163c:	4906      	ldr	r1, [pc, #24]	; (8001658 <HAL_I2C_Master_Receive+0x25c>)
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 fa60 	bl	8001b04 <I2C_WaitOnFlagUntilTimeout>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d008      	beq.n	800165c <HAL_I2C_Master_Receive+0x260>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e10a      	b.n	8001864 <HAL_I2C_Master_Receive+0x468>
 800164e:	bf00      	nop
 8001650:	00100002 	.word	0x00100002
 8001654:	ffff0000 	.word	0xffff0000
 8001658:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800165c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
           __disable_irq();

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800166c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6918      	ldr	r0, [r3, #16]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	1c59      	adds	r1, r3, #1
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	6251      	str	r1, [r2, #36]	; 0x24
 800167e:	b2c2      	uxtb	r2, r0
 8001680:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001686:	3b01      	subs	r3, #1
 8001688:	b29a      	uxth	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001692:	b29b      	uxth	r3, r3
 8001694:	3b01      	subs	r3, #1
 8001696:	b29a      	uxth	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800169c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6918      	ldr	r0, [r3, #16]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	1c59      	adds	r1, r3, #1
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	6251      	str	r1, [r2, #36]	; 0x24
 80016ae:	b2c2      	uxtb	r2, r0
 80016b0:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b6:	3b01      	subs	r3, #1
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	3b01      	subs	r3, #1
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80016cc:	e0b6      	b.n	800183c <HAL_I2C_Master_Receive+0x440>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d4:	2200      	movs	r2, #0
 80016d6:	4965      	ldr	r1, [pc, #404]	; (800186c <HAL_I2C_Master_Receive+0x470>)
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f000 fa13 	bl	8001b04 <I2C_WaitOnFlagUntilTimeout>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_I2C_Master_Receive+0x2ec>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e0bd      	b.n	8001864 <HAL_I2C_Master_Receive+0x468>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80016f8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6918      	ldr	r0, [r3, #16]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	1c59      	adds	r1, r3, #1
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	6251      	str	r1, [r2, #36]	; 0x24
 800170a:	b2c2      	uxtb	r2, r0
 800170c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001712:	3b01      	subs	r3, #1
 8001714:	b29a      	uxth	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171e:	b29b      	uxth	r3, r3
 8001720:	3b01      	subs	r3, #1
 8001722:	b29a      	uxth	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800172e:	2200      	movs	r2, #0
 8001730:	494e      	ldr	r1, [pc, #312]	; (800186c <HAL_I2C_Master_Receive+0x470>)
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f000 f9e6 	bl	8001b04 <I2C_WaitOnFlagUntilTimeout>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_I2C_Master_Receive+0x346>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e090      	b.n	8001864 <HAL_I2C_Master_Receive+0x468>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001750:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6918      	ldr	r0, [r3, #16]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	1c59      	adds	r1, r3, #1
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	6251      	str	r1, [r2, #36]	; 0x24
 8001762:	b2c2      	uxtb	r2, r0
 8001764:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800176a:	3b01      	subs	r3, #1
 800176c:	b29a      	uxth	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001776:	b29b      	uxth	r3, r3
 8001778:	3b01      	subs	r3, #1
 800177a:	b29a      	uxth	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001780:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq(); 

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6918      	ldr	r0, [r3, #16]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	1c59      	adds	r1, r3, #1
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	6251      	str	r1, [r2, #36]	; 0x24
 8001792:	b2c2      	uxtb	r2, r0
 8001794:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179a:	3b01      	subs	r3, #1
 800179c:	b29a      	uxth	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	3b01      	subs	r3, #1
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80017b0:	e044      	b.n	800183c <HAL_I2C_Master_Receive+0x440>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80017b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f000 fadd 	bl	8001d76 <I2C_WaitOnRXNEFlagUntilTimeout>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d007      	beq.n	80017d2 <HAL_I2C_Master_Receive+0x3d6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	2b20      	cmp	r3, #32
 80017c8:	d101      	bne.n	80017ce <HAL_I2C_Master_Receive+0x3d2>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e04a      	b.n	8001864 <HAL_I2C_Master_Receive+0x468>
          }
          else
          {
            return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e048      	b.n	8001864 <HAL_I2C_Master_Receive+0x468>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6918      	ldr	r0, [r3, #16]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	1c59      	adds	r1, r3, #1
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	6251      	str	r1, [r2, #36]	; 0x24
 80017e2:	b2c2      	uxtb	r2, r0
 80017e4:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ea:	3b01      	subs	r3, #1
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	3b01      	subs	r3, #1
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	2b04      	cmp	r3, #4
 800180c:	d116      	bne.n	800183c <HAL_I2C_Master_Receive+0x440>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6918      	ldr	r0, [r3, #16]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	1c59      	adds	r1, r3, #1
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	6251      	str	r1, [r2, #36]	; 0x24
 800181e:	b2c2      	uxtb	r2, r0
 8001820:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001826:	3b01      	subs	r3, #1
 8001828:	b29a      	uxth	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001832:	b29b      	uxth	r3, r3
 8001834:	3b01      	subs	r3, #1
 8001836:	b29a      	uxth	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001840:	2b00      	cmp	r3, #0
 8001842:	f47f aec2 	bne.w	80015ca <HAL_I2C_Master_Receive+0x1ce>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2220      	movs	r2, #32
 800184a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_I2C_Master_Receive+0x468>
  }
  else
  {
    return HAL_BUSY;
 8001862:	2302      	movs	r3, #2
  }
}
 8001864:	4618      	mov	r0, r3
 8001866:	3728      	adds	r7, #40	; 0x28
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	00010004 	.word	0x00010004

08001870 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af02      	add	r7, sp, #8
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	607a      	str	r2, [r7, #4]
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	460b      	mov	r3, r1
 800187e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001884:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	2b04      	cmp	r3, #4
 800188a:	d006      	beq.n	800189a <I2C_MasterRequestWrite+0x2a>
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d003      	beq.n	800189a <I2C_MasterRequestWrite+0x2a>
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001898:	d108      	bne.n	80018ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	e00b      	b.n	80018c4 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	2b12      	cmp	r3, #18
 80018b2:	d107      	bne.n	80018c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018c2:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 f917 	bl	8001b04 <I2C_WaitOnFlagUntilTimeout>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e041      	b.n	8001964 <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018e8:	d108      	bne.n	80018fc <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018ea:	897b      	ldrh	r3, [r7, #10]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	461a      	mov	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80018f8:	611a      	str	r2, [r3, #16]
 80018fa:	e021      	b.n	8001940 <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80018fc:	897b      	ldrh	r3, [r7, #10]
 80018fe:	11db      	asrs	r3, r3, #7
 8001900:	b2db      	uxtb	r3, r3
 8001902:	f003 0306 	and.w	r3, r3, #6
 8001906:	b2db      	uxtb	r3, r3
 8001908:	f063 030f 	orn	r3, r3, #15
 800190c:	b2da      	uxtb	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	4914      	ldr	r1, [pc, #80]	; (800196c <I2C_MasterRequestWrite+0xfc>)
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f000 f943 	bl	8001ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d007      	beq.n	8001936 <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	2b04      	cmp	r3, #4
 800192c:	d101      	bne.n	8001932 <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e018      	b.n	8001964 <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e016      	b.n	8001964 <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001936:	897b      	ldrh	r3, [r7, #10]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	490a      	ldr	r1, [pc, #40]	; (8001970 <I2C_MasterRequestWrite+0x100>)
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 f92d 	bl	8001ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d007      	beq.n	8001962 <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	2b04      	cmp	r3, #4
 8001958:	d101      	bne.n	800195e <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e002      	b.n	8001964 <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e000      	b.n	8001964 <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	00010008 	.word	0x00010008
 8001970:	00010002 	.word	0x00010002

08001974 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af02      	add	r7, sp, #8
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	460b      	mov	r3, r1
 8001982:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001998:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	2b04      	cmp	r3, #4
 800199e:	d006      	beq.n	80019ae <I2C_MasterRequestRead+0x3a>
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d003      	beq.n	80019ae <I2C_MasterRequestRead+0x3a>
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80019ac:	d108      	bne.n	80019c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	e00b      	b.n	80019d8 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c4:	2b11      	cmp	r3, #17
 80019c6:	d107      	bne.n	80019d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019d6:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 f88d 	bl	8001b04 <I2C_WaitOnFlagUntilTimeout>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e07f      	b.n	8001af4 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019fc:	d108      	bne.n	8001a10 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80019fe:	897b      	ldrh	r3, [r7, #10]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	611a      	str	r2, [r3, #16]
 8001a0e:	e05f      	b.n	8001ad0 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001a10:	897b      	ldrh	r3, [r7, #10]
 8001a12:	11db      	asrs	r3, r3, #7
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	f003 0306 	and.w	r3, r3, #6
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	f063 030f 	orn	r3, r3, #15
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	4933      	ldr	r1, [pc, #204]	; (8001afc <I2C_MasterRequestRead+0x188>)
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 f8b9 	bl	8001ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d007      	beq.n	8001a4a <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d101      	bne.n	8001a46 <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e056      	b.n	8001af4 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e054      	b.n	8001af4 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001a4a:	897b      	ldrh	r3, [r7, #10]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	4929      	ldr	r1, [pc, #164]	; (8001b00 <I2C_MasterRequestRead+0x18c>)
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f000 f8a3 	bl	8001ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d007      	beq.n	8001a76 <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d101      	bne.n	8001a72 <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e040      	b.n	8001af4 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e03e      	b.n	8001af4 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a9a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f000 f82b 	bl	8001b04 <I2C_WaitOnFlagUntilTimeout>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e01d      	b.n	8001af4 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001ab8:	897b      	ldrh	r3, [r7, #10]
 8001aba:	11db      	asrs	r3, r3, #7
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	f003 0306 	and.w	r3, r3, #6
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	f063 030e 	orn	r3, r3, #14
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	490a      	ldr	r1, [pc, #40]	; (8001b00 <I2C_MasterRequestRead+0x18c>)
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 f865 	bl	8001ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d007      	beq.n	8001af2 <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d101      	bne.n	8001aee <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e002      	b.n	8001af4 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e000      	b.n	8001af4 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	00010008 	.word	0x00010008
 8001b00:	00010002 	.word	0x00010002

08001b04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	4613      	mov	r3, r2
 8001b12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001b14:	e01f      	b.n	8001b56 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1c:	d01b      	beq.n	8001b56 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d007      	beq.n	8001b34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b24:	f7fe ff8a 	bl	8000a3c <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d210      	bcs.n	8001b56 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e023      	b.n	8001b9e <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	0c1b      	lsrs	r3, r3, #16
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d10d      	bne.n	8001b7c <I2C_WaitOnFlagUntilTimeout+0x78>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	43da      	mvns	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	bf0c      	ite	eq
 8001b72:	2301      	moveq	r3, #1
 8001b74:	2300      	movne	r3, #0
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	e00c      	b.n	8001b96 <I2C_WaitOnFlagUntilTimeout+0x92>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	43da      	mvns	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	4013      	ands	r3, r2
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	bf0c      	ite	eq
 8001b8e:	2301      	moveq	r3, #1
 8001b90:	2300      	movne	r3, #0
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	461a      	mov	r2, r3
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d0bc      	beq.n	8001b16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bb4:	e040      	b.n	8001c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bc4:	d11c      	bne.n	8001c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bd4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001bde:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2204      	movs	r2, #4
 8001be4:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e03c      	b.n	8001c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c06:	d017      	beq.n	8001c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d007      	beq.n	8001c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8001c0e:	f7fe ff15 	bl	8000a3c <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d20c      	bcs.n	8001c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2220      	movs	r2, #32
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e020      	b.n	8001c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	0c1b      	lsrs	r3, r3, #16
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d10c      	bne.n	8001c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	43da      	mvns	r2, r3
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf14      	ite	ne
 8001c54:	2301      	movne	r3, #1
 8001c56:	2300      	moveq	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	e00b      	b.n	8001c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	43da      	mvns	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4013      	ands	r3, r2
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	bf14      	ite	ne
 8001c6e:	2301      	movne	r3, #1
 8001c70:	2300      	moveq	r3, #0
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d19e      	bne.n	8001bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b084      	sub	sp, #16
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c8e:	e029      	b.n	8001ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f000 f8ba 	bl	8001e0a <I2C_IsAcknowledgeFailed>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e029      	b.n	8001cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca6:	d01d      	beq.n	8001ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d007      	beq.n	8001cbe <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001cae:	f7fe fec5 	bl	8000a3c <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d212      	bcs.n	8001ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f043 0220 	orr.w	r2, r3, #32
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e007      	b.n	8001cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cee:	2b80      	cmp	r3, #128	; 0x80
 8001cf0:	d1ce      	bne.n	8001c90 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d08:	e029      	b.n	8001d5e <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 f87d 	bl	8001e0a <I2C_IsAcknowledgeFailed>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e029      	b.n	8001d6e <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d20:	d01d      	beq.n	8001d5e <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d007      	beq.n	8001d38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d28:	f7fe fe88 	bl	8000a3c <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d212      	bcs.n	8001d5e <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	f043 0220 	orr.w	r2, r3, #32
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e007      	b.n	8001d6e <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d1ce      	bne.n	8001d0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b084      	sub	sp, #16
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d82:	e036      	b.n	8001df2 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	f003 0310 	and.w	r3, r3, #16
 8001d8e:	2b10      	cmp	r3, #16
 8001d90:	d114      	bne.n	8001dbc <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f06f 0210 	mvn.w	r2, #16
 8001d9a:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2220      	movs	r2, #32
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e022      	b.n	8001e02 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d007      	beq.n	8001dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8001dc2:	f7fe fe3b 	bl	8000a3c <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d20f      	bcs.n	8001df2 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f043 0220 	orr.w	r2, r3, #32
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2220      	movs	r2, #32
 8001de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e007      	b.n	8001e02 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfc:	2b40      	cmp	r3, #64	; 0x40
 8001dfe:	d1c1      	bne.n	8001d84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e20:	d114      	bne.n	8001e4c <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e2a:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2204      	movs	r2, #4
 8001e30:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 8087 	beq.w	8001f80 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e72:	4b92      	ldr	r3, [pc, #584]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d00c      	beq.n	8001e98 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e7e:	4b8f      	ldr	r3, [pc, #572]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d112      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x58>
 8001e8a:	4b8c      	ldr	r3, [pc, #560]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e96:	d10b      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e98:	4b88      	ldr	r3, [pc, #544]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d06c      	beq.n	8001f7e <HAL_RCC_OscConfig+0x126>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d168      	bne.n	8001f7e <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e22d      	b.n	800230c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb8:	d106      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x70>
 8001eba:	4b80      	ldr	r3, [pc, #512]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a7f      	ldr	r2, [pc, #508]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e02e      	b.n	8001f26 <HAL_RCC_OscConfig+0xce>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10c      	bne.n	8001eea <HAL_RCC_OscConfig+0x92>
 8001ed0:	4b7a      	ldr	r3, [pc, #488]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a79      	ldr	r2, [pc, #484]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	4b77      	ldr	r3, [pc, #476]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a76      	ldr	r2, [pc, #472]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	e01d      	b.n	8001f26 <HAL_RCC_OscConfig+0xce>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef2:	d10c      	bne.n	8001f0e <HAL_RCC_OscConfig+0xb6>
 8001ef4:	4b71      	ldr	r3, [pc, #452]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a70      	ldr	r2, [pc, #448]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001efa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	4b6e      	ldr	r3, [pc, #440]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a6d      	ldr	r2, [pc, #436]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	e00b      	b.n	8001f26 <HAL_RCC_OscConfig+0xce>
 8001f0e:	4b6b      	ldr	r3, [pc, #428]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a6a      	ldr	r2, [pc, #424]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	4b68      	ldr	r3, [pc, #416]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a67      	ldr	r2, [pc, #412]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001f20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f24:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d013      	beq.n	8001f56 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2e:	f7fe fd85 	bl	8000a3c <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f36:	f7fe fd81 	bl	8000a3c <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b64      	cmp	r3, #100	; 0x64
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e1e1      	b.n	800230c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f48:	4b5c      	ldr	r3, [pc, #368]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0f0      	beq.n	8001f36 <HAL_RCC_OscConfig+0xde>
 8001f54:	e014      	b.n	8001f80 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f56:	f7fe fd71 	bl	8000a3c <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f5e:	f7fe fd6d 	bl	8000a3c <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b64      	cmp	r3, #100	; 0x64
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e1cd      	b.n	800230c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f70:	4b52      	ldr	r3, [pc, #328]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1f0      	bne.n	8001f5e <HAL_RCC_OscConfig+0x106>
 8001f7c:	e000      	b.n	8001f80 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d063      	beq.n	8002054 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f8c:	4b4b      	ldr	r3, [pc, #300]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00b      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f98:	4b48      	ldr	r3, [pc, #288]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d11c      	bne.n	8001fde <HAL_RCC_OscConfig+0x186>
 8001fa4:	4b45      	ldr	r3, [pc, #276]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d116      	bne.n	8001fde <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb0:	4b42      	ldr	r3, [pc, #264]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x170>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e1a1      	b.n	800230c <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc8:	4b3c      	ldr	r3, [pc, #240]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4939      	ldr	r1, [pc, #228]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fdc:	e03a      	b.n	8002054 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d020      	beq.n	8002028 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe6:	4b36      	ldr	r3, [pc, #216]	; (80020c0 <HAL_RCC_OscConfig+0x268>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7fe fd26 	bl	8000a3c <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff4:	f7fe fd22 	bl	8000a3c <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e182      	b.n	800230c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002006:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002012:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4926      	ldr	r1, [pc, #152]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
 8002026:	e015      	b.n	8002054 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002028:	4b25      	ldr	r3, [pc, #148]	; (80020c0 <HAL_RCC_OscConfig+0x268>)
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202e:	f7fe fd05 	bl	8000a3c <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002036:	f7fe fd01 	bl	8000a3c <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e161      	b.n	800230c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002048:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f0      	bne.n	8002036 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b00      	cmp	r3, #0
 800205e:	d039      	beq.n	80020d4 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d019      	beq.n	800209c <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002068:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 800206a:	2201      	movs	r2, #1
 800206c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206e:	f7fe fce5 	bl	8000a3c <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002076:	f7fe fce1 	bl	8000a3c <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e141      	b.n	800230c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8002094:	2001      	movs	r0, #1
 8002096:	f000 fae3 	bl	8002660 <RCC_Delay>
 800209a:	e01b      	b.n	80020d4 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a2:	f7fe fccb 	bl	8000a3c <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a8:	e00e      	b.n	80020c8 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020aa:	f7fe fcc7 	bl	8000a3c <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d907      	bls.n	80020c8 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e127      	b.n	800230c <HAL_RCC_OscConfig+0x4b4>
 80020bc:	40021000 	.word	0x40021000
 80020c0:	42420000 	.word	0x42420000
 80020c4:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c8:	4b92      	ldr	r3, [pc, #584]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1ea      	bne.n	80020aa <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 80a6 	beq.w	800222e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e6:	4b8b      	ldr	r3, [pc, #556]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10d      	bne.n	800210e <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f2:	4b88      	ldr	r3, [pc, #544]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	4a87      	ldr	r2, [pc, #540]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 80020f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fc:	61d3      	str	r3, [r2, #28]
 80020fe:	4b85      	ldr	r3, [pc, #532]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800210a:	2301      	movs	r3, #1
 800210c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210e:	4b82      	ldr	r3, [pc, #520]	; (8002318 <HAL_RCC_OscConfig+0x4c0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d118      	bne.n	800214c <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800211a:	4b7f      	ldr	r3, [pc, #508]	; (8002318 <HAL_RCC_OscConfig+0x4c0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a7e      	ldr	r2, [pc, #504]	; (8002318 <HAL_RCC_OscConfig+0x4c0>)
 8002120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002126:	f7fe fc89 	bl	8000a3c <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212e:	f7fe fc85 	bl	8000a3c <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b64      	cmp	r3, #100	; 0x64
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e0e5      	b.n	800230c <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	4b75      	ldr	r3, [pc, #468]	; (8002318 <HAL_RCC_OscConfig+0x4c0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x30a>
 8002154:	4b6f      	ldr	r3, [pc, #444]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4a6e      	ldr	r2, [pc, #440]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6213      	str	r3, [r2, #32]
 8002160:	e02d      	b.n	80021be <HAL_RCC_OscConfig+0x366>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x32c>
 800216a:	4b6a      	ldr	r3, [pc, #424]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	4a69      	ldr	r2, [pc, #420]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 8002170:	f023 0301 	bic.w	r3, r3, #1
 8002174:	6213      	str	r3, [r2, #32]
 8002176:	4b67      	ldr	r3, [pc, #412]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4a66      	ldr	r2, [pc, #408]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 800217c:	f023 0304 	bic.w	r3, r3, #4
 8002180:	6213      	str	r3, [r2, #32]
 8002182:	e01c      	b.n	80021be <HAL_RCC_OscConfig+0x366>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	2b05      	cmp	r3, #5
 800218a:	d10c      	bne.n	80021a6 <HAL_RCC_OscConfig+0x34e>
 800218c:	4b61      	ldr	r3, [pc, #388]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	4a60      	ldr	r2, [pc, #384]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 8002192:	f043 0304 	orr.w	r3, r3, #4
 8002196:	6213      	str	r3, [r2, #32]
 8002198:	4b5e      	ldr	r3, [pc, #376]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	4a5d      	ldr	r2, [pc, #372]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6213      	str	r3, [r2, #32]
 80021a4:	e00b      	b.n	80021be <HAL_RCC_OscConfig+0x366>
 80021a6:	4b5b      	ldr	r3, [pc, #364]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4a5a      	ldr	r2, [pc, #360]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	6213      	str	r3, [r2, #32]
 80021b2:	4b58      	ldr	r3, [pc, #352]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	4a57      	ldr	r2, [pc, #348]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 80021b8:	f023 0304 	bic.w	r3, r3, #4
 80021bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d015      	beq.n	80021f2 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c6:	f7fe fc39 	bl	8000a3c <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021cc:	e00a      	b.n	80021e4 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ce:	f7fe fc35 	bl	8000a3c <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021dc:	4293      	cmp	r3, r2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e093      	b.n	800230c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e4:	4b4b      	ldr	r3, [pc, #300]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0ee      	beq.n	80021ce <HAL_RCC_OscConfig+0x376>
 80021f0:	e014      	b.n	800221c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f2:	f7fe fc23 	bl	8000a3c <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f8:	e00a      	b.n	8002210 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021fa:	f7fe fc1f 	bl	8000a3c <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f241 3288 	movw	r2, #5000	; 0x1388
 8002208:	4293      	cmp	r3, r2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e07d      	b.n	800230c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002210:	4b40      	ldr	r3, [pc, #256]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1ee      	bne.n	80021fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800221c:	7dfb      	ldrb	r3, [r7, #23]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d105      	bne.n	800222e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002222:	4b3c      	ldr	r3, [pc, #240]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	4a3b      	ldr	r2, [pc, #236]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 8002228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800222c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d069      	beq.n	800230a <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002236:	4b37      	ldr	r3, [pc, #220]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b08      	cmp	r3, #8
 8002240:	d061      	beq.n	8002306 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d146      	bne.n	80022d8 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224a:	4b34      	ldr	r3, [pc, #208]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7fe fbf4 	bl	8000a3c <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002258:	f7fe fbf0 	bl	8000a3c <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e050      	b.n	800230c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226a:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800227e:	d108      	bne.n	8002292 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002280:	4b24      	ldr	r3, [pc, #144]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	4921      	ldr	r1, [pc, #132]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 800228e:	4313      	orrs	r3, r2
 8002290:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a19      	ldr	r1, [r3, #32]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	430b      	orrs	r3, r1
 80022a4:	491b      	ldr	r1, [pc, #108]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022aa:	4b1c      	ldr	r3, [pc, #112]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7fe fbc4 	bl	8000a3c <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b8:	f7fe fbc0 	bl	8000a3c <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e020      	b.n	800230c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022ca:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0x460>
 80022d6:	e018      	b.n	800230a <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d8:	4b10      	ldr	r3, [pc, #64]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7fe fbad 	bl	8000a3c <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e6:	f7fe fba9 	bl	8000a3c <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e009      	b.n	800230c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_RCC_OscConfig+0x4bc>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1f0      	bne.n	80022e6 <HAL_RCC_OscConfig+0x48e>
 8002304:	e001      	b.n	800230a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	40007000 	.word	0x40007000
 800231c:	42420060 	.word	0x42420060

08002320 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800232e:	4b7e      	ldr	r3, [pc, #504]	; (8002528 <HAL_RCC_ClockConfig+0x208>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d910      	bls.n	800235e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233c:	4b7a      	ldr	r3, [pc, #488]	; (8002528 <HAL_RCC_ClockConfig+0x208>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f023 0207 	bic.w	r2, r3, #7
 8002344:	4978      	ldr	r1, [pc, #480]	; (8002528 <HAL_RCC_ClockConfig+0x208>)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	4313      	orrs	r3, r2
 800234a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800234c:	4b76      	ldr	r3, [pc, #472]	; (8002528 <HAL_RCC_ClockConfig+0x208>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d001      	beq.n	800235e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e0e0      	b.n	8002520 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d020      	beq.n	80023ac <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002376:	4b6d      	ldr	r3, [pc, #436]	; (800252c <HAL_RCC_ClockConfig+0x20c>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4a6c      	ldr	r2, [pc, #432]	; (800252c <HAL_RCC_ClockConfig+0x20c>)
 800237c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002380:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d005      	beq.n	800239a <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800238e:	4b67      	ldr	r3, [pc, #412]	; (800252c <HAL_RCC_ClockConfig+0x20c>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	4a66      	ldr	r2, [pc, #408]	; (800252c <HAL_RCC_ClockConfig+0x20c>)
 8002394:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002398:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800239a:	4b64      	ldr	r3, [pc, #400]	; (800252c <HAL_RCC_ClockConfig+0x20c>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	4961      	ldr	r1, [pc, #388]	; (800252c <HAL_RCC_ClockConfig+0x20c>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d06a      	beq.n	800248e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d107      	bne.n	80023d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c0:	4b5a      	ldr	r3, [pc, #360]	; (800252c <HAL_RCC_ClockConfig+0x20c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d115      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0a7      	b.n	8002520 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d107      	bne.n	80023e8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d8:	4b54      	ldr	r3, [pc, #336]	; (800252c <HAL_RCC_ClockConfig+0x20c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d109      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e09b      	b.n	8002520 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e8:	4b50      	ldr	r3, [pc, #320]	; (800252c <HAL_RCC_ClockConfig+0x20c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e093      	b.n	8002520 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f8:	4b4c      	ldr	r3, [pc, #304]	; (800252c <HAL_RCC_ClockConfig+0x20c>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f023 0203 	bic.w	r2, r3, #3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	4949      	ldr	r1, [pc, #292]	; (800252c <HAL_RCC_ClockConfig+0x20c>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800240a:	f7fe fb17 	bl	8000a3c <HAL_GetTick>
 800240e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d112      	bne.n	800243e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002418:	e00a      	b.n	8002430 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800241a:	f7fe fb0f 	bl	8000a3c <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	f241 3288 	movw	r2, #5000	; 0x1388
 8002428:	4293      	cmp	r3, r2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e077      	b.n	8002520 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002430:	4b3e      	ldr	r3, [pc, #248]	; (800252c <HAL_RCC_ClockConfig+0x20c>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b04      	cmp	r3, #4
 800243a:	d1ee      	bne.n	800241a <HAL_RCC_ClockConfig+0xfa>
 800243c:	e027      	b.n	800248e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d11d      	bne.n	8002482 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002446:	e00a      	b.n	800245e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002448:	f7fe faf8 	bl	8000a3c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f241 3288 	movw	r2, #5000	; 0x1388
 8002456:	4293      	cmp	r3, r2
 8002458:	d901      	bls.n	800245e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e060      	b.n	8002520 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800245e:	4b33      	ldr	r3, [pc, #204]	; (800252c <HAL_RCC_ClockConfig+0x20c>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 030c 	and.w	r3, r3, #12
 8002466:	2b08      	cmp	r3, #8
 8002468:	d1ee      	bne.n	8002448 <HAL_RCC_ClockConfig+0x128>
 800246a:	e010      	b.n	800248e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246c:	f7fe fae6 	bl	8000a3c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	; 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e04e      	b.n	8002520 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002482:	4b2a      	ldr	r3, [pc, #168]	; (800252c <HAL_RCC_ClockConfig+0x20c>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1ee      	bne.n	800246c <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800248e:	4b26      	ldr	r3, [pc, #152]	; (8002528 <HAL_RCC_ClockConfig+0x208>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d210      	bcs.n	80024be <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249c:	4b22      	ldr	r3, [pc, #136]	; (8002528 <HAL_RCC_ClockConfig+0x208>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f023 0207 	bic.w	r2, r3, #7
 80024a4:	4920      	ldr	r1, [pc, #128]	; (8002528 <HAL_RCC_ClockConfig+0x208>)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024ac:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <HAL_RCC_ClockConfig+0x208>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d001      	beq.n	80024be <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e030      	b.n	8002520 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d008      	beq.n	80024dc <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ca:	4b18      	ldr	r3, [pc, #96]	; (800252c <HAL_RCC_ClockConfig+0x20c>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	4915      	ldr	r1, [pc, #84]	; (800252c <HAL_RCC_ClockConfig+0x20c>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d009      	beq.n	80024fc <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024e8:	4b10      	ldr	r3, [pc, #64]	; (800252c <HAL_RCC_ClockConfig+0x20c>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	490d      	ldr	r1, [pc, #52]	; (800252c <HAL_RCC_ClockConfig+0x20c>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024fc:	f000 f81c 	bl	8002538 <HAL_RCC_GetSysClockFreq>
 8002500:	4601      	mov	r1, r0
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <HAL_RCC_ClockConfig+0x20c>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	4a08      	ldr	r2, [pc, #32]	; (8002530 <HAL_RCC_ClockConfig+0x210>)
 800250e:	5cd3      	ldrb	r3, [r2, r3]
 8002510:	fa21 f303 	lsr.w	r3, r1, r3
 8002514:	4a07      	ldr	r2, [pc, #28]	; (8002534 <HAL_RCC_ClockConfig+0x214>)
 8002516:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002518:	2000      	movs	r0, #0
 800251a:	f7fe fa4d 	bl	80009b8 <HAL_InitTick>
  
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40022000 	.word	0x40022000
 800252c:	40021000 	.word	0x40021000
 8002530:	080031a0 	.word	0x080031a0
 8002534:	20000008 	.word	0x20000008

08002538 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002538:	b490      	push	{r4, r7}
 800253a:	b08a      	sub	sp, #40	; 0x28
 800253c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800253e:	4b2a      	ldr	r3, [pc, #168]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002540:	1d3c      	adds	r4, r7, #4
 8002542:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002544:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002548:	4b28      	ldr	r3, [pc, #160]	; (80025ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	2300      	movs	r3, #0
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002562:	4b23      	ldr	r3, [pc, #140]	; (80025f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b04      	cmp	r3, #4
 8002570:	d002      	beq.n	8002578 <HAL_RCC_GetSysClockFreq+0x40>
 8002572:	2b08      	cmp	r3, #8
 8002574:	d003      	beq.n	800257e <HAL_RCC_GetSysClockFreq+0x46>
 8002576:	e02d      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002578:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800257a:	623b      	str	r3, [r7, #32]
      break;
 800257c:	e02d      	b.n	80025da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	0c9b      	lsrs	r3, r3, #18
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800258a:	4413      	add	r3, r2
 800258c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002590:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d013      	beq.n	80025c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800259c:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	0c5b      	lsrs	r3, r3, #17
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025aa:	4413      	add	r3, r2
 80025ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025b0:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	4a0f      	ldr	r2, [pc, #60]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025b6:	fb02 f203 	mul.w	r2, r2, r3
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
 80025c2:	e004      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	4a0c      	ldr	r2, [pc, #48]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025c8:	fb02 f303 	mul.w	r3, r2, r3
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	623b      	str	r3, [r7, #32]
      break;
 80025d2:	e002      	b.n	80025da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025d4:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025d6:	623b      	str	r3, [r7, #32]
      break;
 80025d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025da:	6a3b      	ldr	r3, [r7, #32]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3728      	adds	r7, #40	; 0x28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc90      	pop	{r4, r7}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	0800318c 	.word	0x0800318c
 80025ec:	0800319c 	.word	0x0800319c
 80025f0:	40021000 	.word	0x40021000
 80025f4:	007a1200 	.word	0x007a1200
 80025f8:	003d0900 	.word	0x003d0900

080025fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002600:	4b02      	ldr	r3, [pc, #8]	; (800260c <HAL_RCC_GetHCLKFreq+0x10>)
 8002602:	681b      	ldr	r3, [r3, #0]
}
 8002604:	4618      	mov	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr
 800260c:	20000008 	.word	0x20000008

08002610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002614:	f7ff fff2 	bl	80025fc <HAL_RCC_GetHCLKFreq>
 8002618:	4601      	mov	r1, r0
 800261a:	4b05      	ldr	r3, [pc, #20]	; (8002630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	4a03      	ldr	r2, [pc, #12]	; (8002634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002626:	5cd3      	ldrb	r3, [r2, r3]
 8002628:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800262c:	4618      	mov	r0, r3
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000
 8002634:	080031b0 	.word	0x080031b0

08002638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800263c:	f7ff ffde 	bl	80025fc <HAL_RCC_GetHCLKFreq>
 8002640:	4601      	mov	r1, r0
 8002642:	4b05      	ldr	r3, [pc, #20]	; (8002658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	0adb      	lsrs	r3, r3, #11
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	4a03      	ldr	r2, [pc, #12]	; (800265c <HAL_RCC_GetPCLK2Freq+0x24>)
 800264e:	5cd3      	ldrb	r3, [r2, r3]
 8002650:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002654:	4618      	mov	r0, r3
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40021000 	.word	0x40021000
 800265c:	080031b0 	.word	0x080031b0

08002660 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002668:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <RCC_Delay+0x34>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a0a      	ldr	r2, [pc, #40]	; (8002698 <RCC_Delay+0x38>)
 800266e:	fba2 2303 	umull	r2, r3, r2, r3
 8002672:	0a5b      	lsrs	r3, r3, #9
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	fb02 f303 	mul.w	r3, r2, r3
 800267a:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800267c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1e5a      	subs	r2, r3, #1
 8002682:	60fa      	str	r2, [r7, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1f9      	bne.n	800267c <RCC_Delay+0x1c>
}
 8002688:	bf00      	nop
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000008 	.word	0x20000008
 8002698:	10624dd3 	.word	0x10624dd3

0800269c <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e03f      	b.n	800272e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d106      	bne.n	80026c8 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 fc60 	bl	8002f88 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2224      	movs	r2, #36	; 0x24
 80026cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026de:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f829 	bl	8002738 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695a      	ldr	r2, [r3, #20]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002704:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002714:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2220      	movs	r2, #32
 8002728:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002738:	b5b0      	push	{r4, r5, r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	4313      	orrs	r3, r2
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4313      	orrs	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800277a:	f023 030c 	bic.w	r3, r3, #12
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6812      	ldr	r2, [r2, #0]
 8002782:	68f9      	ldr	r1, [r7, #12]
 8002784:	430b      	orrs	r3, r1
 8002786:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699a      	ldr	r2, [r3, #24]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a6f      	ldr	r2, [pc, #444]	; (8002960 <UART_SetConfig+0x228>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d16b      	bne.n	8002880 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80027a8:	f7ff ff46 	bl	8002638 <HAL_RCC_GetPCLK2Freq>
 80027ac:	4602      	mov	r2, r0
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	009a      	lsls	r2, r3, #2
 80027b6:	441a      	add	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c2:	4a68      	ldr	r2, [pc, #416]	; (8002964 <UART_SetConfig+0x22c>)
 80027c4:	fba2 2303 	umull	r2, r3, r2, r3
 80027c8:	095b      	lsrs	r3, r3, #5
 80027ca:	011c      	lsls	r4, r3, #4
 80027cc:	f7ff ff34 	bl	8002638 <HAL_RCC_GetPCLK2Freq>
 80027d0:	4602      	mov	r2, r0
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	009a      	lsls	r2, r3, #2
 80027da:	441a      	add	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	fbb2 f5f3 	udiv	r5, r2, r3
 80027e6:	f7ff ff27 	bl	8002638 <HAL_RCC_GetPCLK2Freq>
 80027ea:	4602      	mov	r2, r0
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	009a      	lsls	r2, r3, #2
 80027f4:	441a      	add	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002800:	4a58      	ldr	r2, [pc, #352]	; (8002964 <UART_SetConfig+0x22c>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	095b      	lsrs	r3, r3, #5
 8002808:	2264      	movs	r2, #100	; 0x64
 800280a:	fb02 f303 	mul.w	r3, r2, r3
 800280e:	1aeb      	subs	r3, r5, r3
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	3332      	adds	r3, #50	; 0x32
 8002814:	4a53      	ldr	r2, [pc, #332]	; (8002964 <UART_SetConfig+0x22c>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002820:	441c      	add	r4, r3
 8002822:	f7ff ff09 	bl	8002638 <HAL_RCC_GetPCLK2Freq>
 8002826:	4602      	mov	r2, r0
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	009a      	lsls	r2, r3, #2
 8002830:	441a      	add	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	fbb2 f5f3 	udiv	r5, r2, r3
 800283c:	f7ff fefc 	bl	8002638 <HAL_RCC_GetPCLK2Freq>
 8002840:	4602      	mov	r2, r0
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	009a      	lsls	r2, r3, #2
 800284a:	441a      	add	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	fbb2 f3f3 	udiv	r3, r2, r3
 8002856:	4a43      	ldr	r2, [pc, #268]	; (8002964 <UART_SetConfig+0x22c>)
 8002858:	fba2 2303 	umull	r2, r3, r2, r3
 800285c:	095b      	lsrs	r3, r3, #5
 800285e:	2264      	movs	r2, #100	; 0x64
 8002860:	fb02 f303 	mul.w	r3, r2, r3
 8002864:	1aeb      	subs	r3, r5, r3
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	3332      	adds	r3, #50	; 0x32
 800286a:	4a3e      	ldr	r2, [pc, #248]	; (8002964 <UART_SetConfig+0x22c>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	095b      	lsrs	r3, r3, #5
 8002872:	f003 020f 	and.w	r2, r3, #15
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4422      	add	r2, r4
 800287c:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800287e:	e06a      	b.n	8002956 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002880:	f7ff fec6 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 8002884:	4602      	mov	r2, r0
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	009a      	lsls	r2, r3, #2
 800288e:	441a      	add	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	fbb2 f3f3 	udiv	r3, r2, r3
 800289a:	4a32      	ldr	r2, [pc, #200]	; (8002964 <UART_SetConfig+0x22c>)
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	095b      	lsrs	r3, r3, #5
 80028a2:	011c      	lsls	r4, r3, #4
 80028a4:	f7ff feb4 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 80028a8:	4602      	mov	r2, r0
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	009a      	lsls	r2, r3, #2
 80028b2:	441a      	add	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	fbb2 f5f3 	udiv	r5, r2, r3
 80028be:	f7ff fea7 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 80028c2:	4602      	mov	r2, r0
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	009a      	lsls	r2, r3, #2
 80028cc:	441a      	add	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d8:	4a22      	ldr	r2, [pc, #136]	; (8002964 <UART_SetConfig+0x22c>)
 80028da:	fba2 2303 	umull	r2, r3, r2, r3
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	2264      	movs	r2, #100	; 0x64
 80028e2:	fb02 f303 	mul.w	r3, r2, r3
 80028e6:	1aeb      	subs	r3, r5, r3
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	3332      	adds	r3, #50	; 0x32
 80028ec:	4a1d      	ldr	r2, [pc, #116]	; (8002964 <UART_SetConfig+0x22c>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028f8:	441c      	add	r4, r3
 80028fa:	f7ff fe89 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 80028fe:	4602      	mov	r2, r0
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	009a      	lsls	r2, r3, #2
 8002908:	441a      	add	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	fbb2 f5f3 	udiv	r5, r2, r3
 8002914:	f7ff fe7c 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 8002918:	4602      	mov	r2, r0
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	009a      	lsls	r2, r3, #2
 8002922:	441a      	add	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	fbb2 f3f3 	udiv	r3, r2, r3
 800292e:	4a0d      	ldr	r2, [pc, #52]	; (8002964 <UART_SetConfig+0x22c>)
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	095b      	lsrs	r3, r3, #5
 8002936:	2264      	movs	r2, #100	; 0x64
 8002938:	fb02 f303 	mul.w	r3, r2, r3
 800293c:	1aeb      	subs	r3, r5, r3
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	3332      	adds	r3, #50	; 0x32
 8002942:	4a08      	ldr	r2, [pc, #32]	; (8002964 <UART_SetConfig+0x22c>)
 8002944:	fba2 2303 	umull	r2, r3, r2, r3
 8002948:	095b      	lsrs	r3, r3, #5
 800294a:	f003 020f 	and.w	r2, r3, #15
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4422      	add	r2, r4
 8002954:	609a      	str	r2, [r3, #8]
}
 8002956:	bf00      	nop
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bdb0      	pop	{r4, r5, r7, pc}
 800295e:	bf00      	nop
 8002960:	40013800 	.word	0x40013800
 8002964:	51eb851f 	.word	0x51eb851f

08002968 <HTU21D_init>:

static uint8_t HTU21D_softReset(void);
static uint8_t HTU21D_configUserRegister(HTU21D_measRes_e measRes);
static void calculateTempHum(uint16_t *rawValues, void *htu21d);

uint8_t HTU21D_init(void){
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0

	uint8_t error = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	71fb      	strb	r3, [r7, #7]

	HTU21D_softReset();
 8002972:	f000 f809 	bl	8002988 <HTU21D_softReset>
	HTU21D_configUserRegister(RH12TEMP14);
 8002976:	2000      	movs	r0, #0
 8002978:	f000 f82a 	bl	80029d0 <HTU21D_configUserRegister>

	return error;
 800297c:	79fb      	ldrb	r3, [r7, #7]

}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <HTU21D_softReset>:

static uint8_t HTU21D_softReset(void){
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af02      	add	r7, sp, #8

	uint8_t error = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	71fb      	strb	r3, [r7, #7]
	uint8_t pData = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	71bb      	strb	r3, [r7, #6]

	HAL_Delay(15);
 8002996:	200f      	movs	r0, #15
 8002998:	f7fe f85a 	bl	8000a50 <HAL_Delay>

	/* NOTE: Send soft reset command */
	pData = HTU21D_SOFT_RESET;
 800299c:	23fe      	movs	r3, #254	; 0xfe
 800299e:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Master_Transmit(&hi2c1, HTU21D_ADDR, &pData,
 80029a0:	1dba      	adds	r2, r7, #6
 80029a2:	f04f 33ff 	mov.w	r3, #4294967295
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	2301      	movs	r3, #1
 80029aa:	2140      	movs	r1, #64	; 0x40
 80029ac:	4807      	ldr	r0, [pc, #28]	; (80029cc <HTU21D_softReset+0x44>)
 80029ae:	f7fe fc17 	bl	80011e0 <HAL_I2C_Master_Transmit>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <HTU21D_softReset+0x34>
					1, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 80029b8:	f000 fa70 	bl	8002e9c <Error_Handler>
	}

	HAL_Delay(15);
 80029bc:	200f      	movs	r0, #15
 80029be:	f7fe f847 	bl	8000a50 <HAL_Delay>

	return error;
 80029c2:	79fb      	ldrb	r3, [r7, #7]

}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20000034 	.word	0x20000034

080029d0 <HTU21D_configUserRegister>:

static uint8_t HTU21D_configUserRegister(HTU21D_measRes_e measRes){
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	4603      	mov	r3, r0
 80029d8:	71fb      	strb	r3, [r7, #7]

	uint8_t status = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	73fb      	strb	r3, [r7, #15]
	uint8_t pData[2];

	/* NOTE: Send Read User Register Command */
	memset(pData, 0, sizeof(pData) / sizeof(pData[0]));
 80029de:	f107 030c 	add.w	r3, r7, #12
 80029e2:	2202      	movs	r2, #2
 80029e4:	2100      	movs	r1, #0
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fbbc 	bl	8003164 <memset>
	pData[0] = HTU21D_RD_USRREG;
 80029ec:	23e7      	movs	r3, #231	; 0xe7
 80029ee:	733b      	strb	r3, [r7, #12]
	if(HAL_I2C_Master_Transmit(&hi2c1, HTU21D_ADDR, pData,
 80029f0:	f107 020c 	add.w	r2, r7, #12
 80029f4:	f04f 33ff 	mov.w	r3, #4294967295
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	2301      	movs	r3, #1
 80029fc:	2140      	movs	r1, #64	; 0x40
 80029fe:	481d      	ldr	r0, [pc, #116]	; (8002a74 <HTU21D_configUserRegister+0xa4>)
 8002a00:	f7fe fbee 	bl	80011e0 <HAL_I2C_Master_Transmit>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HTU21D_configUserRegister+0x3e>
					1, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 8002a0a:	f000 fa47 	bl	8002e9c <Error_Handler>
	}

	/* NOTE: Read User Register */
	memset(pData, 0, sizeof(pData) / sizeof(pData[0]));
 8002a0e:	f107 030c 	add.w	r3, r7, #12
 8002a12:	2202      	movs	r2, #2
 8002a14:	2100      	movs	r1, #0
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fba4 	bl	8003164 <memset>
	if(HAL_I2C_Master_Receive(&hi2c1, HTU21D_ADDR, &pData[1],
 8002a1c:	f107 030c 	add.w	r3, r7, #12
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	f04f 33ff 	mov.w	r3, #4294967295
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	2301      	movs	r3, #1
 8002a2a:	2140      	movs	r1, #64	; 0x40
 8002a2c:	4811      	ldr	r0, [pc, #68]	; (8002a74 <HTU21D_configUserRegister+0xa4>)
 8002a2e:	f7fe fce5 	bl	80013fc <HAL_I2C_Master_Receive>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <HTU21D_configUserRegister+0x6c>
					1, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 8002a38:	f000 fa30 	bl	8002e9c <Error_Handler>
	}

	/* NOTE: Manipulate User Register Value */
	pData[1] |= measRes;
 8002a3c:	7b7a      	ldrb	r2, [r7, #13]
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	737b      	strb	r3, [r7, #13]

	/* NOTE: Send Write User Register Command and Write Manipulated Value */
	pData[0] = HTU21D_WR_USRREG;
 8002a46:	23e6      	movs	r3, #230	; 0xe6
 8002a48:	733b      	strb	r3, [r7, #12]
	if(HAL_I2C_Master_Transmit(&hi2c1, HTU21D_ADDR, pData,
 8002a4a:	f107 020c 	add.w	r2, r7, #12
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2302      	movs	r3, #2
 8002a56:	2140      	movs	r1, #64	; 0x40
 8002a58:	4806      	ldr	r0, [pc, #24]	; (8002a74 <HTU21D_configUserRegister+0xa4>)
 8002a5a:	f7fe fbc1 	bl	80011e0 <HAL_I2C_Master_Transmit>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HTU21D_configUserRegister+0x98>
					2, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 8002a64:	f000 fa1a 	bl	8002e9c <Error_Handler>
	}

	/* NOTE: Read again user register value for verify */

	return status;
 8002a68:	7bfb      	ldrb	r3, [r7, #15]

}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000034 	.word	0x20000034

08002a78 <HTU21D_handler>:

void HTU21D_handler(void *htu21d){
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	6078      	str	r0, [r7, #4]
	uint8_t pData[2];
	uint8_t temp[3];
	uint8_t hum[3];
	uint16_t rawValues[2];

	memset(pData, 0, sizeof(pData) / sizeof(pData[0]));
 8002a80:	f107 0314 	add.w	r3, r7, #20
 8002a84:	2202      	movs	r2, #2
 8002a86:	2100      	movs	r1, #0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f000 fb6b 	bl	8003164 <memset>
	memset(temp, 0, sizeof(temp) / sizeof(temp[0]));
 8002a8e:	f107 0310 	add.w	r3, r7, #16
 8002a92:	2203      	movs	r2, #3
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fb64 	bl	8003164 <memset>
	memset(hum, 0, sizeof(hum) / sizeof(hum[0]));
 8002a9c:	f107 030c 	add.w	r3, r7, #12
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 fb5d 	bl	8003164 <memset>
	memset(rawValues, 0, 4);
 8002aaa:	f107 0308 	add.w	r3, r7, #8
 8002aae:	2204      	movs	r2, #4
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fb56 	bl	8003164 <memset>

	for(;;){

		/* NOTE: Send Trigger temperature measurement in hold master Command */
		memset(pData, 0, sizeof(pData) / sizeof(pData[0]));
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	2202      	movs	r2, #2
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 fb4f 	bl	8003164 <memset>
		pData[0] = HTU21D_TEMP_HOLD;
 8002ac6:	23e3      	movs	r3, #227	; 0xe3
 8002ac8:	753b      	strb	r3, [r7, #20]
		if(HAL_I2C_Master_Transmit(&hi2c1, HTU21D_ADDR, pData,
 8002aca:	f107 0214 	add.w	r2, r7, #20
 8002ace:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	2140      	movs	r1, #64	; 0x40
 8002ad8:	482e      	ldr	r0, [pc, #184]	; (8002b94 <HTU21D_handler+0x11c>)
 8002ada:	f7fe fb81 	bl	80011e0 <HAL_I2C_Master_Transmit>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HTU21D_handler+0x70>
						1, HAL_MAX_DELAY) != HAL_OK ){

			Error_Handler();
 8002ae4:	f000 f9da 	bl	8002e9c <Error_Handler>
		}

		/* NOTE: Read Temperature(MSB+LSB+CRC) */
		if(HAL_I2C_Master_Receive(&hi2c1, HTU21D_ADDR, temp,
 8002ae8:	f107 0210 	add.w	r2, r7, #16
 8002aec:	f04f 33ff 	mov.w	r3, #4294967295
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	2303      	movs	r3, #3
 8002af4:	2140      	movs	r1, #64	; 0x40
 8002af6:	4827      	ldr	r0, [pc, #156]	; (8002b94 <HTU21D_handler+0x11c>)
 8002af8:	f7fe fc80 	bl	80013fc <HAL_I2C_Master_Receive>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HTU21D_handler+0x8e>
						3, HAL_MAX_DELAY) != HAL_OK ){

			Error_Handler();
 8002b02:	f000 f9cb 	bl	8002e9c <Error_Handler>
		}

		rawValues[0] = (temp[0] << 8) | (temp[1] & ~0x03);
 8002b06:	7c3b      	ldrb	r3, [r7, #16]
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	b21a      	sxth	r2, r3
 8002b0c:	7c7b      	ldrb	r3, [r7, #17]
 8002b0e:	b21b      	sxth	r3, r3
 8002b10:	f023 0303 	bic.w	r3, r3, #3
 8002b14:	b21b      	sxth	r3, r3
 8002b16:	4313      	orrs	r3, r2
 8002b18:	b21b      	sxth	r3, r3
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	813b      	strh	r3, [r7, #8]

		/* NOTE: Send Trigger humidity measurement in hold master Command */
		memset(pData, 0, sizeof(pData) / sizeof(pData[0]));
 8002b1e:	f107 0314 	add.w	r3, r7, #20
 8002b22:	2202      	movs	r2, #2
 8002b24:	2100      	movs	r1, #0
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 fb1c 	bl	8003164 <memset>
		pData[0] = HTU21D_HUM_HOLD;
 8002b2c:	23e5      	movs	r3, #229	; 0xe5
 8002b2e:	753b      	strb	r3, [r7, #20]
		if(HAL_I2C_Master_Transmit(&hi2c1, HTU21D_ADDR, pData,
 8002b30:	f107 0214 	add.w	r2, r7, #20
 8002b34:	f04f 33ff 	mov.w	r3, #4294967295
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	2140      	movs	r1, #64	; 0x40
 8002b3e:	4815      	ldr	r0, [pc, #84]	; (8002b94 <HTU21D_handler+0x11c>)
 8002b40:	f7fe fb4e 	bl	80011e0 <HAL_I2C_Master_Transmit>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HTU21D_handler+0xd6>
						1, HAL_MAX_DELAY) != HAL_OK ){

			Error_Handler();
 8002b4a:	f000 f9a7 	bl	8002e9c <Error_Handler>
		}

		/* NOTE: Read Humidity(MSB+LSB+CRC) */
		if(HAL_I2C_Master_Receive(&hi2c1, HTU21D_ADDR, hum,
 8002b4e:	f107 020c 	add.w	r2, r7, #12
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	2303      	movs	r3, #3
 8002b5a:	2140      	movs	r1, #64	; 0x40
 8002b5c:	480d      	ldr	r0, [pc, #52]	; (8002b94 <HTU21D_handler+0x11c>)
 8002b5e:	f7fe fc4d 	bl	80013fc <HAL_I2C_Master_Receive>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <HTU21D_handler+0xf4>
						3, HAL_MAX_DELAY) != HAL_OK ){

			Error_Handler();
 8002b68:	f000 f998 	bl	8002e9c <Error_Handler>
		}

		rawValues[1] = (hum[0] << 8) | (hum[1] & ~0x03);
 8002b6c:	7b3b      	ldrb	r3, [r7, #12]
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	b21a      	sxth	r2, r3
 8002b72:	7b7b      	ldrb	r3, [r7, #13]
 8002b74:	b21b      	sxth	r3, r3
 8002b76:	f023 0303 	bic.w	r3, r3, #3
 8002b7a:	b21b      	sxth	r3, r3
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	b21b      	sxth	r3, r3
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	817b      	strh	r3, [r7, #10]

		calculateTempHum(rawValues, htu21d);
 8002b84:	f107 0308 	add.w	r3, r7, #8
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 f804 	bl	8002b98 <calculateTempHum>
		memset(pData, 0, sizeof(pData) / sizeof(pData[0]));
 8002b90:	e792      	b.n	8002ab8 <HTU21D_handler+0x40>
 8002b92:	bf00      	nop
 8002b94:	20000034 	.word	0x20000034

08002b98 <calculateTempHum>:

	}

}

static void calculateTempHum(uint16_t *rawValues, void *htu21d){
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]

	HTU21D_s *HTU21D_temporary = (HTU21D_s *) htu21d;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	60fb      	str	r3, [r7, #12]

	HTU21D_temporary->temperature = ( -46.85 + (175.72 * (rawValues[0] / pow(2, 16))) );
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fd fc22 	bl	80003f4 <__aeabi_i2d>
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	4b28      	ldr	r3, [pc, #160]	; (8002c58 <calculateTempHum+0xc0>)
 8002bb6:	f7fd fdb1 	bl	800071c <__aeabi_ddiv>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	460c      	mov	r4, r1
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	4621      	mov	r1, r4
 8002bc2:	a321      	add	r3, pc, #132	; (adr r3, 8002c48 <calculateTempHum+0xb0>)
 8002bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc8:	f7fd fc7e 	bl	80004c8 <__aeabi_dmul>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	460c      	mov	r4, r1
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	a31e      	add	r3, pc, #120	; (adr r3, 8002c50 <calculateTempHum+0xb8>)
 8002bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bda:	f7fd fabd 	bl	8000158 <__aeabi_dsub>
 8002bde:	4603      	mov	r3, r0
 8002be0:	460c      	mov	r4, r1
 8002be2:	4618      	mov	r0, r3
 8002be4:	4621      	mov	r1, r4
 8002be6:	f7fd fe81 	bl	80008ec <__aeabi_d2f>
 8002bea:	4602      	mov	r2, r0
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	601a      	str	r2, [r3, #0]
	HTU21D_temporary->humidity = ( -6 + (125 * (rawValues[1] / pow(2, 16))) );
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3302      	adds	r3, #2
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fd fbfc 	bl	80003f4 <__aeabi_i2d>
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <calculateTempHum+0xc0>)
 8002c02:	f7fd fd8b 	bl	800071c <__aeabi_ddiv>
 8002c06:	4603      	mov	r3, r0
 8002c08:	460c      	mov	r4, r1
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	4621      	mov	r1, r4
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <calculateTempHum+0xc4>)
 8002c14:	f7fd fc58 	bl	80004c8 <__aeabi_dmul>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	460c      	mov	r4, r1
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	4621      	mov	r1, r4
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <calculateTempHum+0xc8>)
 8002c26:	f7fd fa97 	bl	8000158 <__aeabi_dsub>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	460c      	mov	r4, r1
 8002c2e:	4618      	mov	r0, r3
 8002c30:	4621      	mov	r1, r4
 8002c32:	f7fd fe5b 	bl	80008ec <__aeabi_d2f>
 8002c36:	4602      	mov	r2, r0
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	605a      	str	r2, [r3, #4]

}
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd90      	pop	{r4, r7, pc}
 8002c44:	f3af 8000 	nop.w
 8002c48:	3d70a3d7 	.word	0x3d70a3d7
 8002c4c:	4065f70a 	.word	0x4065f70a
 8002c50:	cccccccd 	.word	0xcccccccd
 8002c54:	40476ccc 	.word	0x40476ccc
 8002c58:	40f00000 	.word	0x40f00000
 8002c5c:	405f4000 	.word	0x405f4000
 8002c60:	40180000 	.word	0x40180000

08002c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c68:	f7fd fe90 	bl	800098c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8002c6c:	f000 f80e 	bl	8002c8c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c70:	f000 f8a6 	bl	8002dc0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002c74:	f000 f87a 	bl	8002d6c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002c78:	f000 f84a 	bl	8002d10 <MX_I2C1_Init>

  HTU21D_init();
 8002c7c:	f7ff fe74 	bl	8002968 <HTU21D_init>

  HTU21D_handler(&htu21d);
 8002c80:	4801      	ldr	r0, [pc, #4]	; (8002c88 <main+0x24>)
 8002c82:	f7ff fef9 	bl	8002a78 <HTU21D_handler>

  /* Infinite loop */
  while (1)
 8002c86:	e7fe      	b.n	8002c86 <main+0x22>
 8002c88:	20000028 	.word	0x20000028

08002c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b090      	sub	sp, #64	; 0x40
 8002c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c92:	f107 0318 	add.w	r3, r7, #24
 8002c96:	2228      	movs	r2, #40	; 0x28
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fa62 	bl	8003164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ca0:	1d3b      	adds	r3, r7, #4
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	609a      	str	r2, [r3, #8]
 8002caa:	60da      	str	r2, [r3, #12]
 8002cac:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cb6:	2310      	movs	r3, #16
 8002cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002cc2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cc8:	f107 0318 	add.w	r3, r7, #24
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff f8c3 	bl	8001e58 <HAL_RCC_OscConfig>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002cd8:	f000 f8e0 	bl	8002e9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cdc:	230f      	movs	r3, #15
 8002cde:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002cf2:	1d3b      	adds	r3, r7, #4
 8002cf4:	2102      	movs	r1, #2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fb12 	bl	8002320 <HAL_RCC_ClockConfig>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002d02:	f000 f8cb 	bl	8002e9c <Error_Handler>
  }
}
 8002d06:	bf00      	nop
 8002d08:	3740      	adds	r7, #64	; 0x40
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <MX_I2C1_Init+0x50>)
 8002d16:	4a13      	ldr	r2, [pc, #76]	; (8002d64 <MX_I2C1_Init+0x54>)
 8002d18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002d1a:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <MX_I2C1_Init+0x50>)
 8002d1c:	4a12      	ldr	r2, [pc, #72]	; (8002d68 <MX_I2C1_Init+0x58>)
 8002d1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d20:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <MX_I2C1_Init+0x50>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d26:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <MX_I2C1_Init+0x50>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <MX_I2C1_Init+0x50>)
 8002d2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d34:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <MX_I2C1_Init+0x50>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d3a:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <MX_I2C1_Init+0x50>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d40:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <MX_I2C1_Init+0x50>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d46:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <MX_I2C1_Init+0x50>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d4c:	4804      	ldr	r0, [pc, #16]	; (8002d60 <MX_I2C1_Init+0x50>)
 8002d4e:	f7fe f943 	bl	8000fd8 <HAL_I2C_Init>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d58:	f000 f8a0 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d5c:	bf00      	nop
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20000034 	.word	0x20000034
 8002d64:	40005400 	.word	0x40005400
 8002d68:	00061a80 	.word	0x00061a80

08002d6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d70:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <MX_USART2_UART_Init+0x4c>)
 8002d72:	4a12      	ldr	r2, [pc, #72]	; (8002dbc <MX_USART2_UART_Init+0x50>)
 8002d74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d76:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <MX_USART2_UART_Init+0x4c>)
 8002d78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d7e:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <MX_USART2_UART_Init+0x4c>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d84:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <MX_USART2_UART_Init+0x4c>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d8a:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <MX_USART2_UART_Init+0x4c>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d90:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <MX_USART2_UART_Init+0x4c>)
 8002d92:	220c      	movs	r2, #12
 8002d94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d96:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <MX_USART2_UART_Init+0x4c>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d9c:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <MX_USART2_UART_Init+0x4c>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002da2:	4805      	ldr	r0, [pc, #20]	; (8002db8 <MX_USART2_UART_Init+0x4c>)
 8002da4:	f7ff fc7a 	bl	800269c <HAL_UART_Init>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002dae:	f000 f875 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000088 	.word	0x20000088
 8002dbc:	40004400 	.word	0x40004400

08002dc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc6:	f107 0310 	add.w	r3, r7, #16
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	605a      	str	r2, [r3, #4]
 8002dd0:	609a      	str	r2, [r3, #8]
 8002dd2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dd4:	4b2d      	ldr	r3, [pc, #180]	; (8002e8c <MX_GPIO_Init+0xcc>)
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	4a2c      	ldr	r2, [pc, #176]	; (8002e8c <MX_GPIO_Init+0xcc>)
 8002dda:	f043 0310 	orr.w	r3, r3, #16
 8002dde:	6193      	str	r3, [r2, #24]
 8002de0:	4b2a      	ldr	r3, [pc, #168]	; (8002e8c <MX_GPIO_Init+0xcc>)
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dec:	4b27      	ldr	r3, [pc, #156]	; (8002e8c <MX_GPIO_Init+0xcc>)
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	4a26      	ldr	r2, [pc, #152]	; (8002e8c <MX_GPIO_Init+0xcc>)
 8002df2:	f043 0320 	orr.w	r3, r3, #32
 8002df6:	6193      	str	r3, [r2, #24]
 8002df8:	4b24      	ldr	r3, [pc, #144]	; (8002e8c <MX_GPIO_Init+0xcc>)
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e04:	4b21      	ldr	r3, [pc, #132]	; (8002e8c <MX_GPIO_Init+0xcc>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	4a20      	ldr	r2, [pc, #128]	; (8002e8c <MX_GPIO_Init+0xcc>)
 8002e0a:	f043 0304 	orr.w	r3, r3, #4
 8002e0e:	6193      	str	r3, [r2, #24]
 8002e10:	4b1e      	ldr	r3, [pc, #120]	; (8002e8c <MX_GPIO_Init+0xcc>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	607b      	str	r3, [r7, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <MX_GPIO_Init+0xcc>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	4a1a      	ldr	r2, [pc, #104]	; (8002e8c <MX_GPIO_Init+0xcc>)
 8002e22:	f043 0308 	orr.w	r3, r3, #8
 8002e26:	6193      	str	r3, [r2, #24]
 8002e28:	4b18      	ldr	r3, [pc, #96]	; (8002e8c <MX_GPIO_Init+0xcc>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f003 0308 	and.w	r3, r3, #8
 8002e30:	603b      	str	r3, [r7, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002e34:	2200      	movs	r2, #0
 8002e36:	2120      	movs	r1, #32
 8002e38:	4815      	ldr	r0, [pc, #84]	; (8002e90 <MX_GPIO_Init+0xd0>)
 8002e3a:	f7fe f893 	bl	8000f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e44:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <MX_GPIO_Init+0xd4>)
 8002e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e4c:	f107 0310 	add.w	r3, r7, #16
 8002e50:	4619      	mov	r1, r3
 8002e52:	4811      	ldr	r0, [pc, #68]	; (8002e98 <MX_GPIO_Init+0xd8>)
 8002e54:	f7fd ff28 	bl	8000ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002e58:	2320      	movs	r3, #32
 8002e5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e64:	2302      	movs	r3, #2
 8002e66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002e68:	f107 0310 	add.w	r3, r7, #16
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4808      	ldr	r0, [pc, #32]	; (8002e90 <MX_GPIO_Init+0xd0>)
 8002e70:	f7fd ff1a 	bl	8000ca8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002e74:	2200      	movs	r2, #0
 8002e76:	2100      	movs	r1, #0
 8002e78:	2028      	movs	r0, #40	; 0x28
 8002e7a:	f7fd fede 	bl	8000c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e7e:	2028      	movs	r0, #40	; 0x28
 8002e80:	f7fd fef7 	bl	8000c72 <HAL_NVIC_EnableIRQ>

}
 8002e84:	bf00      	nop
 8002e86:	3720      	adds	r7, #32
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40010800 	.word	0x40010800
 8002e94:	10110000 	.word	0x10110000
 8002e98:	40011000 	.word	0x40011000

08002e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002eae:	4b15      	ldr	r3, [pc, #84]	; (8002f04 <HAL_MspInit+0x5c>)
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	4a14      	ldr	r2, [pc, #80]	; (8002f04 <HAL_MspInit+0x5c>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6193      	str	r3, [r2, #24]
 8002eba:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <HAL_MspInit+0x5c>)
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	60bb      	str	r3, [r7, #8]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ec6:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <HAL_MspInit+0x5c>)
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	4a0e      	ldr	r2, [pc, #56]	; (8002f04 <HAL_MspInit+0x5c>)
 8002ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	61d3      	str	r3, [r2, #28]
 8002ed2:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <HAL_MspInit+0x5c>)
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eda:	607b      	str	r3, [r7, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002ede:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <HAL_MspInit+0x60>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	4a04      	ldr	r2, [pc, #16]	; (8002f08 <HAL_MspInit+0x60>)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002efa:	bf00      	nop
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40010000 	.word	0x40010000

08002f0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f14:	f107 0310 	add.w	r3, r7, #16
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a15      	ldr	r2, [pc, #84]	; (8002f7c <HAL_I2C_MspInit+0x70>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d123      	bne.n	8002f74 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f2c:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <HAL_I2C_MspInit+0x74>)
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	4a13      	ldr	r2, [pc, #76]	; (8002f80 <HAL_I2C_MspInit+0x74>)
 8002f32:	f043 0308 	orr.w	r3, r3, #8
 8002f36:	6193      	str	r3, [r2, #24]
 8002f38:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <HAL_I2C_MspInit+0x74>)
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f44:	23c0      	movs	r3, #192	; 0xc0
 8002f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f48:	2312      	movs	r3, #18
 8002f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f50:	f107 0310 	add.w	r3, r7, #16
 8002f54:	4619      	mov	r1, r3
 8002f56:	480b      	ldr	r0, [pc, #44]	; (8002f84 <HAL_I2C_MspInit+0x78>)
 8002f58:	f7fd fea6 	bl	8000ca8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f5c:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <HAL_I2C_MspInit+0x74>)
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	4a07      	ldr	r2, [pc, #28]	; (8002f80 <HAL_I2C_MspInit+0x74>)
 8002f62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f66:	61d3      	str	r3, [r2, #28]
 8002f68:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <HAL_I2C_MspInit+0x74>)
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f74:	bf00      	nop
 8002f76:	3720      	adds	r7, #32
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40005400 	.word	0x40005400
 8002f80:	40021000 	.word	0x40021000
 8002f84:	40010c00 	.word	0x40010c00

08002f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f90:	f107 0310 	add.w	r3, r7, #16
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a15      	ldr	r2, [pc, #84]	; (8002ff8 <HAL_UART_MspInit+0x70>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d123      	bne.n	8002ff0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fa8:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <HAL_UART_MspInit+0x74>)
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	4a13      	ldr	r2, [pc, #76]	; (8002ffc <HAL_UART_MspInit+0x74>)
 8002fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb2:	61d3      	str	r3, [r2, #28]
 8002fb4:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <HAL_UART_MspInit+0x74>)
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc0:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <HAL_UART_MspInit+0x74>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	4a0d      	ldr	r2, [pc, #52]	; (8002ffc <HAL_UART_MspInit+0x74>)
 8002fc6:	f043 0304 	orr.w	r3, r3, #4
 8002fca:	6193      	str	r3, [r2, #24]
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <HAL_UART_MspInit+0x74>)
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002fd8:	230c      	movs	r3, #12
 8002fda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe4:	f107 0310 	add.w	r3, r7, #16
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4805      	ldr	r0, [pc, #20]	; (8003000 <HAL_UART_MspInit+0x78>)
 8002fec:	f7fd fe5c 	bl	8000ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ff0:	bf00      	nop
 8002ff2:	3720      	adds	r7, #32
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40004400 	.word	0x40004400
 8002ffc:	40021000 	.word	0x40021000
 8003000:	40010800 	.word	0x40010800

08003004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003014:	e7fe      	b.n	8003014 <HardFault_Handler+0x4>

08003016 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003016:	b480      	push	{r7}
 8003018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800301a:	e7fe      	b.n	800301a <MemManage_Handler+0x4>

0800301c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003020:	e7fe      	b.n	8003020 <BusFault_Handler+0x4>

08003022 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003022:	b480      	push	{r7}
 8003024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003026:	e7fe      	b.n	8003026 <UsageFault_Handler+0x4>

08003028 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr

08003040 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003050:	f7fd fce2 	bl	8000a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003054:	bf00      	nop
 8003056:	bd80      	pop	{r7, pc}

08003058 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800305c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003060:	f7fd ff98 	bl	8000f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003064:	bf00      	nop
 8003066:	bd80      	pop	{r7, pc}

08003068 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800306c:	4b15      	ldr	r3, [pc, #84]	; (80030c4 <SystemInit+0x5c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a14      	ldr	r2, [pc, #80]	; (80030c4 <SystemInit+0x5c>)
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003078:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <SystemInit+0x5c>)
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	4911      	ldr	r1, [pc, #68]	; (80030c4 <SystemInit+0x5c>)
 800307e:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <SystemInit+0x60>)
 8003080:	4013      	ands	r3, r2
 8003082:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003084:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <SystemInit+0x5c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a0e      	ldr	r2, [pc, #56]	; (80030c4 <SystemInit+0x5c>)
 800308a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800308e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003092:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <SystemInit+0x5c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <SystemInit+0x5c>)
 800309a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800309e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80030a0:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <SystemInit+0x5c>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	4a07      	ldr	r2, [pc, #28]	; (80030c4 <SystemInit+0x5c>)
 80030a6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80030aa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80030ac:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <SystemInit+0x5c>)
 80030ae:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80030b2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <SystemInit+0x64>)
 80030b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030ba:	609a      	str	r2, [r3, #8]
#endif 
}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	40021000 	.word	0x40021000
 80030c8:	f8ff0000 	.word	0xf8ff0000
 80030cc:	e000ed00 	.word	0xe000ed00

080030d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80030d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80030d2:	e003      	b.n	80030dc <LoopCopyDataInit>

080030d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80030d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80030d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80030da:	3104      	adds	r1, #4

080030dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80030dc:	480a      	ldr	r0, [pc, #40]	; (8003108 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80030de:	4b0b      	ldr	r3, [pc, #44]	; (800310c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80030e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80030e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80030e4:	d3f6      	bcc.n	80030d4 <CopyDataInit>
  ldr r2, =_sbss
 80030e6:	4a0a      	ldr	r2, [pc, #40]	; (8003110 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80030e8:	e002      	b.n	80030f0 <LoopFillZerobss>

080030ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80030ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80030ec:	f842 3b04 	str.w	r3, [r2], #4

080030f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80030f0:	4b08      	ldr	r3, [pc, #32]	; (8003114 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80030f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80030f4:	d3f9      	bcc.n	80030ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80030f6:	f7ff ffb7 	bl	8003068 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030fa:	f000 f80f 	bl	800311c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030fe:	f7ff fdb1 	bl	8002c64 <main>
  bx lr
 8003102:	4770      	bx	lr
  ldr r3, =_sidata
 8003104:	080031c0 	.word	0x080031c0
  ldr r0, =_sdata
 8003108:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800310c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8003110:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8003114:	200000c8 	.word	0x200000c8

08003118 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003118:	e7fe      	b.n	8003118 <ADC1_2_IRQHandler>
	...

0800311c <__libc_init_array>:
 800311c:	b570      	push	{r4, r5, r6, lr}
 800311e:	2500      	movs	r5, #0
 8003120:	4e0c      	ldr	r6, [pc, #48]	; (8003154 <__libc_init_array+0x38>)
 8003122:	4c0d      	ldr	r4, [pc, #52]	; (8003158 <__libc_init_array+0x3c>)
 8003124:	1ba4      	subs	r4, r4, r6
 8003126:	10a4      	asrs	r4, r4, #2
 8003128:	42a5      	cmp	r5, r4
 800312a:	d109      	bne.n	8003140 <__libc_init_array+0x24>
 800312c:	f000 f822 	bl	8003174 <_init>
 8003130:	2500      	movs	r5, #0
 8003132:	4e0a      	ldr	r6, [pc, #40]	; (800315c <__libc_init_array+0x40>)
 8003134:	4c0a      	ldr	r4, [pc, #40]	; (8003160 <__libc_init_array+0x44>)
 8003136:	1ba4      	subs	r4, r4, r6
 8003138:	10a4      	asrs	r4, r4, #2
 800313a:	42a5      	cmp	r5, r4
 800313c:	d105      	bne.n	800314a <__libc_init_array+0x2e>
 800313e:	bd70      	pop	{r4, r5, r6, pc}
 8003140:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003144:	4798      	blx	r3
 8003146:	3501      	adds	r5, #1
 8003148:	e7ee      	b.n	8003128 <__libc_init_array+0xc>
 800314a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800314e:	4798      	blx	r3
 8003150:	3501      	adds	r5, #1
 8003152:	e7f2      	b.n	800313a <__libc_init_array+0x1e>
 8003154:	080031b8 	.word	0x080031b8
 8003158:	080031b8 	.word	0x080031b8
 800315c:	080031b8 	.word	0x080031b8
 8003160:	080031bc 	.word	0x080031bc

08003164 <memset>:
 8003164:	4603      	mov	r3, r0
 8003166:	4402      	add	r2, r0
 8003168:	4293      	cmp	r3, r2
 800316a:	d100      	bne.n	800316e <memset+0xa>
 800316c:	4770      	bx	lr
 800316e:	f803 1b01 	strb.w	r1, [r3], #1
 8003172:	e7f9      	b.n	8003168 <memset+0x4>

08003174 <_init>:
 8003174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003176:	bf00      	nop
 8003178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317a:	bc08      	pop	{r3}
 800317c:	469e      	mov	lr, r3
 800317e:	4770      	bx	lr

08003180 <_fini>:
 8003180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003182:	bf00      	nop
 8003184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003186:	bc08      	pop	{r3}
 8003188:	469e      	mov	lr, r3
 800318a:	4770      	bx	lr
