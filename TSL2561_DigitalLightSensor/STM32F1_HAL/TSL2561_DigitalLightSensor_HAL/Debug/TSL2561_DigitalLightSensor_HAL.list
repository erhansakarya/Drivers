
TSL2561_DigitalLightSensor_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080026dc  080026dc  000126dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002708  08002708  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002708  08002708  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002708  08002708  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002708  08002708  00012708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800270c  0800270c  0001270c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  0800271c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  0800271c  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f123  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ab1  00000000  00000000  0002f158  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000860  00000000  00000000  00030c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a8  00000000  00000000  00031470  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014f84  00000000  00000000  00031c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b6b  00000000  00000000  00046b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d497  00000000  00000000  0004e707  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bbb9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021e0  00000000  00000000  000bbc1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080026c4 	.word	0x080026c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080026c4 	.word	0x080026c4

0800014c <TSL2561_init>:
 * power up olduktan sonra default integration time olan 400ms sonra adc değerleri hazır.
 * */

static uint8_t TSL2561_calculateLux(uint16_t *adcData);

uint8_t TSL2561_init(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8

	uint8_t pData[2];
	uint8_t error = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]

	memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 8000156:	1d3b      	adds	r3, r7, #4
 8000158:	2202      	movs	r2, #2
 800015a:	2100      	movs	r1, #0
 800015c:	4618      	mov	r0, r3
 800015e:	f002 faa9 	bl	80026b4 <memset>

	/* NOTE: Power up the device */
	pData[0] = TSL2561_COMMAND_REG | TSL2561_CONTROL;
 8000162:	2390      	movs	r3, #144	; 0x90
 8000164:	713b      	strb	r3, [r7, #4]
	pData[1] = TSL2561_POWER_UP;
 8000166:	2303      	movs	r3, #3
 8000168:	717b      	strb	r3, [r7, #5]
	if(HAL_I2C_Master_Transmit(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 800016a:	1d3a      	adds	r2, r7, #4
 800016c:	f04f 33ff 	mov.w	r3, #4294967295
 8000170:	9300      	str	r3, [sp, #0]
 8000172:	2302      	movs	r3, #2
 8000174:	2172      	movs	r1, #114	; 0x72
 8000176:	482b      	ldr	r0, [pc, #172]	; (8000224 <TSL2561_init+0xd8>)
 8000178:	f000 fe8e 	bl	8000e98 <HAL_I2C_Master_Transmit>
 800017c:	4603      	mov	r3, r0
 800017e:	2b00      	cmp	r3, #0
 8000180:	d001      	beq.n	8000186 <TSL2561_init+0x3a>
			(sizeof(pData) / sizeof(pData[0])), HAL_MAX_DELAY) != HAL_OK){

		Error_Handler();
 8000182:	f000 f967 	bl	8000454 <Error_Handler>
//		error = 1;
//
//	}

	/* NOTE: Get Device ID */
	memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 8000186:	1d3b      	adds	r3, r7, #4
 8000188:	2202      	movs	r2, #2
 800018a:	2100      	movs	r1, #0
 800018c:	4618      	mov	r0, r3
 800018e:	f002 fa91 	bl	80026b4 <memset>
	pData[0] = TSL2561_COMMAND_REG | TSL2561_ID;
 8000192:	239a      	movs	r3, #154	; 0x9a
 8000194:	713b      	strb	r3, [r7, #4]
	if(HAL_I2C_Master_Transmit(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 8000196:	1d3a      	adds	r2, r7, #4
 8000198:	f04f 33ff 	mov.w	r3, #4294967295
 800019c:	9300      	str	r3, [sp, #0]
 800019e:	2301      	movs	r3, #1
 80001a0:	2172      	movs	r1, #114	; 0x72
 80001a2:	4820      	ldr	r0, [pc, #128]	; (8000224 <TSL2561_init+0xd8>)
 80001a4:	f000 fe78 	bl	8000e98 <HAL_I2C_Master_Transmit>
 80001a8:	4603      	mov	r3, r0
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d001      	beq.n	80001b2 <TSL2561_init+0x66>
			1, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 80001ae:	f000 f951 	bl	8000454 <Error_Handler>
	}

	memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 80001b2:	1d3b      	adds	r3, r7, #4
 80001b4:	2202      	movs	r2, #2
 80001b6:	2100      	movs	r1, #0
 80001b8:	4618      	mov	r0, r3
 80001ba:	f002 fa7b 	bl	80026b4 <memset>
	if(HAL_I2C_Master_Receive(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 80001be:	1d3a      	adds	r2, r7, #4
 80001c0:	f04f 33ff 	mov.w	r3, #4294967295
 80001c4:	9300      	str	r3, [sp, #0]
 80001c6:	2301      	movs	r3, #1
 80001c8:	2172      	movs	r1, #114	; 0x72
 80001ca:	4816      	ldr	r0, [pc, #88]	; (8000224 <TSL2561_init+0xd8>)
 80001cc:	f000 ff72 	bl	80010b4 <HAL_I2C_Master_Receive>
 80001d0:	4603      	mov	r3, r0
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d001      	beq.n	80001da <TSL2561_init+0x8e>
			1, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 80001d6:	f000 f93d 	bl	8000454 <Error_Handler>
	}

	if((pData[0] & 0xF0) != TSL2561_DEV_ID){
 80001da:	793b      	ldrb	r3, [r7, #4]
 80001dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80001e0:	2b50      	cmp	r3, #80	; 0x50
 80001e2:	d001      	beq.n	80001e8 <TSL2561_init+0x9c>
		error = 1;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
	}

	/* NOTE: Configure Timing Register */
	memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2202      	movs	r2, #2
 80001ec:	2100      	movs	r1, #0
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 fa60 	bl	80026b4 <memset>
	pData[0] = TSL2561_COMMAND_REG | TSL2561_TIMING;
 80001f4:	2391      	movs	r3, #145	; 0x91
 80001f6:	713b      	strb	r3, [r7, #4]
	pData[1] = 0x00;	/* NOTE: integration time is 13.7ms */
 80001f8:	2300      	movs	r3, #0
 80001fa:	717b      	strb	r3, [r7, #5]
	if(HAL_I2C_Master_Transmit(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 80001fc:	1d3a      	adds	r2, r7, #4
 80001fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000202:	9300      	str	r3, [sp, #0]
 8000204:	2302      	movs	r3, #2
 8000206:	2172      	movs	r1, #114	; 0x72
 8000208:	4806      	ldr	r0, [pc, #24]	; (8000224 <TSL2561_init+0xd8>)
 800020a:	f000 fe45 	bl	8000e98 <HAL_I2C_Master_Transmit>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <TSL2561_init+0xcc>
			(sizeof(pData) / sizeof(pData[0])), HAL_MAX_DELAY) != HAL_OK){

		Error_Handler();
 8000214:	f000 f91e 	bl	8000454 <Error_Handler>

	/* NOTE: Configure Interrupt Threshold registers */

	/* NOTE: Set interrupt control register */

	return error;
 8000218:	79fb      	ldrb	r3, [r7, #7]

}
 800021a:	4618      	mov	r0, r3
 800021c:	3708      	adds	r7, #8
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	20000028 	.word	0x20000028

08000228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022c:	f000 fa2c 	bl	8000688 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000230:	f000 f809 	bl	8000246 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000234:	f000 f8a0 	bl	8000378 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000238:	f000 f874 	bl	8000324 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800023c:	f000 f844 	bl	80002c8 <MX_I2C1_Init>

  TSL2561_init();
 8000240:	f7ff ff84 	bl	800014c <TSL2561_init>

  /* Infinite loop */
  while (1)
 8000244:	e7fe      	b.n	8000244 <main+0x1c>

08000246 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000246:	b580      	push	{r7, lr}
 8000248:	b090      	sub	sp, #64	; 0x40
 800024a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024c:	f107 0318 	add.w	r3, r7, #24
 8000250:	2228      	movs	r2, #40	; 0x28
 8000252:	2100      	movs	r1, #0
 8000254:	4618      	mov	r0, r3
 8000256:	f002 fa2d 	bl	80026b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	605a      	str	r2, [r3, #4]
 8000262:	609a      	str	r2, [r3, #8]
 8000264:	60da      	str	r2, [r3, #12]
 8000266:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000268:	2302      	movs	r3, #2
 800026a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026c:	2301      	movs	r3, #1
 800026e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000270:	2310      	movs	r3, #16
 8000272:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000274:	2302      	movs	r3, #2
 8000276:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000278:	2300      	movs	r3, #0
 800027a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800027c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000280:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000282:	f107 0318 	add.w	r3, r7, #24
 8000286:	4618      	mov	r0, r3
 8000288:	f001 fc42 	bl	8001b10 <HAL_RCC_OscConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000292:	f000 f8df 	bl	8000454 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000296:	230f      	movs	r3, #15
 8000298:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029a:	2302      	movs	r3, #2
 800029c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2102      	movs	r1, #2
 80002b0:	4618      	mov	r0, r3
 80002b2:	f001 fe91 	bl	8001fd8 <HAL_RCC_ClockConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002bc:	f000 f8ca 	bl	8000454 <Error_Handler>
  }
}
 80002c0:	bf00      	nop
 80002c2:	3740      	adds	r7, #64	; 0x40
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002cc:	4b12      	ldr	r3, [pc, #72]	; (8000318 <MX_I2C1_Init+0x50>)
 80002ce:	4a13      	ldr	r2, [pc, #76]	; (800031c <MX_I2C1_Init+0x54>)
 80002d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80002d2:	4b11      	ldr	r3, [pc, #68]	; (8000318 <MX_I2C1_Init+0x50>)
 80002d4:	4a12      	ldr	r2, [pc, #72]	; (8000320 <MX_I2C1_Init+0x58>)
 80002d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <MX_I2C1_Init+0x50>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002de:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <MX_I2C1_Init+0x50>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002e4:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <MX_I2C1_Init+0x50>)
 80002e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002ec:	4b0a      	ldr	r3, [pc, #40]	; (8000318 <MX_I2C1_Init+0x50>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002f2:	4b09      	ldr	r3, [pc, #36]	; (8000318 <MX_I2C1_Init+0x50>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002f8:	4b07      	ldr	r3, [pc, #28]	; (8000318 <MX_I2C1_Init+0x50>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002fe:	4b06      	ldr	r3, [pc, #24]	; (8000318 <MX_I2C1_Init+0x50>)
 8000300:	2200      	movs	r2, #0
 8000302:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000304:	4804      	ldr	r0, [pc, #16]	; (8000318 <MX_I2C1_Init+0x50>)
 8000306:	f000 fcc3 	bl	8000c90 <HAL_I2C_Init>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000310:	f000 f8a0 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20000028 	.word	0x20000028
 800031c:	40005400 	.word	0x40005400
 8000320:	00061a80 	.word	0x00061a80

08000324 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000328:	4b11      	ldr	r3, [pc, #68]	; (8000370 <MX_USART2_UART_Init+0x4c>)
 800032a:	4a12      	ldr	r2, [pc, #72]	; (8000374 <MX_USART2_UART_Init+0x50>)
 800032c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800032e:	4b10      	ldr	r3, [pc, #64]	; (8000370 <MX_USART2_UART_Init+0x4c>)
 8000330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000334:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <MX_USART2_UART_Init+0x4c>)
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <MX_USART2_UART_Init+0x4c>)
 800033e:	2200      	movs	r2, #0
 8000340:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000342:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <MX_USART2_UART_Init+0x4c>)
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000348:	4b09      	ldr	r3, [pc, #36]	; (8000370 <MX_USART2_UART_Init+0x4c>)
 800034a:	220c      	movs	r2, #12
 800034c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800034e:	4b08      	ldr	r3, [pc, #32]	; (8000370 <MX_USART2_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <MX_USART2_UART_Init+0x4c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800035a:	4805      	ldr	r0, [pc, #20]	; (8000370 <MX_USART2_UART_Init+0x4c>)
 800035c:	f001 fffa 	bl	8002354 <HAL_UART_Init>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000366:	f000 f875 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	2000007c 	.word	0x2000007c
 8000374:	40004400 	.word	0x40004400

08000378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b088      	sub	sp, #32
 800037c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037e:	f107 0310 	add.w	r3, r7, #16
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800038c:	4b2d      	ldr	r3, [pc, #180]	; (8000444 <MX_GPIO_Init+0xcc>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a2c      	ldr	r2, [pc, #176]	; (8000444 <MX_GPIO_Init+0xcc>)
 8000392:	f043 0310 	orr.w	r3, r3, #16
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b2a      	ldr	r3, [pc, #168]	; (8000444 <MX_GPIO_Init+0xcc>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0310 	and.w	r3, r3, #16
 80003a0:	60fb      	str	r3, [r7, #12]
 80003a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a4:	4b27      	ldr	r3, [pc, #156]	; (8000444 <MX_GPIO_Init+0xcc>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a26      	ldr	r2, [pc, #152]	; (8000444 <MX_GPIO_Init+0xcc>)
 80003aa:	f043 0320 	orr.w	r3, r3, #32
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b24      	ldr	r3, [pc, #144]	; (8000444 <MX_GPIO_Init+0xcc>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0320 	and.w	r3, r3, #32
 80003b8:	60bb      	str	r3, [r7, #8]
 80003ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003bc:	4b21      	ldr	r3, [pc, #132]	; (8000444 <MX_GPIO_Init+0xcc>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a20      	ldr	r2, [pc, #128]	; (8000444 <MX_GPIO_Init+0xcc>)
 80003c2:	f043 0304 	orr.w	r3, r3, #4
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b1e      	ldr	r3, [pc, #120]	; (8000444 <MX_GPIO_Init+0xcc>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0304 	and.w	r3, r3, #4
 80003d0:	607b      	str	r3, [r7, #4]
 80003d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d4:	4b1b      	ldr	r3, [pc, #108]	; (8000444 <MX_GPIO_Init+0xcc>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a1a      	ldr	r2, [pc, #104]	; (8000444 <MX_GPIO_Init+0xcc>)
 80003da:	f043 0308 	orr.w	r3, r3, #8
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b18      	ldr	r3, [pc, #96]	; (8000444 <MX_GPIO_Init+0xcc>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0308 	and.w	r3, r3, #8
 80003e8:	603b      	str	r3, [r7, #0]
 80003ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2120      	movs	r1, #32
 80003f0:	4815      	ldr	r0, [pc, #84]	; (8000448 <MX_GPIO_Init+0xd0>)
 80003f2:	f000 fc13 	bl	8000c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003fc:	4b13      	ldr	r3, [pc, #76]	; (800044c <MX_GPIO_Init+0xd4>)
 80003fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	2300      	movs	r3, #0
 8000402:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000404:	f107 0310 	add.w	r3, r7, #16
 8000408:	4619      	mov	r1, r3
 800040a:	4811      	ldr	r0, [pc, #68]	; (8000450 <MX_GPIO_Init+0xd8>)
 800040c:	f000 faa8 	bl	8000960 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000410:	2320      	movs	r3, #32
 8000412:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000414:	2301      	movs	r3, #1
 8000416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000418:	2300      	movs	r3, #0
 800041a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041c:	2302      	movs	r3, #2
 800041e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000420:	f107 0310 	add.w	r3, r7, #16
 8000424:	4619      	mov	r1, r3
 8000426:	4808      	ldr	r0, [pc, #32]	; (8000448 <MX_GPIO_Init+0xd0>)
 8000428:	f000 fa9a 	bl	8000960 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800042c:	2200      	movs	r2, #0
 800042e:	2100      	movs	r1, #0
 8000430:	2028      	movs	r0, #40	; 0x28
 8000432:	f000 fa5e 	bl	80008f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000436:	2028      	movs	r0, #40	; 0x28
 8000438:	f000 fa77 	bl	800092a <HAL_NVIC_EnableIRQ>

}
 800043c:	bf00      	nop
 800043e:	3720      	adds	r7, #32
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40021000 	.word	0x40021000
 8000448:	40010800 	.word	0x40010800
 800044c:	10110000 	.word	0x10110000
 8000450:	40011000 	.word	0x40011000

08000454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000466:	4b15      	ldr	r3, [pc, #84]	; (80004bc <HAL_MspInit+0x5c>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	4a14      	ldr	r2, [pc, #80]	; (80004bc <HAL_MspInit+0x5c>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	6193      	str	r3, [r2, #24]
 8000472:	4b12      	ldr	r3, [pc, #72]	; (80004bc <HAL_MspInit+0x5c>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <HAL_MspInit+0x5c>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	4a0e      	ldr	r2, [pc, #56]	; (80004bc <HAL_MspInit+0x5c>)
 8000484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000488:	61d3      	str	r3, [r2, #28]
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <HAL_MspInit+0x5c>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000496:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <HAL_MspInit+0x60>)
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <HAL_MspInit+0x60>)
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b2:	bf00      	nop
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40010000 	.word	0x40010000

080004c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	f107 0310 	add.w	r3, r7, #16
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a15      	ldr	r2, [pc, #84]	; (8000534 <HAL_I2C_MspInit+0x70>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d123      	bne.n	800052c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e4:	4b14      	ldr	r3, [pc, #80]	; (8000538 <HAL_I2C_MspInit+0x74>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a13      	ldr	r2, [pc, #76]	; (8000538 <HAL_I2C_MspInit+0x74>)
 80004ea:	f043 0308 	orr.w	r3, r3, #8
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <HAL_I2C_MspInit+0x74>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0308 	and.w	r3, r3, #8
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004fc:	23c0      	movs	r3, #192	; 0xc0
 80004fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000500:	2312      	movs	r3, #18
 8000502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000504:	2303      	movs	r3, #3
 8000506:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	4619      	mov	r1, r3
 800050e:	480b      	ldr	r0, [pc, #44]	; (800053c <HAL_I2C_MspInit+0x78>)
 8000510:	f000 fa26 	bl	8000960 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <HAL_I2C_MspInit+0x74>)
 8000516:	69db      	ldr	r3, [r3, #28]
 8000518:	4a07      	ldr	r2, [pc, #28]	; (8000538 <HAL_I2C_MspInit+0x74>)
 800051a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800051e:	61d3      	str	r3, [r2, #28]
 8000520:	4b05      	ldr	r3, [pc, #20]	; (8000538 <HAL_I2C_MspInit+0x74>)
 8000522:	69db      	ldr	r3, [r3, #28]
 8000524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800052c:	bf00      	nop
 800052e:	3720      	adds	r7, #32
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40005400 	.word	0x40005400
 8000538:	40021000 	.word	0x40021000
 800053c:	40010c00 	.word	0x40010c00

08000540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000548:	f107 0310 	add.w	r3, r7, #16
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a15      	ldr	r2, [pc, #84]	; (80005b0 <HAL_UART_MspInit+0x70>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d123      	bne.n	80005a8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000560:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <HAL_UART_MspInit+0x74>)
 8000562:	69db      	ldr	r3, [r3, #28]
 8000564:	4a13      	ldr	r2, [pc, #76]	; (80005b4 <HAL_UART_MspInit+0x74>)
 8000566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056a:	61d3      	str	r3, [r2, #28]
 800056c:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <HAL_UART_MspInit+0x74>)
 800056e:	69db      	ldr	r3, [r3, #28]
 8000570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000578:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <HAL_UART_MspInit+0x74>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <HAL_UART_MspInit+0x74>)
 800057e:	f043 0304 	orr.w	r3, r3, #4
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <HAL_UART_MspInit+0x74>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0304 	and.w	r3, r3, #4
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000590:	230c      	movs	r3, #12
 8000592:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000594:	2302      	movs	r3, #2
 8000596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000598:	2302      	movs	r3, #2
 800059a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059c:	f107 0310 	add.w	r3, r7, #16
 80005a0:	4619      	mov	r1, r3
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <HAL_UART_MspInit+0x78>)
 80005a4:	f000 f9dc 	bl	8000960 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005a8:	bf00      	nop
 80005aa:	3720      	adds	r7, #32
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40004400 	.word	0x40004400
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010800 	.word	0x40010800

080005bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <HardFault_Handler+0x4>

080005ce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <MemManage_Handler+0x4>

080005d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <BusFault_Handler+0x4>

080005da <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005de:	e7fe      	b.n	80005de <UsageFault_Handler+0x4>

080005e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr

080005ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr

080005f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000608:	f000 f884 	bl	8000714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}

08000610 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000614:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000618:	f000 fb18 	bl	8000c4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}

08000620 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000624:	4b15      	ldr	r3, [pc, #84]	; (800067c <SystemInit+0x5c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a14      	ldr	r2, [pc, #80]	; (800067c <SystemInit+0x5c>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <SystemInit+0x5c>)
 8000632:	685a      	ldr	r2, [r3, #4]
 8000634:	4911      	ldr	r1, [pc, #68]	; (800067c <SystemInit+0x5c>)
 8000636:	4b12      	ldr	r3, [pc, #72]	; (8000680 <SystemInit+0x60>)
 8000638:	4013      	ands	r3, r2
 800063a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <SystemInit+0x5c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a0e      	ldr	r2, [pc, #56]	; (800067c <SystemInit+0x5c>)
 8000642:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800064a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <SystemInit+0x5c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a0a      	ldr	r2, [pc, #40]	; (800067c <SystemInit+0x5c>)
 8000652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000656:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <SystemInit+0x5c>)
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	4a07      	ldr	r2, [pc, #28]	; (800067c <SystemInit+0x5c>)
 800065e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000662:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <SystemInit+0x5c>)
 8000666:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800066a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <SystemInit+0x64>)
 800066e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000672:	609a      	str	r2, [r3, #8]
#endif 
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	40021000 	.word	0x40021000
 8000680:	f8ff0000 	.word	0xf8ff0000
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <HAL_Init+0x28>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a07      	ldr	r2, [pc, #28]	; (80006b0 <HAL_Init+0x28>)
 8000692:	f043 0310 	orr.w	r3, r3, #16
 8000696:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000698:	2003      	movs	r0, #3
 800069a:	f000 f91f 	bl	80008dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800069e:	2000      	movs	r0, #0
 80006a0:	f000 f808 	bl	80006b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006a4:	f7ff fedc 	bl	8000460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40022000 	.word	0x40022000

080006b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_InitTick+0x54>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <HAL_InitTick+0x58>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4619      	mov	r1, r3
 80006c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 f937 	bl	8000946 <HAL_SYSTICK_Config>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006de:	2301      	movs	r3, #1
 80006e0:	e00e      	b.n	8000700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2b0f      	cmp	r3, #15
 80006e6:	d80a      	bhi.n	80006fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e8:	2200      	movs	r2, #0
 80006ea:	6879      	ldr	r1, [r7, #4]
 80006ec:	f04f 30ff 	mov.w	r0, #4294967295
 80006f0:	f000 f8ff 	bl	80008f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006f4:	4a06      	ldr	r2, [pc, #24]	; (8000710 <HAL_InitTick+0x5c>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006fa:	2300      	movs	r3, #0
 80006fc:	e000      	b.n	8000700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
}
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000000 	.word	0x20000000
 800070c:	20000008 	.word	0x20000008
 8000710:	20000004 	.word	0x20000004

08000714 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <HAL_IncTick+0x1c>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <HAL_IncTick+0x20>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4413      	add	r3, r2
 8000724:	4a03      	ldr	r2, [pc, #12]	; (8000734 <HAL_IncTick+0x20>)
 8000726:	6013      	str	r3, [r2, #0]
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	20000008 	.word	0x20000008
 8000734:	200000bc 	.word	0x200000bc

08000738 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  return uwTick;
 800073c:	4b02      	ldr	r3, [pc, #8]	; (8000748 <HAL_GetTick+0x10>)
 800073e:	681b      	ldr	r3, [r3, #0]
}
 8000740:	4618      	mov	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	200000bc 	.word	0x200000bc

0800074c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f003 0307 	and.w	r3, r3, #7
 800075a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <NVIC_SetPriorityGrouping+0x44>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000762:	68ba      	ldr	r2, [r7, #8]
 8000764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000768:	4013      	ands	r3, r2
 800076a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800077c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800077e:	4a04      	ldr	r2, [pc, #16]	; (8000790 <NVIC_SetPriorityGrouping+0x44>)
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	60d3      	str	r3, [r2, #12]
}
 8000784:	bf00      	nop
 8000786:	3714      	adds	r7, #20
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000798:	4b04      	ldr	r3, [pc, #16]	; (80007ac <NVIC_GetPriorityGrouping+0x18>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	0a1b      	lsrs	r3, r3, #8
 800079e:	f003 0307 	and.w	r3, r3, #7
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	f003 021f 	and.w	r2, r3, #31
 80007c0:	4906      	ldr	r1, [pc, #24]	; (80007dc <NVIC_EnableIRQ+0x2c>)
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	095b      	lsrs	r3, r3, #5
 80007c8:	2001      	movs	r0, #1
 80007ca:	fa00 f202 	lsl.w	r2, r0, r2
 80007ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	e000e100 	.word	0xe000e100

080007e0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	6039      	str	r1, [r7, #0]
 80007ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80007ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	da0b      	bge.n	800080c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	490c      	ldr	r1, [pc, #48]	; (800082c <NVIC_SetPriority+0x4c>)
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	f003 030f 	and.w	r3, r3, #15
 8000800:	3b04      	subs	r3, #4
 8000802:	0112      	lsls	r2, r2, #4
 8000804:	b2d2      	uxtb	r2, r2
 8000806:	440b      	add	r3, r1
 8000808:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800080a:	e009      	b.n	8000820 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	b2da      	uxtb	r2, r3
 8000810:	4907      	ldr	r1, [pc, #28]	; (8000830 <NVIC_SetPriority+0x50>)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	0112      	lsls	r2, r2, #4
 8000818:	b2d2      	uxtb	r2, r2
 800081a:	440b      	add	r3, r1
 800081c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000ed00 	.word	0xe000ed00
 8000830:	e000e100 	.word	0xe000e100

08000834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000834:	b480      	push	{r7}
 8000836:	b089      	sub	sp, #36	; 0x24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	f003 0307 	and.w	r3, r3, #7
 8000846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	f1c3 0307 	rsb	r3, r3, #7
 800084e:	2b04      	cmp	r3, #4
 8000850:	bf28      	it	cs
 8000852:	2304      	movcs	r3, #4
 8000854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3304      	adds	r3, #4
 800085a:	2b06      	cmp	r3, #6
 800085c:	d902      	bls.n	8000864 <NVIC_EncodePriority+0x30>
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3b03      	subs	r3, #3
 8000862:	e000      	b.n	8000866 <NVIC_EncodePriority+0x32>
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000868:	f04f 32ff 	mov.w	r2, #4294967295
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	43da      	mvns	r2, r3
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	401a      	ands	r2, r3
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800087c:	f04f 31ff 	mov.w	r1, #4294967295
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	fa01 f303 	lsl.w	r3, r1, r3
 8000886:	43d9      	mvns	r1, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800088c:	4313      	orrs	r3, r2
         );
}
 800088e:	4618      	mov	r0, r3
 8000890:	3724      	adds	r7, #36	; 0x24
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008a8:	d301      	bcc.n	80008ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008aa:	2301      	movs	r3, #1
 80008ac:	e00f      	b.n	80008ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ae:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <SysTick_Config+0x40>)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008b6:	210f      	movs	r1, #15
 80008b8:	f04f 30ff 	mov.w	r0, #4294967295
 80008bc:	f7ff ff90 	bl	80007e0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <SysTick_Config+0x40>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c6:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <SysTick_Config+0x40>)
 80008c8:	2207      	movs	r2, #7
 80008ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	e000e010 	.word	0xe000e010

080008dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f7ff ff31 	bl	800074c <NVIC_SetPriorityGrouping>
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b086      	sub	sp, #24
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	4603      	mov	r3, r0
 80008fa:	60b9      	str	r1, [r7, #8]
 80008fc:	607a      	str	r2, [r7, #4]
 80008fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000904:	f7ff ff46 	bl	8000794 <NVIC_GetPriorityGrouping>
 8000908:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	68b9      	ldr	r1, [r7, #8]
 800090e:	6978      	ldr	r0, [r7, #20]
 8000910:	f7ff ff90 	bl	8000834 <NVIC_EncodePriority>
 8000914:	4602      	mov	r2, r0
 8000916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800091a:	4611      	mov	r1, r2
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ff5f 	bl	80007e0 <NVIC_SetPriority>
}
 8000922:	bf00      	nop
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b082      	sub	sp, #8
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ff39 	bl	80007b0 <NVIC_EnableIRQ>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff ffa2 	bl	8000898 <SysTick_Config>
 8000954:	4603      	mov	r3, r0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000960:	b480      	push	{r7}
 8000962:	b08b      	sub	sp, #44	; 0x2c
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800096e:	2300      	movs	r3, #0
 8000970:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
 8000982:	e127      	b.n	8000bd4 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000984:	2201      	movs	r2, #1
 8000986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	69fa      	ldr	r2, [r7, #28]
 8000994:	4013      	ands	r3, r2
 8000996:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	429a      	cmp	r2, r3
 800099e:	f040 8116 	bne.w	8000bce <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	2b12      	cmp	r3, #18
 80009a8:	d034      	beq.n	8000a14 <HAL_GPIO_Init+0xb4>
 80009aa:	2b12      	cmp	r3, #18
 80009ac:	d80d      	bhi.n	80009ca <HAL_GPIO_Init+0x6a>
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d02b      	beq.n	8000a0a <HAL_GPIO_Init+0xaa>
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d804      	bhi.n	80009c0 <HAL_GPIO_Init+0x60>
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d031      	beq.n	8000a1e <HAL_GPIO_Init+0xbe>
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d01c      	beq.n	80009f8 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009be:	e048      	b.n	8000a52 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80009c0:	2b03      	cmp	r3, #3
 80009c2:	d043      	beq.n	8000a4c <HAL_GPIO_Init+0xec>
 80009c4:	2b11      	cmp	r3, #17
 80009c6:	d01b      	beq.n	8000a00 <HAL_GPIO_Init+0xa0>
          break;
 80009c8:	e043      	b.n	8000a52 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80009ca:	4a87      	ldr	r2, [pc, #540]	; (8000be8 <HAL_GPIO_Init+0x288>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d026      	beq.n	8000a1e <HAL_GPIO_Init+0xbe>
 80009d0:	4a85      	ldr	r2, [pc, #532]	; (8000be8 <HAL_GPIO_Init+0x288>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d806      	bhi.n	80009e4 <HAL_GPIO_Init+0x84>
 80009d6:	4a85      	ldr	r2, [pc, #532]	; (8000bec <HAL_GPIO_Init+0x28c>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d020      	beq.n	8000a1e <HAL_GPIO_Init+0xbe>
 80009dc:	4a84      	ldr	r2, [pc, #528]	; (8000bf0 <HAL_GPIO_Init+0x290>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d01d      	beq.n	8000a1e <HAL_GPIO_Init+0xbe>
          break;
 80009e2:	e036      	b.n	8000a52 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80009e4:	4a83      	ldr	r2, [pc, #524]	; (8000bf4 <HAL_GPIO_Init+0x294>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d019      	beq.n	8000a1e <HAL_GPIO_Init+0xbe>
 80009ea:	4a83      	ldr	r2, [pc, #524]	; (8000bf8 <HAL_GPIO_Init+0x298>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d016      	beq.n	8000a1e <HAL_GPIO_Init+0xbe>
 80009f0:	4a82      	ldr	r2, [pc, #520]	; (8000bfc <HAL_GPIO_Init+0x29c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d013      	beq.n	8000a1e <HAL_GPIO_Init+0xbe>
          break;
 80009f6:	e02c      	b.n	8000a52 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	623b      	str	r3, [r7, #32]
          break;
 80009fe:	e028      	b.n	8000a52 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	3304      	adds	r3, #4
 8000a06:	623b      	str	r3, [r7, #32]
          break;
 8000a08:	e023      	b.n	8000a52 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	3308      	adds	r3, #8
 8000a10:	623b      	str	r3, [r7, #32]
          break;
 8000a12:	e01e      	b.n	8000a52 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	330c      	adds	r3, #12
 8000a1a:	623b      	str	r3, [r7, #32]
          break;
 8000a1c:	e019      	b.n	8000a52 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d102      	bne.n	8000a2c <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a26:	2304      	movs	r3, #4
 8000a28:	623b      	str	r3, [r7, #32]
          break;
 8000a2a:	e012      	b.n	8000a52 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d105      	bne.n	8000a40 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a34:	2308      	movs	r3, #8
 8000a36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	69fa      	ldr	r2, [r7, #28]
 8000a3c:	611a      	str	r2, [r3, #16]
          break;
 8000a3e:	e008      	b.n	8000a52 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a40:	2308      	movs	r3, #8
 8000a42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	69fa      	ldr	r2, [r7, #28]
 8000a48:	615a      	str	r2, [r3, #20]
          break;
 8000a4a:	e002      	b.n	8000a52 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
          break;
 8000a50:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	2bff      	cmp	r3, #255	; 0xff
 8000a56:	d801      	bhi.n	8000a5c <HAL_GPIO_Init+0xfc>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	e001      	b.n	8000a60 <HAL_GPIO_Init+0x100>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3304      	adds	r3, #4
 8000a60:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	2bff      	cmp	r3, #255	; 0xff
 8000a66:	d802      	bhi.n	8000a6e <HAL_GPIO_Init+0x10e>
 8000a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	e002      	b.n	8000a74 <HAL_GPIO_Init+0x114>
 8000a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a70:	3b08      	subs	r3, #8
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	210f      	movs	r1, #15
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a82:	43db      	mvns	r3, r3
 8000a84:	401a      	ands	r2, r3
 8000a86:	6a39      	ldr	r1, [r7, #32]
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	431a      	orrs	r2, r3
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	f000 8096 	beq.w	8000bce <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000aa2:	4b57      	ldr	r3, [pc, #348]	; (8000c00 <HAL_GPIO_Init+0x2a0>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	4a56      	ldr	r2, [pc, #344]	; (8000c00 <HAL_GPIO_Init+0x2a0>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6193      	str	r3, [r2, #24]
 8000aae:	4b54      	ldr	r3, [pc, #336]	; (8000c00 <HAL_GPIO_Init+0x2a0>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000aba:	4a52      	ldr	r2, [pc, #328]	; (8000c04 <HAL_GPIO_Init+0x2a4>)
 8000abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abe:	089b      	lsrs	r3, r3, #2
 8000ac0:	3302      	adds	r3, #2
 8000ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac6:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aca:	f003 0303 	and.w	r3, r3, #3
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	220f      	movs	r2, #15
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	697a      	ldr	r2, [r7, #20]
 8000ada:	4013      	ands	r3, r2
 8000adc:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a49      	ldr	r2, [pc, #292]	; (8000c08 <HAL_GPIO_Init+0x2a8>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d013      	beq.n	8000b0e <HAL_GPIO_Init+0x1ae>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a48      	ldr	r2, [pc, #288]	; (8000c0c <HAL_GPIO_Init+0x2ac>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d00d      	beq.n	8000b0a <HAL_GPIO_Init+0x1aa>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a47      	ldr	r2, [pc, #284]	; (8000c10 <HAL_GPIO_Init+0x2b0>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d007      	beq.n	8000b06 <HAL_GPIO_Init+0x1a6>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a46      	ldr	r2, [pc, #280]	; (8000c14 <HAL_GPIO_Init+0x2b4>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d101      	bne.n	8000b02 <HAL_GPIO_Init+0x1a2>
 8000afe:	2303      	movs	r3, #3
 8000b00:	e006      	b.n	8000b10 <HAL_GPIO_Init+0x1b0>
 8000b02:	2304      	movs	r3, #4
 8000b04:	e004      	b.n	8000b10 <HAL_GPIO_Init+0x1b0>
 8000b06:	2302      	movs	r3, #2
 8000b08:	e002      	b.n	8000b10 <HAL_GPIO_Init+0x1b0>
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e000      	b.n	8000b10 <HAL_GPIO_Init+0x1b0>
 8000b0e:	2300      	movs	r3, #0
 8000b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b12:	f002 0203 	and.w	r2, r2, #3
 8000b16:	0092      	lsls	r2, r2, #2
 8000b18:	4093      	lsls	r3, r2
 8000b1a:	697a      	ldr	r2, [r7, #20]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000b20:	4938      	ldr	r1, [pc, #224]	; (8000c04 <HAL_GPIO_Init+0x2a4>)
 8000b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b24:	089b      	lsrs	r3, r3, #2
 8000b26:	3302      	adds	r3, #2
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d006      	beq.n	8000b48 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b3a:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	4936      	ldr	r1, [pc, #216]	; (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	600b      	str	r3, [r1, #0]
 8000b46:	e006      	b.n	8000b56 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b48:	4b33      	ldr	r3, [pc, #204]	; (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	4931      	ldr	r1, [pc, #196]	; (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000b52:	4013      	ands	r3, r2
 8000b54:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d006      	beq.n	8000b70 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b62:	4b2d      	ldr	r3, [pc, #180]	; (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	492c      	ldr	r1, [pc, #176]	; (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	604b      	str	r3, [r1, #4]
 8000b6e:	e006      	b.n	8000b7e <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b70:	4b29      	ldr	r3, [pc, #164]	; (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	43db      	mvns	r3, r3
 8000b78:	4927      	ldr	r1, [pc, #156]	; (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d006      	beq.n	8000b98 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b8a:	4b23      	ldr	r3, [pc, #140]	; (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000b8c:	689a      	ldr	r2, [r3, #8]
 8000b8e:	4922      	ldr	r1, [pc, #136]	; (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	608b      	str	r3, [r1, #8]
 8000b96:	e006      	b.n	8000ba6 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b98:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	491d      	ldr	r1, [pc, #116]	; (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d006      	beq.n	8000bc0 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000bb4:	68da      	ldr	r2, [r3, #12]
 8000bb6:	4918      	ldr	r1, [pc, #96]	; (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	60cb      	str	r3, [r1, #12]
 8000bbe:	e006      	b.n	8000bce <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bc0:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000bc2:	68da      	ldr	r2, [r3, #12]
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	4913      	ldr	r1, [pc, #76]	; (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000bca:	4013      	ands	r3, r2
 8000bcc:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd6:	2b0f      	cmp	r3, #15
 8000bd8:	f67f aed4 	bls.w	8000984 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000bdc:	bf00      	nop
 8000bde:	372c      	adds	r7, #44	; 0x2c
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	10210000 	.word	0x10210000
 8000bec:	10110000 	.word	0x10110000
 8000bf0:	10120000 	.word	0x10120000
 8000bf4:	10310000 	.word	0x10310000
 8000bf8:	10320000 	.word	0x10320000
 8000bfc:	10220000 	.word	0x10220000
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40010000 	.word	0x40010000
 8000c08:	40010800 	.word	0x40010800
 8000c0c:	40010c00 	.word	0x40010c00
 8000c10:	40011000 	.word	0x40011000
 8000c14:	40011400 	.word	0x40011400
 8000c18:	40010400 	.word	0x40010400

08000c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	807b      	strh	r3, [r7, #2]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c2c:	787b      	ldrb	r3, [r7, #1]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c32:	887a      	ldrh	r2, [r7, #2]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c38:	e003      	b.n	8000c42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	041a      	lsls	r2, r3, #16
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	611a      	str	r2, [r3, #16]
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr

08000c4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c58:	695a      	ldr	r2, [r3, #20]
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d006      	beq.n	8000c70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f806 	bl	8000c7c <HAL_GPIO_EXTI_Callback>
  }
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40010400 	.word	0x40010400

08000c7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d101      	bne.n	8000caa <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e0e7      	b.n	8000e7a <HAL_I2C_Init+0x1ea>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d106      	bne.n	8000cc4 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff fc00 	bl	80004c4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2224      	movs	r2, #36	; 0x24
 8000cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f022 0201 	bic.w	r2, r2, #1
 8000cda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000cdc:	f001 faf4 	bl	80022c8 <HAL_RCC_GetPCLK1Freq>
 8000ce0:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	4a67      	ldr	r2, [pc, #412]	; (8000e84 <HAL_I2C_Init+0x1f4>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d807      	bhi.n	8000cfc <HAL_I2C_Init+0x6c>
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	4a66      	ldr	r2, [pc, #408]	; (8000e88 <HAL_I2C_Init+0x1f8>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	bf94      	ite	ls
 8000cf4:	2301      	movls	r3, #1
 8000cf6:	2300      	movhi	r3, #0
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	e006      	b.n	8000d0a <HAL_I2C_Init+0x7a>
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4a63      	ldr	r2, [pc, #396]	; (8000e8c <HAL_I2C_Init+0x1fc>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	bf94      	ite	ls
 8000d04:	2301      	movls	r3, #1
 8000d06:	2300      	movhi	r3, #0
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e0b3      	b.n	8000e7a <HAL_I2C_Init+0x1ea>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	4a5e      	ldr	r2, [pc, #376]	; (8000e90 <HAL_I2C_Init+0x200>)
 8000d16:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1a:	0c9b      	lsrs	r3, r3, #18
 8000d1c:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	4a56      	ldr	r2, [pc, #344]	; (8000e84 <HAL_I2C_Init+0x1f4>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d802      	bhi.n	8000d36 <HAL_I2C_Init+0xa6>
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	3301      	adds	r3, #1
 8000d34:	e009      	b.n	8000d4a <HAL_I2C_Init+0xba>
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d3c:	fb02 f303 	mul.w	r3, r2, r3
 8000d40:	4a54      	ldr	r2, [pc, #336]	; (8000e94 <HAL_I2C_Init+0x204>)
 8000d42:	fba2 2303 	umull	r2, r3, r2, r3
 8000d46:	099b      	lsrs	r3, r3, #6
 8000d48:	3301      	adds	r3, #1
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	6812      	ldr	r2, [r2, #0]
 8000d4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	4a4b      	ldr	r2, [pc, #300]	; (8000e84 <HAL_I2C_Init+0x1f4>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d80d      	bhi.n	8000d76 <HAL_I2C_Init+0xe6>
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	1e5a      	subs	r2, r3, #1
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d68:	3301      	adds	r3, #1
 8000d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	bf38      	it	cc
 8000d72:	2304      	movcc	r3, #4
 8000d74:	e04f      	b.n	8000e16 <HAL_I2C_Init+0x186>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d111      	bne.n	8000da2 <HAL_I2C_Init+0x112>
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	1e59      	subs	r1, r3, #1
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	4613      	mov	r3, r2
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	4413      	add	r3, r2
 8000d8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d90:	3301      	adds	r3, #1
 8000d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	bf0c      	ite	eq
 8000d9a:	2301      	moveq	r3, #1
 8000d9c:	2300      	movne	r3, #0
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	e012      	b.n	8000dc8 <HAL_I2C_Init+0x138>
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	1e59      	subs	r1, r3, #1
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	4613      	mov	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	009a      	lsls	r2, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000db8:	3301      	adds	r3, #1
 8000dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	bf0c      	ite	eq
 8000dc2:	2301      	moveq	r3, #1
 8000dc4:	2300      	movne	r3, #0
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <HAL_I2C_Init+0x140>
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e022      	b.n	8000e16 <HAL_I2C_Init+0x186>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d10e      	bne.n	8000df6 <HAL_I2C_Init+0x166>
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	1e59      	subs	r1, r3, #1
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685a      	ldr	r2, [r3, #4]
 8000de0:	4613      	mov	r3, r2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4413      	add	r3, r2
 8000de6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dea:	3301      	adds	r3, #1
 8000dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000df4:	e00f      	b.n	8000e16 <HAL_I2C_Init+0x186>
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	1e59      	subs	r1, r3, #1
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4413      	add	r3, r2
 8000e04:	009a      	lsls	r2, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	6812      	ldr	r2, [r2, #0]
 8000e1a:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69d9      	ldr	r1, [r3, #28]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a1a      	ldr	r2, [r3, #32]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6919      	ldr	r1, [r3, #16]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6959      	ldr	r1, [r3, #20]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	699a      	ldr	r2, [r3, #24]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f042 0201 	orr.w	r2, r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2220      	movs	r2, #32
 8000e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	000186a0 	.word	0x000186a0
 8000e88:	001e847f 	.word	0x001e847f
 8000e8c:	003d08ff 	.word	0x003d08ff
 8000e90:	431bde83 	.word	0x431bde83
 8000e94:	10624dd3 	.word	0x10624dd3

08000e98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	607a      	str	r2, [r7, #4]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	817b      	strh	r3, [r7, #10]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000eb0:	f7ff fc42 	bl	8000738 <HAL_GetTick>
 8000eb4:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b20      	cmp	r3, #32
 8000ec0:	f040 80ee 	bne.w	80010a0 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2319      	movs	r3, #25
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4977      	ldr	r1, [pc, #476]	; (80010ac <HAL_I2C_Master_Transmit+0x214>)
 8000ece:	68f8      	ldr	r0, [r7, #12]
 8000ed0:	f000 fc74 	bl	80017bc <I2C_WaitOnFlagUntilTimeout>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8000eda:	2302      	movs	r3, #2
 8000edc:	e0e1      	b.n	80010a2 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d101      	bne.n	8000eec <HAL_I2C_Master_Transmit+0x54>
 8000ee8:	2302      	movs	r3, #2
 8000eea:	e0da      	b.n	80010a2 <HAL_I2C_Master_Transmit+0x20a>
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d007      	beq.n	8000f12 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f042 0201 	orr.w	r2, r2, #1
 8000f10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f20:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2221      	movs	r2, #33	; 0x21
 8000f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2210      	movs	r2, #16
 8000f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2200      	movs	r2, #0
 8000f36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	893a      	ldrh	r2, [r7, #8]
 8000f42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4a5a      	ldr	r2, [pc, #360]	; (80010b0 <HAL_I2C_Master_Transmit+0x218>)
 8000f48:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000f54:	8979      	ldrh	r1, [r7, #10]
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	6a3a      	ldr	r2, [r7, #32]
 8000f5a:	68f8      	ldr	r0, [r7, #12]
 8000f5c:	f000 fae4 	bl	8001528 <I2C_MasterRequestWrite>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d00f      	beq.n	8000f86 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	d105      	bne.n	8000f7a <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e093      	b.n	80010a2 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e08d      	b.n	80010a2 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8000f9c:	e066      	b.n	800106c <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	6a39      	ldr	r1, [r7, #32]
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f000 fcc9 	bl	800193a <I2C_WaitOnTXEFlagUntilTimeout>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00f      	beq.n	8000fce <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	d109      	bne.n	8000fca <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fc4:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e06b      	b.n	80010a2 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e069      	b.n	80010a2 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd2:	1c59      	adds	r1, r3, #1
 8000fd4:	68fa      	ldr	r2, [r7, #12]
 8000fd6:	6251      	str	r1, [r2, #36]	; 0x24
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	2b04      	cmp	r3, #4
 8001006:	d119      	bne.n	800103c <HAL_I2C_Master_Transmit+0x1a4>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800100c:	2b00      	cmp	r3, #0
 800100e:	d015      	beq.n	800103c <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001014:	1c59      	adds	r1, r3, #1
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	6251      	str	r1, [r2, #36]	; 0x24
 800101a:	781a      	ldrb	r2, [r3, #0]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001026:	b29b      	uxth	r3, r3
 8001028:	3b01      	subs	r3, #1
 800102a:	b29a      	uxth	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001034:	3b01      	subs	r3, #1
 8001036:	b29a      	uxth	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	6a39      	ldr	r1, [r7, #32]
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f000 fcb7 	bl	80019b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00f      	beq.n	800106c <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	2b04      	cmp	r3, #4
 8001052:	d109      	bne.n	8001068 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001062:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e01c      	b.n	80010a2 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e01a      	b.n	80010a2 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001070:	2b00      	cmp	r3, #0
 8001072:	d194      	bne.n	8000f9e <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2220      	movs	r2, #32
 8001088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	e000      	b.n	80010a2 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80010a0:	2302      	movs	r3, #2
  }
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	00100002 	.word	0x00100002
 80010b0:	ffff0000 	.word	0xffff0000

080010b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08c      	sub	sp, #48	; 0x30
 80010b8:	af02      	add	r7, sp, #8
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	461a      	mov	r2, r3
 80010c0:	460b      	mov	r3, r1
 80010c2:	817b      	strh	r3, [r7, #10]
 80010c4:	4613      	mov	r3, r2
 80010c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80010cc:	f7ff fb34 	bl	8000738 <HAL_GetTick>
 80010d0:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b20      	cmp	r3, #32
 80010dc:	f040 821d 	bne.w	800151a <HAL_I2C_Master_Receive+0x466>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2319      	movs	r3, #25
 80010e6:	2201      	movs	r2, #1
 80010e8:	4987      	ldr	r1, [pc, #540]	; (8001308 <HAL_I2C_Master_Receive+0x254>)
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f000 fb66 	bl	80017bc <I2C_WaitOnFlagUntilTimeout>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80010f6:	2302      	movs	r3, #2
 80010f8:	e210      	b.n	800151c <HAL_I2C_Master_Receive+0x468>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001100:	2b01      	cmp	r3, #1
 8001102:	d101      	bne.n	8001108 <HAL_I2C_Master_Receive+0x54>
 8001104:	2302      	movs	r3, #2
 8001106:	e209      	b.n	800151c <HAL_I2C_Master_Receive+0x468>
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2201      	movs	r2, #1
 800110c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	2b01      	cmp	r3, #1
 800111c:	d007      	beq.n	800112e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f042 0201 	orr.w	r2, r2, #1
 800112c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800113c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2222      	movs	r2, #34	; 0x22
 8001142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2210      	movs	r2, #16
 800114a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2200      	movs	r2, #0
 8001152:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	893a      	ldrh	r2, [r7, #8]
 800115e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4a6a      	ldr	r2, [pc, #424]	; (800130c <HAL_I2C_Master_Receive+0x258>)
 8001164:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800116a:	b29a      	uxth	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001170:	8979      	ldrh	r1, [r7, #10]
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f000 fa58 	bl	800162c <I2C_MasterRequestRead>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00f      	beq.n	80011a2 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	2b04      	cmp	r3, #4
 8001188:	d105      	bne.n	8001196 <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e1c2      	b.n	800151c <HAL_I2C_Master_Receive+0x468>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e1bc      	b.n	800151c <HAL_I2C_Master_Receive+0x468>
      }
    }

    if(hi2c->XferSize == 0U)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d113      	bne.n	80011d2 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	623b      	str	r3, [r7, #32]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	623b      	str	r3, [r7, #32]
 80011be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	e190      	b.n	80014f4 <HAL_I2C_Master_Receive+0x440>
    }
    else if(hi2c->XferSize == 1U)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d11d      	bne.n	8001216 <HAL_I2C_Master_Receive+0x162>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011e8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ea:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001210:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001212:	b662      	cpsie	i
 8001214:	e16e      	b.n	80014f4 <HAL_I2C_Master_Receive+0x440>

      /* Re-enable IRQs */
      __enable_irq(); 
    }
    else if(hi2c->XferSize == 2U)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800121a:	2b02      	cmp	r3, #2
 800121c:	d11d      	bne.n	800125a <HAL_I2C_Master_Receive+0x1a6>
    {
      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800122c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800122e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001230:	2300      	movs	r3, #0
 8001232:	61bb      	str	r3, [r7, #24]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	61bb      	str	r3, [r7, #24]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	61bb      	str	r3, [r7, #24]
 8001244:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001254:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001256:	b662      	cpsie	i
 8001258:	e14c      	b.n	80014f4 <HAL_I2C_Master_Receive+0x440>
      __enable_irq(); 
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001268:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8001280:	e138      	b.n	80014f4 <HAL_I2C_Master_Receive+0x440>
    {
      if(hi2c->XferSize <= 3U)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001286:	2b03      	cmp	r3, #3
 8001288:	f200 80ef 	bhi.w	800146a <HAL_I2C_Master_Receive+0x3b6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001290:	2b01      	cmp	r3, #1
 8001292:	d127      	bne.n	80012e4 <HAL_I2C_Master_Receive+0x230>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001296:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f000 fbc8 	bl	8001a2e <I2C_WaitOnRXNEFlagUntilTimeout>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d007      	beq.n	80012b4 <HAL_I2C_Master_Receive+0x200>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	2b20      	cmp	r3, #32
 80012aa:	d101      	bne.n	80012b0 <HAL_I2C_Master_Receive+0x1fc>
            {
              return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e135      	b.n	800151c <HAL_I2C_Master_Receive+0x468>
            }
            else
            {
              return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e133      	b.n	800151c <HAL_I2C_Master_Receive+0x468>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6918      	ldr	r0, [r3, #16]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012be:	1c59      	adds	r1, r3, #1
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	6251      	str	r1, [r2, #36]	; 0x24
 80012c4:	b2c2      	uxtb	r2, r0
 80012c6:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012cc:	3b01      	subs	r3, #1
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012d8:	b29b      	uxth	r3, r3
 80012da:	3b01      	subs	r3, #1
 80012dc:	b29a      	uxth	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80012e2:	e107      	b.n	80014f4 <HAL_I2C_Master_Receive+0x440>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d14c      	bne.n	8001386 <HAL_I2C_Master_Receive+0x2d2>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f2:	2200      	movs	r2, #0
 80012f4:	4906      	ldr	r1, [pc, #24]	; (8001310 <HAL_I2C_Master_Receive+0x25c>)
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f000 fa60 	bl	80017bc <I2C_WaitOnFlagUntilTimeout>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d008      	beq.n	8001314 <HAL_I2C_Master_Receive+0x260>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e10a      	b.n	800151c <HAL_I2C_Master_Receive+0x468>
 8001306:	bf00      	nop
 8001308:	00100002 	.word	0x00100002
 800130c:	ffff0000 	.word	0xffff0000
 8001310:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001314:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
           __disable_irq();

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001324:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6918      	ldr	r0, [r3, #16]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001330:	1c59      	adds	r1, r3, #1
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	6251      	str	r1, [r2, #36]	; 0x24
 8001336:	b2c2      	uxtb	r2, r0
 8001338:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800133e:	3b01      	subs	r3, #1
 8001340:	b29a      	uxth	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800134a:	b29b      	uxth	r3, r3
 800134c:	3b01      	subs	r3, #1
 800134e:	b29a      	uxth	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001354:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6918      	ldr	r0, [r3, #16]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001360:	1c59      	adds	r1, r3, #1
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	6251      	str	r1, [r2, #36]	; 0x24
 8001366:	b2c2      	uxtb	r2, r0
 8001368:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800136e:	3b01      	subs	r3, #1
 8001370:	b29a      	uxth	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800137a:	b29b      	uxth	r3, r3
 800137c:	3b01      	subs	r3, #1
 800137e:	b29a      	uxth	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001384:	e0b6      	b.n	80014f4 <HAL_I2C_Master_Receive+0x440>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800138c:	2200      	movs	r2, #0
 800138e:	4965      	ldr	r1, [pc, #404]	; (8001524 <HAL_I2C_Master_Receive+0x470>)
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	f000 fa13 	bl	80017bc <I2C_WaitOnFlagUntilTimeout>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <HAL_I2C_Master_Receive+0x2ec>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e0bd      	b.n	800151c <HAL_I2C_Master_Receive+0x468>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80013b0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6918      	ldr	r0, [r3, #16]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013bc:	1c59      	adds	r1, r3, #1
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	6251      	str	r1, [r2, #36]	; 0x24
 80013c2:	b2c2      	uxtb	r2, r0
 80013c4:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ca:	3b01      	subs	r3, #1
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	3b01      	subs	r3, #1
 80013da:	b29a      	uxth	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013e6:	2200      	movs	r2, #0
 80013e8:	494e      	ldr	r1, [pc, #312]	; (8001524 <HAL_I2C_Master_Receive+0x470>)
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f000 f9e6 	bl	80017bc <I2C_WaitOnFlagUntilTimeout>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_I2C_Master_Receive+0x346>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e090      	b.n	800151c <HAL_I2C_Master_Receive+0x468>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001408:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6918      	ldr	r0, [r3, #16]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001414:	1c59      	adds	r1, r3, #1
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	6251      	str	r1, [r2, #36]	; 0x24
 800141a:	b2c2      	uxtb	r2, r0
 800141c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001422:	3b01      	subs	r3, #1
 8001424:	b29a      	uxth	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800142e:	b29b      	uxth	r3, r3
 8001430:	3b01      	subs	r3, #1
 8001432:	b29a      	uxth	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001438:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq(); 

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6918      	ldr	r0, [r3, #16]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001444:	1c59      	adds	r1, r3, #1
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	6251      	str	r1, [r2, #36]	; 0x24
 800144a:	b2c2      	uxtb	r2, r0
 800144c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001452:	3b01      	subs	r3, #1
 8001454:	b29a      	uxth	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800145e:	b29b      	uxth	r3, r3
 8001460:	3b01      	subs	r3, #1
 8001462:	b29a      	uxth	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001468:	e044      	b.n	80014f4 <HAL_I2C_Master_Receive+0x440>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800146a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800146c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f000 fadd 	bl	8001a2e <I2C_WaitOnRXNEFlagUntilTimeout>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d007      	beq.n	800148a <HAL_I2C_Master_Receive+0x3d6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	2b20      	cmp	r3, #32
 8001480:	d101      	bne.n	8001486 <HAL_I2C_Master_Receive+0x3d2>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e04a      	b.n	800151c <HAL_I2C_Master_Receive+0x468>
          }
          else
          {
            return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e048      	b.n	800151c <HAL_I2C_Master_Receive+0x468>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6918      	ldr	r0, [r3, #16]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	1c59      	adds	r1, r3, #1
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	6251      	str	r1, [r2, #36]	; 0x24
 800149a:	b2c2      	uxtb	r2, r0
 800149c:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a2:	3b01      	subs	r3, #1
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	3b01      	subs	r3, #1
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	d116      	bne.n	80014f4 <HAL_I2C_Master_Receive+0x440>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6918      	ldr	r0, [r3, #16]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	1c59      	adds	r1, r3, #1
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	6251      	str	r1, [r2, #36]	; 0x24
 80014d6:	b2c2      	uxtb	r2, r0
 80014d8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014de:	3b01      	subs	r3, #1
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	3b01      	subs	r3, #1
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f47f aec2 	bne.w	8001282 <HAL_I2C_Master_Receive+0x1ce>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2220      	movs	r2, #32
 8001502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	e000      	b.n	800151c <HAL_I2C_Master_Receive+0x468>
  }
  else
  {
    return HAL_BUSY;
 800151a:	2302      	movs	r3, #2
  }
}
 800151c:	4618      	mov	r0, r3
 800151e:	3728      	adds	r7, #40	; 0x28
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	00010004 	.word	0x00010004

08001528 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af02      	add	r7, sp, #8
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	460b      	mov	r3, r1
 8001536:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	2b04      	cmp	r3, #4
 8001542:	d006      	beq.n	8001552 <I2C_MasterRequestWrite+0x2a>
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d003      	beq.n	8001552 <I2C_MasterRequestWrite+0x2a>
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001550:	d108      	bne.n	8001564 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	e00b      	b.n	800157c <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001568:	2b12      	cmp	r3, #18
 800156a:	d107      	bne.n	800157c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800157a:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f000 f917 	bl	80017bc <I2C_WaitOnFlagUntilTimeout>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e041      	b.n	800161c <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015a0:	d108      	bne.n	80015b4 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80015a2:	897b      	ldrh	r3, [r7, #10]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80015b0:	611a      	str	r2, [r3, #16]
 80015b2:	e021      	b.n	80015f8 <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80015b4:	897b      	ldrh	r3, [r7, #10]
 80015b6:	11db      	asrs	r3, r3, #7
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	f003 0306 	and.w	r3, r3, #6
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	f063 030f 	orn	r3, r3, #15
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	4914      	ldr	r1, [pc, #80]	; (8001624 <I2C_MasterRequestWrite+0xfc>)
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f000 f943 	bl	800185e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d007      	beq.n	80015ee <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	d101      	bne.n	80015ea <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e018      	b.n	800161c <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e016      	b.n	800161c <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80015ee:	897b      	ldrh	r3, [r7, #10]
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	490a      	ldr	r1, [pc, #40]	; (8001628 <I2C_MasterRequestWrite+0x100>)
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 f92d 	bl	800185e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d007      	beq.n	800161a <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	2b04      	cmp	r3, #4
 8001610:	d101      	bne.n	8001616 <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e002      	b.n	800161c <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e000      	b.n	800161c <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	00010008 	.word	0x00010008
 8001628:	00010002 	.word	0x00010002

0800162c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af02      	add	r7, sp, #8
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	460b      	mov	r3, r1
 800163a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001640:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001650:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	2b04      	cmp	r3, #4
 8001656:	d006      	beq.n	8001666 <I2C_MasterRequestRead+0x3a>
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d003      	beq.n	8001666 <I2C_MasterRequestRead+0x3a>
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001664:	d108      	bne.n	8001678 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	e00b      	b.n	8001690 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	2b11      	cmp	r3, #17
 800167e:	d107      	bne.n	8001690 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800168e:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f000 f88d 	bl	80017bc <I2C_WaitOnFlagUntilTimeout>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e07f      	b.n	80017ac <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016b4:	d108      	bne.n	80016c8 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80016b6:	897b      	ldrh	r3, [r7, #10]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	611a      	str	r2, [r3, #16]
 80016c6:	e05f      	b.n	8001788 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80016c8:	897b      	ldrh	r3, [r7, #10]
 80016ca:	11db      	asrs	r3, r3, #7
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	f003 0306 	and.w	r3, r3, #6
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	f063 030f 	orn	r3, r3, #15
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	4933      	ldr	r1, [pc, #204]	; (80017b4 <I2C_MasterRequestRead+0x188>)
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f000 f8b9 	bl	800185e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d007      	beq.n	8001702 <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	d101      	bne.n	80016fe <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e056      	b.n	80017ac <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e054      	b.n	80017ac <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001702:	897b      	ldrh	r3, [r7, #10]
 8001704:	b2da      	uxtb	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4929      	ldr	r1, [pc, #164]	; (80017b8 <I2C_MasterRequestRead+0x18c>)
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f000 f8a3 	bl	800185e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d007      	beq.n	800172e <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	2b04      	cmp	r3, #4
 8001724:	d101      	bne.n	800172a <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e040      	b.n	80017ac <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e03e      	b.n	80017ac <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001752:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f000 f82b 	bl	80017bc <I2C_WaitOnFlagUntilTimeout>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e01d      	b.n	80017ac <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001770:	897b      	ldrh	r3, [r7, #10]
 8001772:	11db      	asrs	r3, r3, #7
 8001774:	b2db      	uxtb	r3, r3
 8001776:	f003 0306 	and.w	r3, r3, #6
 800177a:	b2db      	uxtb	r3, r3
 800177c:	f063 030e 	orn	r3, r3, #14
 8001780:	b2da      	uxtb	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	490a      	ldr	r1, [pc, #40]	; (80017b8 <I2C_MasterRequestRead+0x18c>)
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f000 f865 	bl	800185e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d007      	beq.n	80017aa <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d101      	bne.n	80017a6 <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e002      	b.n	80017ac <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e000      	b.n	80017ac <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	00010008 	.word	0x00010008
 80017b8:	00010002 	.word	0x00010002

080017bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	4613      	mov	r3, r2
 80017ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80017cc:	e01f      	b.n	800180e <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d4:	d01b      	beq.n	800180e <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d007      	beq.n	80017ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80017dc:	f7fe ffac 	bl	8000738 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d210      	bcs.n	800180e <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2220      	movs	r2, #32
 80017f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e023      	b.n	8001856 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	0c1b      	lsrs	r3, r3, #16
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b01      	cmp	r3, #1
 8001816:	d10d      	bne.n	8001834 <I2C_WaitOnFlagUntilTimeout+0x78>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	43da      	mvns	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4013      	ands	r3, r2
 8001824:	b29b      	uxth	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	bf0c      	ite	eq
 800182a:	2301      	moveq	r3, #1
 800182c:	2300      	movne	r3, #0
 800182e:	b2db      	uxtb	r3, r3
 8001830:	461a      	mov	r2, r3
 8001832:	e00c      	b.n	800184e <I2C_WaitOnFlagUntilTimeout+0x92>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	43da      	mvns	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4013      	ands	r3, r2
 8001840:	b29b      	uxth	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	bf0c      	ite	eq
 8001846:	2301      	moveq	r3, #1
 8001848:	2300      	movne	r3, #0
 800184a:	b2db      	uxtb	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	429a      	cmp	r2, r3
 8001852:	d0bc      	beq.n	80017ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b084      	sub	sp, #16
 8001862:	af00      	add	r7, sp, #0
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800186c:	e040      	b.n	80018f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800187c:	d11c      	bne.n	80018b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800188c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001896:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2204      	movs	r2, #4
 800189c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2220      	movs	r2, #32
 80018a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e03c      	b.n	8001932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018be:	d017      	beq.n	80018f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d007      	beq.n	80018d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 80018c6:	f7fe ff37 	bl	8000738 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d20c      	bcs.n	80018f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2220      	movs	r2, #32
 80018e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e020      	b.n	8001932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	0c1b      	lsrs	r3, r3, #16
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d10c      	bne.n	8001914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	43da      	mvns	r2, r3
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	4013      	ands	r3, r2
 8001906:	b29b      	uxth	r3, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	bf14      	ite	ne
 800190c:	2301      	movne	r3, #1
 800190e:	2300      	moveq	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	e00b      	b.n	800192c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	43da      	mvns	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	4013      	ands	r3, r2
 8001920:	b29b      	uxth	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	bf14      	ite	ne
 8001926:	2301      	movne	r3, #1
 8001928:	2300      	moveq	r3, #0
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d19e      	bne.n	800186e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 800193a:	b580      	push	{r7, lr}
 800193c:	b084      	sub	sp, #16
 800193e:	af00      	add	r7, sp, #0
 8001940:	60f8      	str	r0, [r7, #12]
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001946:	e029      	b.n	800199c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f000 f8ba 	bl	8001ac2 <I2C_IsAcknowledgeFailed>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e029      	b.n	80019ac <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195e:	d01d      	beq.n	800199c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d007      	beq.n	8001976 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001966:	f7fe fee7 	bl	8000738 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	429a      	cmp	r2, r3
 8001974:	d212      	bcs.n	800199c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f043 0220 	orr.w	r2, r3, #32
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2220      	movs	r2, #32
 800198c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e007      	b.n	80019ac <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a6:	2b80      	cmp	r3, #128	; 0x80
 80019a8:	d1ce      	bne.n	8001948 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80019c0:	e029      	b.n	8001a16 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 f87d 	bl	8001ac2 <I2C_IsAcknowledgeFailed>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e029      	b.n	8001a26 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d8:	d01d      	beq.n	8001a16 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d007      	beq.n	80019f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80019e0:	f7fe feaa 	bl	8000738 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d212      	bcs.n	8001a16 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	f043 0220 	orr.w	r2, r3, #32
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2220      	movs	r2, #32
 8001a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e007      	b.n	8001a26 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d1ce      	bne.n	80019c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b084      	sub	sp, #16
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a3a:	e036      	b.n	8001aaa <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	f003 0310 	and.w	r3, r3, #16
 8001a46:	2b10      	cmp	r3, #16
 8001a48:	d114      	bne.n	8001a74 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f06f 0210 	mvn.w	r2, #16
 8001a52:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2220      	movs	r2, #32
 8001a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e022      	b.n	8001aba <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8001a7a:	f7fe fe5d 	bl	8000738 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d20f      	bcs.n	8001aaa <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f043 0220 	orr.w	r2, r3, #32
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2220      	movs	r2, #32
 8001a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e007      	b.n	8001aba <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab4:	2b40      	cmp	r3, #64	; 0x40
 8001ab6:	d1c1      	bne.n	8001a3c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad8:	d114      	bne.n	8001b04 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ae2:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2220      	movs	r2, #32
 8001af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e000      	b.n	8001b06 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 8087 	beq.w	8001c38 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b2a:	4b92      	ldr	r3, [pc, #584]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d00c      	beq.n	8001b50 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b36:	4b8f      	ldr	r3, [pc, #572]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d112      	bne.n	8001b68 <HAL_RCC_OscConfig+0x58>
 8001b42:	4b8c      	ldr	r3, [pc, #560]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4e:	d10b      	bne.n	8001b68 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b50:	4b88      	ldr	r3, [pc, #544]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d06c      	beq.n	8001c36 <HAL_RCC_OscConfig+0x126>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d168      	bne.n	8001c36 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e22d      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b70:	d106      	bne.n	8001b80 <HAL_RCC_OscConfig+0x70>
 8001b72:	4b80      	ldr	r3, [pc, #512]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a7f      	ldr	r2, [pc, #508]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	e02e      	b.n	8001bde <HAL_RCC_OscConfig+0xce>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10c      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x92>
 8001b88:	4b7a      	ldr	r3, [pc, #488]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a79      	ldr	r2, [pc, #484]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b77      	ldr	r3, [pc, #476]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a76      	ldr	r2, [pc, #472]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	e01d      	b.n	8001bde <HAL_RCC_OscConfig+0xce>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001baa:	d10c      	bne.n	8001bc6 <HAL_RCC_OscConfig+0xb6>
 8001bac:	4b71      	ldr	r3, [pc, #452]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a70      	ldr	r2, [pc, #448]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001bb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	4b6e      	ldr	r3, [pc, #440]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a6d      	ldr	r2, [pc, #436]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	e00b      	b.n	8001bde <HAL_RCC_OscConfig+0xce>
 8001bc6:	4b6b      	ldr	r3, [pc, #428]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a6a      	ldr	r2, [pc, #424]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	4b68      	ldr	r3, [pc, #416]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a67      	ldr	r2, [pc, #412]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001bd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bdc:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d013      	beq.n	8001c0e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be6:	f7fe fda7 	bl	8000738 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bee:	f7fe fda3 	bl	8000738 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b64      	cmp	r3, #100	; 0x64
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e1e1      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c00:	4b5c      	ldr	r3, [pc, #368]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f0      	beq.n	8001bee <HAL_RCC_OscConfig+0xde>
 8001c0c:	e014      	b.n	8001c38 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0e:	f7fe fd93 	bl	8000738 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c16:	f7fe fd8f 	bl	8000738 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b64      	cmp	r3, #100	; 0x64
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e1cd      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c28:	4b52      	ldr	r3, [pc, #328]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1f0      	bne.n	8001c16 <HAL_RCC_OscConfig+0x106>
 8001c34:	e000      	b.n	8001c38 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c36:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d063      	beq.n	8001d0c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c44:	4b4b      	ldr	r3, [pc, #300]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 030c 	and.w	r3, r3, #12
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00b      	beq.n	8001c68 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c50:	4b48      	ldr	r3, [pc, #288]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 030c 	and.w	r3, r3, #12
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d11c      	bne.n	8001c96 <HAL_RCC_OscConfig+0x186>
 8001c5c:	4b45      	ldr	r3, [pc, #276]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d116      	bne.n	8001c96 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c68:	4b42      	ldr	r3, [pc, #264]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_OscConfig+0x170>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d001      	beq.n	8001c80 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e1a1      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c80:	4b3c      	ldr	r3, [pc, #240]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4939      	ldr	r1, [pc, #228]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c94:	e03a      	b.n	8001d0c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d020      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c9e:	4b36      	ldr	r3, [pc, #216]	; (8001d78 <HAL_RCC_OscConfig+0x268>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7fe fd48 	bl	8000738 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cac:	f7fe fd44 	bl	8000738 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e182      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbe:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cca:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4926      	ldr	r1, [pc, #152]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]
 8001cde:	e015      	b.n	8001d0c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce0:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <HAL_RCC_OscConfig+0x268>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce6:	f7fe fd27 	bl	8000738 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cee:	f7fe fd23 	bl	8000738 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e161      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d00:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f0      	bne.n	8001cee <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d039      	beq.n	8001d8c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d019      	beq.n	8001d54 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d20:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d26:	f7fe fd07 	bl	8000738 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d2e:	f7fe fd03 	bl	8000738 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e141      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <HAL_RCC_OscConfig+0x264>)
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f000 fae3 	bl	8002318 <RCC_Delay>
 8001d52:	e01b      	b.n	8001d8c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5a:	f7fe fced 	bl	8000738 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d60:	e00e      	b.n	8001d80 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d62:	f7fe fce9 	bl	8000738 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d907      	bls.n	8001d80 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e127      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4b4>
 8001d74:	40021000 	.word	0x40021000
 8001d78:	42420000 	.word	0x42420000
 8001d7c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d80:	4b92      	ldr	r3, [pc, #584]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1ea      	bne.n	8001d62 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80a6 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9e:	4b8b      	ldr	r3, [pc, #556]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10d      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	4b88      	ldr	r3, [pc, #544]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4a87      	ldr	r2, [pc, #540]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db4:	61d3      	str	r3, [r2, #28]
 8001db6:	4b85      	ldr	r3, [pc, #532]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc6:	4b82      	ldr	r3, [pc, #520]	; (8001fd0 <HAL_RCC_OscConfig+0x4c0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d118      	bne.n	8001e04 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dd2:	4b7f      	ldr	r3, [pc, #508]	; (8001fd0 <HAL_RCC_OscConfig+0x4c0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a7e      	ldr	r2, [pc, #504]	; (8001fd0 <HAL_RCC_OscConfig+0x4c0>)
 8001dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dde:	f7fe fcab 	bl	8000738 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de6:	f7fe fca7 	bl	8000738 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b64      	cmp	r3, #100	; 0x64
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e0e5      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df8:	4b75      	ldr	r3, [pc, #468]	; (8001fd0 <HAL_RCC_OscConfig+0x4c0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d106      	bne.n	8001e1a <HAL_RCC_OscConfig+0x30a>
 8001e0c:	4b6f      	ldr	r3, [pc, #444]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4a6e      	ldr	r2, [pc, #440]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	6213      	str	r3, [r2, #32]
 8001e18:	e02d      	b.n	8001e76 <HAL_RCC_OscConfig+0x366>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x32c>
 8001e22:	4b6a      	ldr	r3, [pc, #424]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	4a69      	ldr	r2, [pc, #420]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	6213      	str	r3, [r2, #32]
 8001e2e:	4b67      	ldr	r3, [pc, #412]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	4a66      	ldr	r2, [pc, #408]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001e34:	f023 0304 	bic.w	r3, r3, #4
 8001e38:	6213      	str	r3, [r2, #32]
 8001e3a:	e01c      	b.n	8001e76 <HAL_RCC_OscConfig+0x366>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b05      	cmp	r3, #5
 8001e42:	d10c      	bne.n	8001e5e <HAL_RCC_OscConfig+0x34e>
 8001e44:	4b61      	ldr	r3, [pc, #388]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	4a60      	ldr	r2, [pc, #384]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6213      	str	r3, [r2, #32]
 8001e50:	4b5e      	ldr	r3, [pc, #376]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	4a5d      	ldr	r2, [pc, #372]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6213      	str	r3, [r2, #32]
 8001e5c:	e00b      	b.n	8001e76 <HAL_RCC_OscConfig+0x366>
 8001e5e:	4b5b      	ldr	r3, [pc, #364]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	4a5a      	ldr	r2, [pc, #360]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	6213      	str	r3, [r2, #32]
 8001e6a:	4b58      	ldr	r3, [pc, #352]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	4a57      	ldr	r2, [pc, #348]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001e70:	f023 0304 	bic.w	r3, r3, #4
 8001e74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d015      	beq.n	8001eaa <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7e:	f7fe fc5b 	bl	8000738 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e84:	e00a      	b.n	8001e9c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e86:	f7fe fc57 	bl	8000738 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e093      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9c:	4b4b      	ldr	r3, [pc, #300]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0ee      	beq.n	8001e86 <HAL_RCC_OscConfig+0x376>
 8001ea8:	e014      	b.n	8001ed4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eaa:	f7fe fc45 	bl	8000738 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb2:	f7fe fc41 	bl	8000738 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e07d      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec8:	4b40      	ldr	r3, [pc, #256]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1ee      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ed4:	7dfb      	ldrb	r3, [r7, #23]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d105      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eda:	4b3c      	ldr	r3, [pc, #240]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	4a3b      	ldr	r2, [pc, #236]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d069      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eee:	4b37      	ldr	r3, [pc, #220]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d061      	beq.n	8001fbe <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d146      	bne.n	8001f90 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f02:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7fe fc16 	bl	8000738 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f10:	f7fe fc12 	bl	8000738 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e050      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f22:	4b2a      	ldr	r3, [pc, #168]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f36:	d108      	bne.n	8001f4a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f38:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4921      	ldr	r1, [pc, #132]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a19      	ldr	r1, [r3, #32]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	430b      	orrs	r3, r1
 8001f5c:	491b      	ldr	r1, [pc, #108]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f62:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7fe fbe6 	bl	8000738 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f70:	f7fe fbe2 	bl	8000738 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e020      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f82:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0x460>
 8001f8e:	e018      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f90:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f96:	f7fe fbcf 	bl	8000738 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9e:	f7fe fbcb 	bl	8000738 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e009      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1f0      	bne.n	8001f9e <HAL_RCC_OscConfig+0x48e>
 8001fbc:	e001      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40007000 	.word	0x40007000
 8001fd4:	42420060 	.word	0x42420060

08001fd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001fe6:	4b7e      	ldr	r3, [pc, #504]	; (80021e0 <HAL_RCC_ClockConfig+0x208>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d910      	bls.n	8002016 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff4:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_RCC_ClockConfig+0x208>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 0207 	bic.w	r2, r3, #7
 8001ffc:	4978      	ldr	r1, [pc, #480]	; (80021e0 <HAL_RCC_ClockConfig+0x208>)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002004:	4b76      	ldr	r3, [pc, #472]	; (80021e0 <HAL_RCC_ClockConfig+0x208>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d001      	beq.n	8002016 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e0e0      	b.n	80021d8 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d020      	beq.n	8002064 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b00      	cmp	r3, #0
 800202c:	d005      	beq.n	800203a <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800202e:	4b6d      	ldr	r3, [pc, #436]	; (80021e4 <HAL_RCC_ClockConfig+0x20c>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4a6c      	ldr	r2, [pc, #432]	; (80021e4 <HAL_RCC_ClockConfig+0x20c>)
 8002034:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002038:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002046:	4b67      	ldr	r3, [pc, #412]	; (80021e4 <HAL_RCC_ClockConfig+0x20c>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	4a66      	ldr	r2, [pc, #408]	; (80021e4 <HAL_RCC_ClockConfig+0x20c>)
 800204c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002050:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002052:	4b64      	ldr	r3, [pc, #400]	; (80021e4 <HAL_RCC_ClockConfig+0x20c>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	4961      	ldr	r1, [pc, #388]	; (80021e4 <HAL_RCC_ClockConfig+0x20c>)
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d06a      	beq.n	8002146 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d107      	bne.n	8002088 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002078:	4b5a      	ldr	r3, [pc, #360]	; (80021e4 <HAL_RCC_ClockConfig+0x20c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d115      	bne.n	80020b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0a7      	b.n	80021d8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b02      	cmp	r3, #2
 800208e:	d107      	bne.n	80020a0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002090:	4b54      	ldr	r3, [pc, #336]	; (80021e4 <HAL_RCC_ClockConfig+0x20c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d109      	bne.n	80020b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e09b      	b.n	80021d8 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a0:	4b50      	ldr	r3, [pc, #320]	; (80021e4 <HAL_RCC_ClockConfig+0x20c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e093      	b.n	80021d8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b0:	4b4c      	ldr	r3, [pc, #304]	; (80021e4 <HAL_RCC_ClockConfig+0x20c>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f023 0203 	bic.w	r2, r3, #3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4949      	ldr	r1, [pc, #292]	; (80021e4 <HAL_RCC_ClockConfig+0x20c>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c2:	f7fe fb39 	bl	8000738 <HAL_GetTick>
 80020c6:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d112      	bne.n	80020f6 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d0:	e00a      	b.n	80020e8 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d2:	f7fe fb31 	bl	8000738 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e077      	b.n	80021d8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020e8:	4b3e      	ldr	r3, [pc, #248]	; (80021e4 <HAL_RCC_ClockConfig+0x20c>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 030c 	and.w	r3, r3, #12
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d1ee      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xfa>
 80020f4:	e027      	b.n	8002146 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d11d      	bne.n	800213a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002100:	f7fe fb1a 	bl	8000738 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	; 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e060      	b.n	80021d8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002116:	4b33      	ldr	r3, [pc, #204]	; (80021e4 <HAL_RCC_ClockConfig+0x20c>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b08      	cmp	r3, #8
 8002120:	d1ee      	bne.n	8002100 <HAL_RCC_ClockConfig+0x128>
 8002122:	e010      	b.n	8002146 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002124:	f7fe fb08 	bl	8000738 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e04e      	b.n	80021d8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800213a:	4b2a      	ldr	r3, [pc, #168]	; (80021e4 <HAL_RCC_ClockConfig+0x20c>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1ee      	bne.n	8002124 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <HAL_RCC_ClockConfig+0x208>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d210      	bcs.n	8002176 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002154:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <HAL_RCC_ClockConfig+0x208>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f023 0207 	bic.w	r2, r3, #7
 800215c:	4920      	ldr	r1, [pc, #128]	; (80021e0 <HAL_RCC_ClockConfig+0x208>)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	4313      	orrs	r3, r2
 8002162:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002164:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <HAL_RCC_ClockConfig+0x208>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d001      	beq.n	8002176 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e030      	b.n	80021d8 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	2b00      	cmp	r3, #0
 8002180:	d008      	beq.n	8002194 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002182:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <HAL_RCC_ClockConfig+0x20c>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	4915      	ldr	r1, [pc, #84]	; (80021e4 <HAL_RCC_ClockConfig+0x20c>)
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	2b00      	cmp	r3, #0
 800219e:	d009      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021a0:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <HAL_RCC_ClockConfig+0x20c>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	490d      	ldr	r1, [pc, #52]	; (80021e4 <HAL_RCC_ClockConfig+0x20c>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021b4:	f000 f81c 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 80021b8:	4601      	mov	r1, r0
 80021ba:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <HAL_RCC_ClockConfig+0x20c>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	091b      	lsrs	r3, r3, #4
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	4a08      	ldr	r2, [pc, #32]	; (80021e8 <HAL_RCC_ClockConfig+0x210>)
 80021c6:	5cd3      	ldrb	r3, [r2, r3]
 80021c8:	fa21 f303 	lsr.w	r3, r1, r3
 80021cc:	4a07      	ldr	r2, [pc, #28]	; (80021ec <HAL_RCC_ClockConfig+0x214>)
 80021ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80021d0:	2000      	movs	r0, #0
 80021d2:	f7fe fa6f 	bl	80006b4 <HAL_InitTick>
  
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40022000 	.word	0x40022000
 80021e4:	40021000 	.word	0x40021000
 80021e8:	080026f0 	.word	0x080026f0
 80021ec:	20000000 	.word	0x20000000

080021f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f0:	b490      	push	{r4, r7}
 80021f2:	b08a      	sub	sp, #40	; 0x28
 80021f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021f6:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021f8:	1d3c      	adds	r4, r7, #4
 80021fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002200:	4b28      	ldr	r3, [pc, #160]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800221a:	4b23      	ldr	r3, [pc, #140]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b04      	cmp	r3, #4
 8002228:	d002      	beq.n	8002230 <HAL_RCC_GetSysClockFreq+0x40>
 800222a:	2b08      	cmp	r3, #8
 800222c:	d003      	beq.n	8002236 <HAL_RCC_GetSysClockFreq+0x46>
 800222e:	e02d      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002230:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002232:	623b      	str	r3, [r7, #32]
      break;
 8002234:	e02d      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	0c9b      	lsrs	r3, r3, #18
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002242:	4413      	add	r3, r2
 8002244:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002248:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d013      	beq.n	800227c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002254:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	0c5b      	lsrs	r3, r3, #17
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002262:	4413      	add	r3, r2
 8002264:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002268:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	4a0f      	ldr	r2, [pc, #60]	; (80022ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800226e:	fb02 f203 	mul.w	r2, r2, r3
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	fbb2 f3f3 	udiv	r3, r2, r3
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
 800227a:	e004      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	4a0c      	ldr	r2, [pc, #48]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002280:	fb02 f303 	mul.w	r3, r2, r3
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	623b      	str	r3, [r7, #32]
      break;
 800228a:	e002      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800228c:	4b07      	ldr	r3, [pc, #28]	; (80022ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800228e:	623b      	str	r3, [r7, #32]
      break;
 8002290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002292:	6a3b      	ldr	r3, [r7, #32]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3728      	adds	r7, #40	; 0x28
 8002298:	46bd      	mov	sp, r7
 800229a:	bc90      	pop	{r4, r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	080026dc 	.word	0x080026dc
 80022a4:	080026ec 	.word	0x080026ec
 80022a8:	40021000 	.word	0x40021000
 80022ac:	007a1200 	.word	0x007a1200
 80022b0:	003d0900 	.word	0x003d0900

080022b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022b8:	4b02      	ldr	r3, [pc, #8]	; (80022c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	20000000 	.word	0x20000000

080022c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022cc:	f7ff fff2 	bl	80022b4 <HAL_RCC_GetHCLKFreq>
 80022d0:	4601      	mov	r1, r0
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	0a1b      	lsrs	r3, r3, #8
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	4a03      	ldr	r2, [pc, #12]	; (80022ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80022de:	5cd3      	ldrb	r3, [r2, r3]
 80022e0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80022e4:	4618      	mov	r0, r3
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40021000 	.word	0x40021000
 80022ec:	08002700 	.word	0x08002700

080022f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022f4:	f7ff ffde 	bl	80022b4 <HAL_RCC_GetHCLKFreq>
 80022f8:	4601      	mov	r1, r0
 80022fa:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	0adb      	lsrs	r3, r3, #11
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	4a03      	ldr	r2, [pc, #12]	; (8002314 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002306:	5cd3      	ldrb	r3, [r2, r3]
 8002308:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800230c:	4618      	mov	r0, r3
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40021000 	.word	0x40021000
 8002314:	08002700 	.word	0x08002700

08002318 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <RCC_Delay+0x34>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <RCC_Delay+0x38>)
 8002326:	fba2 2303 	umull	r2, r3, r2, r3
 800232a:	0a5b      	lsrs	r3, r3, #9
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	fb02 f303 	mul.w	r3, r2, r3
 8002332:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002334:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1e5a      	subs	r2, r3, #1
 800233a:	60fa      	str	r2, [r7, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1f9      	bne.n	8002334 <RCC_Delay+0x1c>
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20000000 	.word	0x20000000
 8002350:	10624dd3 	.word	0x10624dd3

08002354 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e03f      	b.n	80023e6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7fe f8e0 	bl	8000540 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2224      	movs	r2, #36	; 0x24
 8002384:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002396:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f829 	bl	80023f0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695a      	ldr	r2, [r3, #20]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023bc:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023cc:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023f0:	b5b0      	push	{r4, r5, r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	4313      	orrs	r3, r2
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4313      	orrs	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002432:	f023 030c 	bic.w	r3, r3, #12
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	68f9      	ldr	r1, [r7, #12]
 800243c:	430b      	orrs	r3, r1
 800243e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699a      	ldr	r2, [r3, #24]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a6f      	ldr	r2, [pc, #444]	; (8002618 <UART_SetConfig+0x228>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d16b      	bne.n	8002538 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002460:	f7ff ff46 	bl	80022f0 <HAL_RCC_GetPCLK2Freq>
 8002464:	4602      	mov	r2, r0
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	009a      	lsls	r2, r3, #2
 800246e:	441a      	add	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	fbb2 f3f3 	udiv	r3, r2, r3
 800247a:	4a68      	ldr	r2, [pc, #416]	; (800261c <UART_SetConfig+0x22c>)
 800247c:	fba2 2303 	umull	r2, r3, r2, r3
 8002480:	095b      	lsrs	r3, r3, #5
 8002482:	011c      	lsls	r4, r3, #4
 8002484:	f7ff ff34 	bl	80022f0 <HAL_RCC_GetPCLK2Freq>
 8002488:	4602      	mov	r2, r0
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	009a      	lsls	r2, r3, #2
 8002492:	441a      	add	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	fbb2 f5f3 	udiv	r5, r2, r3
 800249e:	f7ff ff27 	bl	80022f0 <HAL_RCC_GetPCLK2Freq>
 80024a2:	4602      	mov	r2, r0
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	009a      	lsls	r2, r3, #2
 80024ac:	441a      	add	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b8:	4a58      	ldr	r2, [pc, #352]	; (800261c <UART_SetConfig+0x22c>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	2264      	movs	r2, #100	; 0x64
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	1aeb      	subs	r3, r5, r3
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	3332      	adds	r3, #50	; 0x32
 80024cc:	4a53      	ldr	r2, [pc, #332]	; (800261c <UART_SetConfig+0x22c>)
 80024ce:	fba2 2303 	umull	r2, r3, r2, r3
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024d8:	441c      	add	r4, r3
 80024da:	f7ff ff09 	bl	80022f0 <HAL_RCC_GetPCLK2Freq>
 80024de:	4602      	mov	r2, r0
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	009a      	lsls	r2, r3, #2
 80024e8:	441a      	add	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	fbb2 f5f3 	udiv	r5, r2, r3
 80024f4:	f7ff fefc 	bl	80022f0 <HAL_RCC_GetPCLK2Freq>
 80024f8:	4602      	mov	r2, r0
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	009a      	lsls	r2, r3, #2
 8002502:	441a      	add	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	fbb2 f3f3 	udiv	r3, r2, r3
 800250e:	4a43      	ldr	r2, [pc, #268]	; (800261c <UART_SetConfig+0x22c>)
 8002510:	fba2 2303 	umull	r2, r3, r2, r3
 8002514:	095b      	lsrs	r3, r3, #5
 8002516:	2264      	movs	r2, #100	; 0x64
 8002518:	fb02 f303 	mul.w	r3, r2, r3
 800251c:	1aeb      	subs	r3, r5, r3
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	3332      	adds	r3, #50	; 0x32
 8002522:	4a3e      	ldr	r2, [pc, #248]	; (800261c <UART_SetConfig+0x22c>)
 8002524:	fba2 2303 	umull	r2, r3, r2, r3
 8002528:	095b      	lsrs	r3, r3, #5
 800252a:	f003 020f 	and.w	r2, r3, #15
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4422      	add	r2, r4
 8002534:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002536:	e06a      	b.n	800260e <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002538:	f7ff fec6 	bl	80022c8 <HAL_RCC_GetPCLK1Freq>
 800253c:	4602      	mov	r2, r0
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	009a      	lsls	r2, r3, #2
 8002546:	441a      	add	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002552:	4a32      	ldr	r2, [pc, #200]	; (800261c <UART_SetConfig+0x22c>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	095b      	lsrs	r3, r3, #5
 800255a:	011c      	lsls	r4, r3, #4
 800255c:	f7ff feb4 	bl	80022c8 <HAL_RCC_GetPCLK1Freq>
 8002560:	4602      	mov	r2, r0
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	009a      	lsls	r2, r3, #2
 800256a:	441a      	add	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	fbb2 f5f3 	udiv	r5, r2, r3
 8002576:	f7ff fea7 	bl	80022c8 <HAL_RCC_GetPCLK1Freq>
 800257a:	4602      	mov	r2, r0
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	009a      	lsls	r2, r3, #2
 8002584:	441a      	add	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002590:	4a22      	ldr	r2, [pc, #136]	; (800261c <UART_SetConfig+0x22c>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	2264      	movs	r2, #100	; 0x64
 800259a:	fb02 f303 	mul.w	r3, r2, r3
 800259e:	1aeb      	subs	r3, r5, r3
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	3332      	adds	r3, #50	; 0x32
 80025a4:	4a1d      	ldr	r2, [pc, #116]	; (800261c <UART_SetConfig+0x22c>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025b0:	441c      	add	r4, r3
 80025b2:	f7ff fe89 	bl	80022c8 <HAL_RCC_GetPCLK1Freq>
 80025b6:	4602      	mov	r2, r0
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	009a      	lsls	r2, r3, #2
 80025c0:	441a      	add	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	fbb2 f5f3 	udiv	r5, r2, r3
 80025cc:	f7ff fe7c 	bl	80022c8 <HAL_RCC_GetPCLK1Freq>
 80025d0:	4602      	mov	r2, r0
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	009a      	lsls	r2, r3, #2
 80025da:	441a      	add	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e6:	4a0d      	ldr	r2, [pc, #52]	; (800261c <UART_SetConfig+0x22c>)
 80025e8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ec:	095b      	lsrs	r3, r3, #5
 80025ee:	2264      	movs	r2, #100	; 0x64
 80025f0:	fb02 f303 	mul.w	r3, r2, r3
 80025f4:	1aeb      	subs	r3, r5, r3
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	3332      	adds	r3, #50	; 0x32
 80025fa:	4a08      	ldr	r2, [pc, #32]	; (800261c <UART_SetConfig+0x22c>)
 80025fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002600:	095b      	lsrs	r3, r3, #5
 8002602:	f003 020f 	and.w	r2, r3, #15
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4422      	add	r2, r4
 800260c:	609a      	str	r2, [r3, #8]
}
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bdb0      	pop	{r4, r5, r7, pc}
 8002616:	bf00      	nop
 8002618:	40013800 	.word	0x40013800
 800261c:	51eb851f 	.word	0x51eb851f

08002620 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002620:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002622:	e003      	b.n	800262c <LoopCopyDataInit>

08002624 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002626:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002628:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800262a:	3104      	adds	r1, #4

0800262c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800262c:	480a      	ldr	r0, [pc, #40]	; (8002658 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002630:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002632:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002634:	d3f6      	bcc.n	8002624 <CopyDataInit>
  ldr r2, =_sbss
 8002636:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002638:	e002      	b.n	8002640 <LoopFillZerobss>

0800263a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800263a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800263c:	f842 3b04 	str.w	r3, [r2], #4

08002640 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002642:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002644:	d3f9      	bcc.n	800263a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002646:	f7fd ffeb 	bl	8000620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800264a:	f000 f80f 	bl	800266c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800264e:	f7fd fdeb 	bl	8000228 <main>
  bx lr
 8002652:	4770      	bx	lr
  ldr r3, =_sidata
 8002654:	08002710 	.word	0x08002710
  ldr r0, =_sdata
 8002658:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800265c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002660:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002664:	200000c0 	.word	0x200000c0

08002668 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002668:	e7fe      	b.n	8002668 <ADC1_2_IRQHandler>
	...

0800266c <__libc_init_array>:
 800266c:	b570      	push	{r4, r5, r6, lr}
 800266e:	2500      	movs	r5, #0
 8002670:	4e0c      	ldr	r6, [pc, #48]	; (80026a4 <__libc_init_array+0x38>)
 8002672:	4c0d      	ldr	r4, [pc, #52]	; (80026a8 <__libc_init_array+0x3c>)
 8002674:	1ba4      	subs	r4, r4, r6
 8002676:	10a4      	asrs	r4, r4, #2
 8002678:	42a5      	cmp	r5, r4
 800267a:	d109      	bne.n	8002690 <__libc_init_array+0x24>
 800267c:	f000 f822 	bl	80026c4 <_init>
 8002680:	2500      	movs	r5, #0
 8002682:	4e0a      	ldr	r6, [pc, #40]	; (80026ac <__libc_init_array+0x40>)
 8002684:	4c0a      	ldr	r4, [pc, #40]	; (80026b0 <__libc_init_array+0x44>)
 8002686:	1ba4      	subs	r4, r4, r6
 8002688:	10a4      	asrs	r4, r4, #2
 800268a:	42a5      	cmp	r5, r4
 800268c:	d105      	bne.n	800269a <__libc_init_array+0x2e>
 800268e:	bd70      	pop	{r4, r5, r6, pc}
 8002690:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002694:	4798      	blx	r3
 8002696:	3501      	adds	r5, #1
 8002698:	e7ee      	b.n	8002678 <__libc_init_array+0xc>
 800269a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800269e:	4798      	blx	r3
 80026a0:	3501      	adds	r5, #1
 80026a2:	e7f2      	b.n	800268a <__libc_init_array+0x1e>
 80026a4:	08002708 	.word	0x08002708
 80026a8:	08002708 	.word	0x08002708
 80026ac:	08002708 	.word	0x08002708
 80026b0:	0800270c 	.word	0x0800270c

080026b4 <memset>:
 80026b4:	4603      	mov	r3, r0
 80026b6:	4402      	add	r2, r0
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d100      	bne.n	80026be <memset+0xa>
 80026bc:	4770      	bx	lr
 80026be:	f803 1b01 	strb.w	r1, [r3], #1
 80026c2:	e7f9      	b.n	80026b8 <memset+0x4>

080026c4 <_init>:
 80026c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c6:	bf00      	nop
 80026c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ca:	bc08      	pop	{r3}
 80026cc:	469e      	mov	lr, r3
 80026ce:	4770      	bx	lr

080026d0 <_fini>:
 80026d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d2:	bf00      	nop
 80026d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026d6:	bc08      	pop	{r3}
 80026d8:	469e      	mov	lr, r3
 80026da:	4770      	bx	lr
