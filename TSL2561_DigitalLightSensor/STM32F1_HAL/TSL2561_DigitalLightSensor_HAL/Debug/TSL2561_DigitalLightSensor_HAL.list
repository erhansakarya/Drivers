
TSL2561_DigitalLightSensor_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a10  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004b20  08004b20  00014b20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b90  08004b90  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004b90  08004b90  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b90  08004b90  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b90  08004b90  00014b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b94  08004b94  00014b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000074  08004c0c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08004c0c  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1f5  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b79  00000000  00000000  0002f292  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000860  00000000  00000000  00030e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a8  00000000  00000000  00031670  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001517e  00000000  00000000  00031e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b90  00000000  00000000  00046f96  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006dd09  00000000  00000000  0004eb26  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bc82f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002740  00000000  00000000  000bc8ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08004b08 	.word	0x08004b08

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08004b08 	.word	0x08004b08

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	d1ed      	bne.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <TSL2561_init>:
 * INT pini, input open drain(active low), INT pininde direnç var mı?
 * */

static uint8_t TSL2561_calculateLux(uint16_t *adcData, float *luxVal);

uint8_t TSL2561_init(void){
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af02      	add	r7, sp, #8

	uint8_t pData[2];
	uint8_t error = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	71fb      	strb	r3, [r7, #7]

	memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2202      	movs	r2, #2
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f002 fd0f 	bl	8003aa4 <memset>

	/* NOTE: Power up the device */
	pData[0] = TSL2561_COMMAND_REG | TSL2561_CONTROL;
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	713b      	strb	r3, [r7, #4]
	pData[1] = TSL2561_POWER_UP;
 800108a:	2303      	movs	r3, #3
 800108c:	717b      	strb	r3, [r7, #5]
	if(HAL_I2C_Master_Transmit(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 800108e:	1d3a      	adds	r2, r7, #4
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	2302      	movs	r3, #2
 8001098:	2172      	movs	r1, #114	; 0x72
 800109a:	482b      	ldr	r0, [pc, #172]	; (8001148 <TSL2561_init+0xd8>)
 800109c:	f001 f8ee 	bl	800227c <HAL_I2C_Master_Transmit>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <TSL2561_init+0x3a>
			(sizeof(pData) / sizeof(pData[0])), HAL_MAX_DELAY) != HAL_OK){

		Error_Handler();
 80010a6:	f000 fba5 	bl	80017f4 <Error_Handler>
//		error = 1;
//
//	}

	/* NOTE: Get Device ID */
	memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2202      	movs	r2, #2
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f002 fcf7 	bl	8003aa4 <memset>
	pData[0] = TSL2561_COMMAND_REG | TSL2561_ID;
 80010b6:	238a      	movs	r3, #138	; 0x8a
 80010b8:	713b      	strb	r3, [r7, #4]
	if(HAL_I2C_Master_Transmit(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 80010ba:	1d3a      	adds	r2, r7, #4
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2301      	movs	r3, #1
 80010c4:	2172      	movs	r1, #114	; 0x72
 80010c6:	4820      	ldr	r0, [pc, #128]	; (8001148 <TSL2561_init+0xd8>)
 80010c8:	f001 f8d8 	bl	800227c <HAL_I2C_Master_Transmit>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <TSL2561_init+0x66>
			1, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 80010d2:	f000 fb8f 	bl	80017f4 <Error_Handler>
	}

	memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2202      	movs	r2, #2
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f002 fce1 	bl	8003aa4 <memset>
	if(HAL_I2C_Master_Receive(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 80010e2:	1d3a      	adds	r2, r7, #4
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2301      	movs	r3, #1
 80010ec:	2172      	movs	r1, #114	; 0x72
 80010ee:	4816      	ldr	r0, [pc, #88]	; (8001148 <TSL2561_init+0xd8>)
 80010f0:	f001 f9d2 	bl	8002498 <HAL_I2C_Master_Receive>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <TSL2561_init+0x8e>
			1, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 80010fa:	f000 fb7b 	bl	80017f4 <Error_Handler>
	}

	if((pData[0] & 0xF0) != TSL2561_DEV_ID){
 80010fe:	793b      	ldrb	r3, [r7, #4]
 8001100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001104:	2b50      	cmp	r3, #80	; 0x50
 8001106:	d001      	beq.n	800110c <TSL2561_init+0x9c>
		error = 1;
 8001108:	2301      	movs	r3, #1
 800110a:	71fb      	strb	r3, [r7, #7]
	}

	/* NOTE: Configure Timing Register */
	memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2202      	movs	r2, #2
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f002 fcc6 	bl	8003aa4 <memset>
	pData[0] = TSL2561_COMMAND_REG | TSL2561_TIMING;
 8001118:	2381      	movs	r3, #129	; 0x81
 800111a:	713b      	strb	r3, [r7, #4]
	pData[1] = 0x00;	/* NOTE: integration time is 13.7ms and 16x gain */
 800111c:	2300      	movs	r3, #0
 800111e:	717b      	strb	r3, [r7, #5]
	if(HAL_I2C_Master_Transmit(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 8001120:	1d3a      	adds	r2, r7, #4
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2302      	movs	r3, #2
 800112a:	2172      	movs	r1, #114	; 0x72
 800112c:	4806      	ldr	r0, [pc, #24]	; (8001148 <TSL2561_init+0xd8>)
 800112e:	f001 f8a5 	bl	800227c <HAL_I2C_Master_Transmit>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <TSL2561_init+0xcc>
			(sizeof(pData) / sizeof(pData[0])), HAL_MAX_DELAY) != HAL_OK){

		Error_Handler();
 8001138:	f000 fb5c 	bl	80017f4 <Error_Handler>
	/* NOTE: Configure Interrupt Threshold registers */


	/* NOTE: Set interrupt control register */

	return error;
 800113c:	79fb      	ldrb	r3, [r7, #7]

}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000090 	.word	0x20000090

0800114c <TSL2561_handler>:

void TSL2561_handler(void *lux){
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af02      	add	r7, sp, #8
 8001152:	6078      	str	r0, [r7, #4]

	uint8_t pData[2];
	uint16_t adcData[2];
	float luxVal = 0;
 8001154:	f04f 0300 	mov.w	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]

	memset(adcData, 0, 4);
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	2204      	movs	r2, #4
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f002 fc9e 	bl	8003aa4 <memset>

	HAL_Delay(500);	/* NOTE: Wait for integration time */
 8001168:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800116c:	f000 fcbe 	bl	8001aec <HAL_Delay>

	/* NOTE: Get ADC channel 0 lower and higher bytes */
	memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2202      	movs	r2, #2
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f002 fc93 	bl	8003aa4 <memset>
	pData[0] = (TSL2561_COMMAND_REG | (0x01 << 4) ) | TSL2561_DATA0LOW;
 800117e:	239c      	movs	r3, #156	; 0x9c
 8001180:	753b      	strb	r3, [r7, #20]
	if(HAL_I2C_Master_Transmit(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 8001182:	f107 0214 	add.w	r2, r7, #20
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2301      	movs	r3, #1
 800118e:	2172      	movs	r1, #114	; 0x72
 8001190:	4852      	ldr	r0, [pc, #328]	; (80012dc <TSL2561_handler+0x190>)
 8001192:	f001 f873 	bl	800227c <HAL_I2C_Master_Transmit>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <TSL2561_handler+0x54>
			1, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 800119c:	f000 fb2a 	bl	80017f4 <Error_Handler>
	}

	memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2202      	movs	r2, #2
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f002 fc7b 	bl	8003aa4 <memset>
	if(HAL_I2C_Master_Receive(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 80011ae:	f107 0214 	add.w	r2, r7, #20
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2301      	movs	r3, #1
 80011ba:	2172      	movs	r1, #114	; 0x72
 80011bc:	4847      	ldr	r0, [pc, #284]	; (80012dc <TSL2561_handler+0x190>)
 80011be:	f001 f96b 	bl	8002498 <HAL_I2C_Master_Receive>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <TSL2561_handler+0x80>
			1, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 80011c8:	f000 fb14 	bl	80017f4 <Error_Handler>
	}

	adcData[0] |= pData[0];
 80011cc:	8a3a      	ldrh	r2, [r7, #16]
 80011ce:	7d3b      	ldrb	r3, [r7, #20]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	823b      	strh	r3, [r7, #16]

	memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2202      	movs	r2, #2
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f002 fc5f 	bl	8003aa4 <memset>
	if(HAL_I2C_Master_Receive(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 80011e6:	f107 0214 	add.w	r2, r7, #20
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2301      	movs	r3, #1
 80011f2:	2172      	movs	r1, #114	; 0x72
 80011f4:	4839      	ldr	r0, [pc, #228]	; (80012dc <TSL2561_handler+0x190>)
 80011f6:	f001 f94f 	bl	8002498 <HAL_I2C_Master_Receive>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <TSL2561_handler+0xb8>
			1, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 8001200:	f000 faf8 	bl	80017f4 <Error_Handler>
	}

	adcData[0] |= pData[0] << 8;
 8001204:	8a3b      	ldrh	r3, [r7, #16]
 8001206:	b21a      	sxth	r2, r3
 8001208:	7d3b      	ldrb	r3, [r7, #20]
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	b21b      	sxth	r3, r3
 800120e:	4313      	orrs	r3, r2
 8001210:	b21b      	sxth	r3, r3
 8001212:	b29b      	uxth	r3, r3
 8001214:	823b      	strh	r3, [r7, #16]

	/* NOTE: Get ADC channel 1 lower and higher bytes */
	memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	2202      	movs	r2, #2
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f002 fc40 	bl	8003aa4 <memset>
	pData[0] = (TSL2561_COMMAND_REG | (0x01 << 4) ) | TSL2561_DATA1LOW;
 8001224:	239e      	movs	r3, #158	; 0x9e
 8001226:	753b      	strb	r3, [r7, #20]
	if(HAL_I2C_Master_Transmit(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 8001228:	f107 0214 	add.w	r2, r7, #20
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	2172      	movs	r1, #114	; 0x72
 8001236:	4829      	ldr	r0, [pc, #164]	; (80012dc <TSL2561_handler+0x190>)
 8001238:	f001 f820 	bl	800227c <HAL_I2C_Master_Transmit>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <TSL2561_handler+0xfa>
			1, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 8001242:	f000 fad7 	bl	80017f4 <Error_Handler>
	}

	memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	2202      	movs	r2, #2
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f002 fc28 	bl	8003aa4 <memset>
	if(HAL_I2C_Master_Receive(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 8001254:	f107 0214 	add.w	r2, r7, #20
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2301      	movs	r3, #1
 8001260:	2172      	movs	r1, #114	; 0x72
 8001262:	481e      	ldr	r0, [pc, #120]	; (80012dc <TSL2561_handler+0x190>)
 8001264:	f001 f918 	bl	8002498 <HAL_I2C_Master_Receive>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <TSL2561_handler+0x126>
			1, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 800126e:	f000 fac1 	bl	80017f4 <Error_Handler>
	}

	adcData[1] |= pData[0];
 8001272:	8a7a      	ldrh	r2, [r7, #18]
 8001274:	7d3b      	ldrb	r3, [r7, #20]
 8001276:	b29b      	uxth	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b29b      	uxth	r3, r3
 800127c:	827b      	strh	r3, [r7, #18]

	memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	2202      	movs	r2, #2
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f002 fc0c 	bl	8003aa4 <memset>
	if(HAL_I2C_Master_Receive(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 800128c:	f107 0214 	add.w	r2, r7, #20
 8001290:	f04f 33ff 	mov.w	r3, #4294967295
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2301      	movs	r3, #1
 8001298:	2172      	movs	r1, #114	; 0x72
 800129a:	4810      	ldr	r0, [pc, #64]	; (80012dc <TSL2561_handler+0x190>)
 800129c:	f001 f8fc 	bl	8002498 <HAL_I2C_Master_Receive>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <TSL2561_handler+0x15e>
			1, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 80012a6:	f000 faa5 	bl	80017f4 <Error_Handler>
	}

	adcData[1] |= pData[0] << 8;
 80012aa:	8a7b      	ldrh	r3, [r7, #18]
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	7d3b      	ldrb	r3, [r7, #20]
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	4313      	orrs	r3, r2
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	827b      	strh	r3, [r7, #18]

	TSL2561_calculateLux(adcData, &luxVal);
 80012bc:	f107 020c 	add.w	r2, r7, #12
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f80a 	bl	80012e0 <TSL2561_calculateLux>

	*(float *)lux = luxVal;
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	601a      	str	r2, [r3, #0]

}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000090 	.word	0x20000090

080012e0 <TSL2561_calculateLux>:

static uint8_t TSL2561_calculateLux(uint16_t *adcData, float *luxVal){
 80012e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012e4:	b084      	sub	sp, #16
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	6039      	str	r1, [r7, #0]

	float divAdcData = ((float)adcData[1] / (float)adcData[0]);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3302      	adds	r3, #2
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fc9e 	bl	8000c34 <__aeabi_ui2f>
 80012f8:	4604      	mov	r4, r0
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fc98 	bl	8000c34 <__aeabi_ui2f>
 8001304:	4603      	mov	r3, r0
 8001306:	4619      	mov	r1, r3
 8001308:	4620      	mov	r0, r4
 800130a:	f7ff fd9f 	bl	8000e4c <__aeabi_fdiv>
 800130e:	4603      	mov	r3, r0
 8001310:	60fb      	str	r3, [r7, #12]
	uint8_t error = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	72fb      	strb	r3, [r7, #11]

	if( (0.00 < divAdcData) && (divAdcData <= 0.50) ){
 8001316:	f04f 0100 	mov.w	r1, #0
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f7ff fe9e 	bl	800105c <__aeabi_fcmpgt>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d041      	beq.n	80013aa <TSL2561_calculateLux+0xca>
 8001326:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800132a:	68f8      	ldr	r0, [r7, #12]
 800132c:	f7ff fe82 	bl	8001034 <__aeabi_fcmple>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d039      	beq.n	80013aa <TSL2561_calculateLux+0xca>

		*luxVal = (0.0304 * adcData[0]) - (0.062 * adcData[0] * pow(divAdcData, 1.4));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f85a 	bl	80003f4 <__aeabi_i2d>
 8001340:	a383      	add	r3, pc, #524	; (adr r3, 8001550 <TSL2561_calculateLux+0x270>)
 8001342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001346:	f7ff f8bf 	bl	80004c8 <__aeabi_dmul>
 800134a:	4603      	mov	r3, r0
 800134c:	460c      	mov	r4, r1
 800134e:	4625      	mov	r5, r4
 8001350:	461c      	mov	r4, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f84c 	bl	80003f4 <__aeabi_i2d>
 800135c:	a37e      	add	r3, pc, #504	; (adr r3, 8001558 <TSL2561_calculateLux+0x278>)
 800135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001362:	f7ff f8b1 	bl	80004c8 <__aeabi_dmul>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4690      	mov	r8, r2
 800136c:	4699      	mov	r9, r3
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f7ff f852 	bl	8000418 <__aeabi_f2d>
 8001374:	a37a      	add	r3, pc, #488	; (adr r3, 8001560 <TSL2561_calculateLux+0x280>)
 8001376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137a:	f002 fb9b 	bl	8003ab4 <pow>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4640      	mov	r0, r8
 8001384:	4649      	mov	r1, r9
 8001386:	f7ff f89f 	bl	80004c8 <__aeabi_dmul>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4620      	mov	r0, r4
 8001390:	4629      	mov	r1, r5
 8001392:	f7fe fee1 	bl	8000158 <__aeabi_dsub>
 8001396:	4603      	mov	r3, r0
 8001398:	460c      	mov	r4, r1
 800139a:	4618      	mov	r0, r3
 800139c:	4621      	mov	r1, r4
 800139e:	f7ff fb43 	bl	8000a28 <__aeabi_d2f>
 80013a2:	4602      	mov	r2, r0
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	e0cb      	b.n	8001542 <TSL2561_calculateLux+0x262>

	}else if( (0.50 < divAdcData) && (divAdcData <= 0.61) ){
 80013aa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f7ff fe54 	bl	800105c <__aeabi_fcmpgt>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d033      	beq.n	8001422 <TSL2561_calculateLux+0x142>
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f7ff f82c 	bl	8000418 <__aeabi_f2d>
 80013c0:	a369      	add	r3, pc, #420	; (adr r3, 8001568 <TSL2561_calculateLux+0x288>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	f7ff fafb 	bl	80009c0 <__aeabi_dcmple>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d028      	beq.n	8001422 <TSL2561_calculateLux+0x142>

		*luxVal = (0.0224 * adcData[0]) - (0.031 * adcData[1]);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f80d 	bl	80003f4 <__aeabi_i2d>
 80013da:	a365      	add	r3, pc, #404	; (adr r3, 8001570 <TSL2561_calculateLux+0x290>)
 80013dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e0:	f7ff f872 	bl	80004c8 <__aeabi_dmul>
 80013e4:	4603      	mov	r3, r0
 80013e6:	460c      	mov	r4, r1
 80013e8:	4625      	mov	r5, r4
 80013ea:	461c      	mov	r4, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3302      	adds	r3, #2
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7fe fffe 	bl	80003f4 <__aeabi_i2d>
 80013f8:	a35f      	add	r3, pc, #380	; (adr r3, 8001578 <TSL2561_calculateLux+0x298>)
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	f7ff f863 	bl	80004c8 <__aeabi_dmul>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4620      	mov	r0, r4
 8001408:	4629      	mov	r1, r5
 800140a:	f7fe fea5 	bl	8000158 <__aeabi_dsub>
 800140e:	4603      	mov	r3, r0
 8001410:	460c      	mov	r4, r1
 8001412:	4618      	mov	r0, r3
 8001414:	4621      	mov	r1, r4
 8001416:	f7ff fb07 	bl	8000a28 <__aeabi_d2f>
 800141a:	4602      	mov	r2, r0
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	e08f      	b.n	8001542 <TSL2561_calculateLux+0x262>

	}else if( (0.61 < divAdcData) && (divAdcData <= 0.80) ){
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f7fe fff8 	bl	8000418 <__aeabi_f2d>
 8001428:	a34f      	add	r3, pc, #316	; (adr r3, 8001568 <TSL2561_calculateLux+0x288>)
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	f7ff fadb 	bl	80009e8 <__aeabi_dcmpgt>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d033      	beq.n	80014a0 <TSL2561_calculateLux+0x1c0>
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f7fe ffed 	bl	8000418 <__aeabi_f2d>
 800143e:	a350      	add	r3, pc, #320	; (adr r3, 8001580 <TSL2561_calculateLux+0x2a0>)
 8001440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001444:	f7ff fabc 	bl	80009c0 <__aeabi_dcmple>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d028      	beq.n	80014a0 <TSL2561_calculateLux+0x1c0>

		*luxVal = (0.0128 * adcData[0]) - (0.0153 * adcData[1]);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f7fe ffce 	bl	80003f4 <__aeabi_i2d>
 8001458:	a34b      	add	r3, pc, #300	; (adr r3, 8001588 <TSL2561_calculateLux+0x2a8>)
 800145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145e:	f7ff f833 	bl	80004c8 <__aeabi_dmul>
 8001462:	4603      	mov	r3, r0
 8001464:	460c      	mov	r4, r1
 8001466:	4625      	mov	r5, r4
 8001468:	461c      	mov	r4, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3302      	adds	r3, #2
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7fe ffbf 	bl	80003f4 <__aeabi_i2d>
 8001476:	a346      	add	r3, pc, #280	; (adr r3, 8001590 <TSL2561_calculateLux+0x2b0>)
 8001478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147c:	f7ff f824 	bl	80004c8 <__aeabi_dmul>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4620      	mov	r0, r4
 8001486:	4629      	mov	r1, r5
 8001488:	f7fe fe66 	bl	8000158 <__aeabi_dsub>
 800148c:	4603      	mov	r3, r0
 800148e:	460c      	mov	r4, r1
 8001490:	4618      	mov	r0, r3
 8001492:	4621      	mov	r1, r4
 8001494:	f7ff fac8 	bl	8000a28 <__aeabi_d2f>
 8001498:	4602      	mov	r2, r0
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	e050      	b.n	8001542 <TSL2561_calculateLux+0x262>

	}else if( (0.80 < divAdcData) && (divAdcData <= 1.30) ){
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f7fe ffb9 	bl	8000418 <__aeabi_f2d>
 80014a6:	a336      	add	r3, pc, #216	; (adr r3, 8001580 <TSL2561_calculateLux+0x2a0>)
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	f7ff fa9c 	bl	80009e8 <__aeabi_dcmpgt>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d033      	beq.n	800151e <TSL2561_calculateLux+0x23e>
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f7fe ffae 	bl	8000418 <__aeabi_f2d>
 80014bc:	a336      	add	r3, pc, #216	; (adr r3, 8001598 <TSL2561_calculateLux+0x2b8>)
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f7ff fa7d 	bl	80009c0 <__aeabi_dcmple>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d028      	beq.n	800151e <TSL2561_calculateLux+0x23e>

		*luxVal = (0.00146 * adcData[0]) - (0.00112 * adcData[1]);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7fe ff8f 	bl	80003f4 <__aeabi_i2d>
 80014d6:	a332      	add	r3, pc, #200	; (adr r3, 80015a0 <TSL2561_calculateLux+0x2c0>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7fe fff4 	bl	80004c8 <__aeabi_dmul>
 80014e0:	4603      	mov	r3, r0
 80014e2:	460c      	mov	r4, r1
 80014e4:	4625      	mov	r5, r4
 80014e6:	461c      	mov	r4, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3302      	adds	r3, #2
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7fe ff80 	bl	80003f4 <__aeabi_i2d>
 80014f4:	a32c      	add	r3, pc, #176	; (adr r3, 80015a8 <TSL2561_calculateLux+0x2c8>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7fe ffe5 	bl	80004c8 <__aeabi_dmul>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4620      	mov	r0, r4
 8001504:	4629      	mov	r1, r5
 8001506:	f7fe fe27 	bl	8000158 <__aeabi_dsub>
 800150a:	4603      	mov	r3, r0
 800150c:	460c      	mov	r4, r1
 800150e:	4618      	mov	r0, r3
 8001510:	4621      	mov	r1, r4
 8001512:	f7ff fa89 	bl	8000a28 <__aeabi_d2f>
 8001516:	4602      	mov	r2, r0
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	e011      	b.n	8001542 <TSL2561_calculateLux+0x262>

	}else if( divAdcData > 1.30 ){
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f7fe ff7a 	bl	8000418 <__aeabi_f2d>
 8001524:	a31c      	add	r3, pc, #112	; (adr r3, 8001598 <TSL2561_calculateLux+0x2b8>)
 8001526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152a:	f7ff fa5d 	bl	80009e8 <__aeabi_dcmpgt>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d004      	beq.n	800153e <TSL2561_calculateLux+0x25e>

		*luxVal = 0;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	e001      	b.n	8001542 <TSL2561_calculateLux+0x262>

	}else{

		// error
		error = 1;
 800153e:	2301      	movs	r3, #1
 8001540:	72fb      	strb	r3, [r7, #11]

	}

}
 8001542:	bf00      	nop
 8001544:	4618      	mov	r0, r3
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800154e:	bf00      	nop
 8001550:	77318fc5 	.word	0x77318fc5
 8001554:	3f9f212d 	.word	0x3f9f212d
 8001558:	c8b43958 	.word	0xc8b43958
 800155c:	3fafbe76 	.word	0x3fafbe76
 8001560:	66666666 	.word	0x66666666
 8001564:	3ff66666 	.word	0x3ff66666
 8001568:	b851eb85 	.word	0xb851eb85
 800156c:	3fe3851e 	.word	0x3fe3851e
 8001570:	8db8bac7 	.word	0x8db8bac7
 8001574:	3f96f006 	.word	0x3f96f006
 8001578:	c8b43958 	.word	0xc8b43958
 800157c:	3f9fbe76 	.word	0x3f9fbe76
 8001580:	9999999a 	.word	0x9999999a
 8001584:	3fe99999 	.word	0x3fe99999
 8001588:	eb1c432d 	.word	0xeb1c432d
 800158c:	3f8a36e2 	.word	0x3f8a36e2
 8001590:	3d07c84b 	.word	0x3d07c84b
 8001594:	3f8f559b 	.word	0x3f8f559b
 8001598:	cccccccd 	.word	0xcccccccd
 800159c:	3ff4cccc 	.word	0x3ff4cccc
 80015a0:	102363b2 	.word	0x102363b2
 80015a4:	3f57ebaf 	.word	0x3f57ebaf
 80015a8:	d7c6fbd2 	.word	0xd7c6fbd2
 80015ac:	3f52599e 	.word	0x3f52599e

080015b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b6:	f000 fa37 	bl	8001a28 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80015ba:	f000 f814 	bl	80015e6 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015be:	f000 f8ab 	bl	8001718 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015c2:	f000 f87f 	bl	80016c4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80015c6:	f000 f84f 	bl	8001668 <MX_I2C1_Init>

  float lux = 0;
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	607b      	str	r3, [r7, #4]
  TSL2561_init();
 80015d0:	f7ff fd4e 	bl	8001070 <TSL2561_init>

  /* Infinite loop */
  while (1)
  {

	  HAL_Delay(1000);
 80015d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015d8:	f000 fa88 	bl	8001aec <HAL_Delay>
	  TSL2561_handler(&lux);
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fdb4 	bl	800114c <TSL2561_handler>
	  HAL_Delay(1000);
 80015e4:	e7f6      	b.n	80015d4 <main+0x24>

080015e6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b090      	sub	sp, #64	; 0x40
 80015ea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ec:	f107 0318 	add.w	r3, r7, #24
 80015f0:	2228      	movs	r2, #40	; 0x28
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f002 fa55 	bl	8003aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001608:	2302      	movs	r3, #2
 800160a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800160c:	2301      	movs	r3, #1
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001610:	2310      	movs	r3, #16
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001614:	2302      	movs	r3, #2
 8001616:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001618:	2300      	movs	r3, #0
 800161a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800161c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001620:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001622:	f107 0318 	add.w	r3, r7, #24
 8001626:	4618      	mov	r0, r3
 8001628:	f001 fc64 	bl	8002ef4 <HAL_RCC_OscConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001632:	f000 f8df 	bl	80017f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001636:	230f      	movs	r3, #15
 8001638:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800163a:	2302      	movs	r3, #2
 800163c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2102      	movs	r1, #2
 8001650:	4618      	mov	r0, r3
 8001652:	f001 feb3 	bl	80033bc <HAL_RCC_ClockConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800165c:	f000 f8ca 	bl	80017f4 <Error_Handler>
  }
}
 8001660:	bf00      	nop
 8001662:	3740      	adds	r7, #64	; 0x40
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <MX_I2C1_Init+0x50>)
 800166e:	4a13      	ldr	r2, [pc, #76]	; (80016bc <MX_I2C1_Init+0x54>)
 8001670:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_I2C1_Init+0x50>)
 8001674:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <MX_I2C1_Init+0x58>)
 8001676:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MX_I2C1_Init+0x50>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_I2C1_Init+0x50>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_I2C1_Init+0x50>)
 8001686:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800168a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <MX_I2C1_Init+0x50>)
 800168e:	2200      	movs	r2, #0
 8001690:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_I2C1_Init+0x50>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <MX_I2C1_Init+0x50>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_I2C1_Init+0x50>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016a4:	4804      	ldr	r0, [pc, #16]	; (80016b8 <MX_I2C1_Init+0x50>)
 80016a6:	f000 fce5 	bl	8002074 <HAL_I2C_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016b0:	f000 f8a0 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000090 	.word	0x20000090
 80016bc:	40005400 	.word	0x40005400
 80016c0:	00061a80 	.word	0x00061a80

080016c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016ca:	4a12      	ldr	r2, [pc, #72]	; (8001714 <MX_USART2_UART_Init+0x50>)
 80016cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016ea:	220c      	movs	r2, #12
 80016ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016fc:	f002 f81c 	bl	8003738 <HAL_UART_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001706:	f000 f875 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200000e4 	.word	0x200000e4
 8001714:	40004400 	.word	0x40004400

08001718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171e:	f107 0310 	add.w	r3, r7, #16
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172c:	4b2d      	ldr	r3, [pc, #180]	; (80017e4 <MX_GPIO_Init+0xcc>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a2c      	ldr	r2, [pc, #176]	; (80017e4 <MX_GPIO_Init+0xcc>)
 8001732:	f043 0310 	orr.w	r3, r3, #16
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <MX_GPIO_Init+0xcc>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f003 0310 	and.w	r3, r3, #16
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001744:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <MX_GPIO_Init+0xcc>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a26      	ldr	r2, [pc, #152]	; (80017e4 <MX_GPIO_Init+0xcc>)
 800174a:	f043 0320 	orr.w	r3, r3, #32
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <MX_GPIO_Init+0xcc>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0320 	and.w	r3, r3, #32
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175c:	4b21      	ldr	r3, [pc, #132]	; (80017e4 <MX_GPIO_Init+0xcc>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	4a20      	ldr	r2, [pc, #128]	; (80017e4 <MX_GPIO_Init+0xcc>)
 8001762:	f043 0304 	orr.w	r3, r3, #4
 8001766:	6193      	str	r3, [r2, #24]
 8001768:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <MX_GPIO_Init+0xcc>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <MX_GPIO_Init+0xcc>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	4a1a      	ldr	r2, [pc, #104]	; (80017e4 <MX_GPIO_Init+0xcc>)
 800177a:	f043 0308 	orr.w	r3, r3, #8
 800177e:	6193      	str	r3, [r2, #24]
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <MX_GPIO_Init+0xcc>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f003 0308 	and.w	r3, r3, #8
 8001788:	603b      	str	r3, [r7, #0]
 800178a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800178c:	2200      	movs	r2, #0
 800178e:	2120      	movs	r1, #32
 8001790:	4815      	ldr	r0, [pc, #84]	; (80017e8 <MX_GPIO_Init+0xd0>)
 8001792:	f000 fc35 	bl	8002000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800179a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <MX_GPIO_Init+0xd4>)
 800179e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	4619      	mov	r1, r3
 80017aa:	4811      	ldr	r0, [pc, #68]	; (80017f0 <MX_GPIO_Init+0xd8>)
 80017ac:	f000 faca 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017b0:	2320      	movs	r3, #32
 80017b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2302      	movs	r3, #2
 80017be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017c0:	f107 0310 	add.w	r3, r7, #16
 80017c4:	4619      	mov	r1, r3
 80017c6:	4808      	ldr	r0, [pc, #32]	; (80017e8 <MX_GPIO_Init+0xd0>)
 80017c8:	f000 fabc 	bl	8001d44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2100      	movs	r1, #0
 80017d0:	2028      	movs	r0, #40	; 0x28
 80017d2:	f000 fa80 	bl	8001cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017d6:	2028      	movs	r0, #40	; 0x28
 80017d8:	f000 fa99 	bl	8001d0e <HAL_NVIC_EnableIRQ>

}
 80017dc:	bf00      	nop
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40010800 	.word	0x40010800
 80017ec:	10110000 	.word	0x10110000
 80017f0:	40011000 	.word	0x40011000

080017f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_MspInit+0x5c>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	4a14      	ldr	r2, [pc, #80]	; (800185c <HAL_MspInit+0x5c>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6193      	str	r3, [r2, #24]
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_MspInit+0x5c>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <HAL_MspInit+0x5c>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	4a0e      	ldr	r2, [pc, #56]	; (800185c <HAL_MspInit+0x5c>)
 8001824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001828:	61d3      	str	r3, [r2, #28]
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_MspInit+0x5c>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <HAL_MspInit+0x60>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <HAL_MspInit+0x60>)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	40021000 	.word	0x40021000
 8001860:	40010000 	.word	0x40010000

08001864 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a15      	ldr	r2, [pc, #84]	; (80018d4 <HAL_I2C_MspInit+0x70>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d123      	bne.n	80018cc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001884:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <HAL_I2C_MspInit+0x74>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a13      	ldr	r2, [pc, #76]	; (80018d8 <HAL_I2C_MspInit+0x74>)
 800188a:	f043 0308 	orr.w	r3, r3, #8
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_I2C_MspInit+0x74>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800189c:	23c0      	movs	r3, #192	; 0xc0
 800189e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a0:	2312      	movs	r3, #18
 80018a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a8:	f107 0310 	add.w	r3, r7, #16
 80018ac:	4619      	mov	r1, r3
 80018ae:	480b      	ldr	r0, [pc, #44]	; (80018dc <HAL_I2C_MspInit+0x78>)
 80018b0:	f000 fa48 	bl	8001d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <HAL_I2C_MspInit+0x74>)
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <HAL_I2C_MspInit+0x74>)
 80018ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018be:	61d3      	str	r3, [r2, #28]
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_I2C_MspInit+0x74>)
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018cc:	bf00      	nop
 80018ce:	3720      	adds	r7, #32
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40005400 	.word	0x40005400
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40010c00 	.word	0x40010c00

080018e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0310 	add.w	r3, r7, #16
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a15      	ldr	r2, [pc, #84]	; (8001950 <HAL_UART_MspInit+0x70>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d123      	bne.n	8001948 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001900:	4b14      	ldr	r3, [pc, #80]	; (8001954 <HAL_UART_MspInit+0x74>)
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	4a13      	ldr	r2, [pc, #76]	; (8001954 <HAL_UART_MspInit+0x74>)
 8001906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800190a:	61d3      	str	r3, [r2, #28]
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <HAL_UART_MspInit+0x74>)
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HAL_UART_MspInit+0x74>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4a0d      	ldr	r2, [pc, #52]	; (8001954 <HAL_UART_MspInit+0x74>)
 800191e:	f043 0304 	orr.w	r3, r3, #4
 8001922:	6193      	str	r3, [r2, #24]
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_UART_MspInit+0x74>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001930:	230c      	movs	r3, #12
 8001932:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2302      	movs	r3, #2
 800193a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193c:	f107 0310 	add.w	r3, r7, #16
 8001940:	4619      	mov	r1, r3
 8001942:	4805      	ldr	r0, [pc, #20]	; (8001958 <HAL_UART_MspInit+0x78>)
 8001944:	f000 f9fe 	bl	8001d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001948:	bf00      	nop
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40004400 	.word	0x40004400
 8001954:	40021000 	.word	0x40021000
 8001958:	40010800 	.word	0x40010800

0800195c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <HardFault_Handler+0x4>

0800196e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <MemManage_Handler+0x4>

08001974 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <BusFault_Handler+0x4>

0800197a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <UsageFault_Handler+0x4>

08001980 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a8:	f000 f884 	bl	8001ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80019b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019b8:	f000 fb3a 	bl	8002030 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}

080019c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80019c4:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <SystemInit+0x5c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <SystemInit+0x5c>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <SystemInit+0x5c>)
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	4911      	ldr	r1, [pc, #68]	; (8001a1c <SystemInit+0x5c>)
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <SystemInit+0x60>)
 80019d8:	4013      	ands	r3, r2
 80019da:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80019dc:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <SystemInit+0x5c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <SystemInit+0x5c>)
 80019e2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80019e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ea:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <SystemInit+0x5c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <SystemInit+0x5c>)
 80019f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <SystemInit+0x5c>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <SystemInit+0x5c>)
 80019fe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001a02:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <SystemInit+0x5c>)
 8001a06:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001a0a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <SystemInit+0x64>)
 8001a0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a12:	609a      	str	r2, [r3, #8]
#endif 
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	f8ff0000 	.word	0xf8ff0000
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_Init+0x28>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <HAL_Init+0x28>)
 8001a32:	f043 0310 	orr.w	r3, r3, #16
 8001a36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a38:	2003      	movs	r0, #3
 8001a3a:	f000 f941 	bl	8001cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f000 f808 	bl	8001a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a44:	f7ff fedc 	bl	8001800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40022000 	.word	0x40022000

08001a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_InitTick+0x54>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_InitTick+0x58>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 f959 	bl	8001d2a <HAL_SYSTICK_Config>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00e      	b.n	8001aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b0f      	cmp	r3, #15
 8001a86:	d80a      	bhi.n	8001a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f000 f921 	bl	8001cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a94:	4a06      	ldr	r2, [pc, #24]	; (8001ab0 <HAL_InitTick+0x5c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e000      	b.n	8001aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	20000004 	.word	0x20000004

08001ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_IncTick+0x1c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_IncTick+0x20>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a03      	ldr	r2, [pc, #12]	; (8001ad4 <HAL_IncTick+0x20>)
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	20000124 	.word	0x20000124

08001ad8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b02      	ldr	r3, [pc, #8]	; (8001ae8 <HAL_GetTick+0x10>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	20000124 	.word	0x20000124

08001aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff fff0 	bl	8001ad8 <HAL_GetTick>
 8001af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b04:	d005      	beq.n	8001b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_Delay+0x40>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4413      	add	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b12:	bf00      	nop
 8001b14:	f7ff ffe0 	bl	8001ad8 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d8f7      	bhi.n	8001b14 <HAL_Delay+0x28>
  {
  }
}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000008 	.word	0x20000008

08001b30 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <NVIC_SetPriorityGrouping+0x44>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b62:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <NVIC_SetPriorityGrouping+0x44>)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	60d3      	str	r3, [r2, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <NVIC_GetPriorityGrouping+0x18>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	f003 0307 	and.w	r3, r3, #7
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4906      	ldr	r1, [pc, #24]	; (8001bc0 <NVIC_EnableIRQ+0x2c>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	2001      	movs	r0, #1
 8001bae:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	e000e100 	.word	0xe000e100

08001bc4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	da0b      	bge.n	8001bf0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	490c      	ldr	r1, [pc, #48]	; (8001c10 <NVIC_SetPriority+0x4c>)
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	3b04      	subs	r3, #4
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bee:	e009      	b.n	8001c04 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	4907      	ldr	r1, [pc, #28]	; (8001c14 <NVIC_SetPriority+0x50>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	0112      	lsls	r2, r2, #4
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	440b      	add	r3, r1
 8001c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00
 8001c14:	e000e100 	.word	0xe000e100

08001c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f1c3 0307 	rsb	r3, r3, #7
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	bf28      	it	cs
 8001c36:	2304      	movcs	r3, #4
 8001c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d902      	bls.n	8001c48 <NVIC_EncodePriority+0x30>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3b03      	subs	r3, #3
 8001c46:	e000      	b.n	8001c4a <NVIC_EncodePriority+0x32>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43d9      	mvns	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	4313      	orrs	r3, r2
         );
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3724      	adds	r7, #36	; 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c8c:	d301      	bcc.n	8001c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00f      	b.n	8001cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c92:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <SysTick_Config+0x40>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9a:	210f      	movs	r1, #15
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f7ff ff90 	bl	8001bc4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <SysTick_Config+0x40>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001caa:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <SysTick_Config+0x40>)
 8001cac:	2207      	movs	r2, #7
 8001cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	e000e010 	.word	0xe000e010

08001cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ff31 	bl	8001b30 <NVIC_SetPriorityGrouping>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b086      	sub	sp, #24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce8:	f7ff ff46 	bl	8001b78 <NVIC_GetPriorityGrouping>
 8001cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	6978      	ldr	r0, [r7, #20]
 8001cf4:	f7ff ff90 	bl	8001c18 <NVIC_EncodePriority>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff5f 	bl	8001bc4 <NVIC_SetPriority>
}
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff39 	bl	8001b94 <NVIC_EnableIRQ>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ffa2 	bl	8001c7c <SysTick_Config>
 8001d38:	4603      	mov	r3, r0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b08b      	sub	sp, #44	; 0x2c
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
 8001d66:	e127      	b.n	8001fb8 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8001d68:	2201      	movs	r2, #1
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	69fa      	ldr	r2, [r7, #28]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	f040 8116 	bne.w	8001fb2 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b12      	cmp	r3, #18
 8001d8c:	d034      	beq.n	8001df8 <HAL_GPIO_Init+0xb4>
 8001d8e:	2b12      	cmp	r3, #18
 8001d90:	d80d      	bhi.n	8001dae <HAL_GPIO_Init+0x6a>
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d02b      	beq.n	8001dee <HAL_GPIO_Init+0xaa>
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d804      	bhi.n	8001da4 <HAL_GPIO_Init+0x60>
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d031      	beq.n	8001e02 <HAL_GPIO_Init+0xbe>
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d01c      	beq.n	8001ddc <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001da2:	e048      	b.n	8001e36 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d043      	beq.n	8001e30 <HAL_GPIO_Init+0xec>
 8001da8:	2b11      	cmp	r3, #17
 8001daa:	d01b      	beq.n	8001de4 <HAL_GPIO_Init+0xa0>
          break;
 8001dac:	e043      	b.n	8001e36 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001dae:	4a87      	ldr	r2, [pc, #540]	; (8001fcc <HAL_GPIO_Init+0x288>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d026      	beq.n	8001e02 <HAL_GPIO_Init+0xbe>
 8001db4:	4a85      	ldr	r2, [pc, #532]	; (8001fcc <HAL_GPIO_Init+0x288>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d806      	bhi.n	8001dc8 <HAL_GPIO_Init+0x84>
 8001dba:	4a85      	ldr	r2, [pc, #532]	; (8001fd0 <HAL_GPIO_Init+0x28c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d020      	beq.n	8001e02 <HAL_GPIO_Init+0xbe>
 8001dc0:	4a84      	ldr	r2, [pc, #528]	; (8001fd4 <HAL_GPIO_Init+0x290>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d01d      	beq.n	8001e02 <HAL_GPIO_Init+0xbe>
          break;
 8001dc6:	e036      	b.n	8001e36 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001dc8:	4a83      	ldr	r2, [pc, #524]	; (8001fd8 <HAL_GPIO_Init+0x294>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d019      	beq.n	8001e02 <HAL_GPIO_Init+0xbe>
 8001dce:	4a83      	ldr	r2, [pc, #524]	; (8001fdc <HAL_GPIO_Init+0x298>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d016      	beq.n	8001e02 <HAL_GPIO_Init+0xbe>
 8001dd4:	4a82      	ldr	r2, [pc, #520]	; (8001fe0 <HAL_GPIO_Init+0x29c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d013      	beq.n	8001e02 <HAL_GPIO_Init+0xbe>
          break;
 8001dda:	e02c      	b.n	8001e36 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	623b      	str	r3, [r7, #32]
          break;
 8001de2:	e028      	b.n	8001e36 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	3304      	adds	r3, #4
 8001dea:	623b      	str	r3, [r7, #32]
          break;
 8001dec:	e023      	b.n	8001e36 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	3308      	adds	r3, #8
 8001df4:	623b      	str	r3, [r7, #32]
          break;
 8001df6:	e01e      	b.n	8001e36 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	330c      	adds	r3, #12
 8001dfe:	623b      	str	r3, [r7, #32]
          break;
 8001e00:	e019      	b.n	8001e36 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d102      	bne.n	8001e10 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	623b      	str	r3, [r7, #32]
          break;
 8001e0e:	e012      	b.n	8001e36 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d105      	bne.n	8001e24 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e18:	2308      	movs	r3, #8
 8001e1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	611a      	str	r2, [r3, #16]
          break;
 8001e22:	e008      	b.n	8001e36 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e24:	2308      	movs	r3, #8
 8001e26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	615a      	str	r2, [r3, #20]
          break;
 8001e2e:	e002      	b.n	8001e36 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e30:	2300      	movs	r3, #0
 8001e32:	623b      	str	r3, [r7, #32]
          break;
 8001e34:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	2bff      	cmp	r3, #255	; 0xff
 8001e3a:	d801      	bhi.n	8001e40 <HAL_GPIO_Init+0xfc>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	e001      	b.n	8001e44 <HAL_GPIO_Init+0x100>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3304      	adds	r3, #4
 8001e44:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	2bff      	cmp	r3, #255	; 0xff
 8001e4a:	d802      	bhi.n	8001e52 <HAL_GPIO_Init+0x10e>
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	e002      	b.n	8001e58 <HAL_GPIO_Init+0x114>
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	3b08      	subs	r3, #8
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	210f      	movs	r1, #15
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	fa01 f303 	lsl.w	r3, r1, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	401a      	ands	r2, r3
 8001e6a:	6a39      	ldr	r1, [r7, #32]
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	431a      	orrs	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 8096 	beq.w	8001fb2 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e86:	4b57      	ldr	r3, [pc, #348]	; (8001fe4 <HAL_GPIO_Init+0x2a0>)
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	4a56      	ldr	r2, [pc, #344]	; (8001fe4 <HAL_GPIO_Init+0x2a0>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6193      	str	r3, [r2, #24]
 8001e92:	4b54      	ldr	r3, [pc, #336]	; (8001fe4 <HAL_GPIO_Init+0x2a0>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8001e9e:	4a52      	ldr	r2, [pc, #328]	; (8001fe8 <HAL_GPIO_Init+0x2a4>)
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eaa:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	220f      	movs	r2, #15
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a49      	ldr	r2, [pc, #292]	; (8001fec <HAL_GPIO_Init+0x2a8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d013      	beq.n	8001ef2 <HAL_GPIO_Init+0x1ae>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a48      	ldr	r2, [pc, #288]	; (8001ff0 <HAL_GPIO_Init+0x2ac>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d00d      	beq.n	8001eee <HAL_GPIO_Init+0x1aa>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a47      	ldr	r2, [pc, #284]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d007      	beq.n	8001eea <HAL_GPIO_Init+0x1a6>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a46      	ldr	r2, [pc, #280]	; (8001ff8 <HAL_GPIO_Init+0x2b4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d101      	bne.n	8001ee6 <HAL_GPIO_Init+0x1a2>
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e006      	b.n	8001ef4 <HAL_GPIO_Init+0x1b0>
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	e004      	b.n	8001ef4 <HAL_GPIO_Init+0x1b0>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e002      	b.n	8001ef4 <HAL_GPIO_Init+0x1b0>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <HAL_GPIO_Init+0x1b0>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef6:	f002 0203 	and.w	r2, r2, #3
 8001efa:	0092      	lsls	r2, r2, #2
 8001efc:	4093      	lsls	r3, r2
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001f04:	4938      	ldr	r1, [pc, #224]	; (8001fe8 <HAL_GPIO_Init+0x2a4>)
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d006      	beq.n	8001f2c <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f1e:	4b37      	ldr	r3, [pc, #220]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	4936      	ldr	r1, [pc, #216]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]
 8001f2a:	e006      	b.n	8001f3a <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f2c:	4b33      	ldr	r3, [pc, #204]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	4931      	ldr	r1, [pc, #196]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d006      	beq.n	8001f54 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f46:	4b2d      	ldr	r3, [pc, #180]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	492c      	ldr	r1, [pc, #176]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	604b      	str	r3, [r1, #4]
 8001f52:	e006      	b.n	8001f62 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f54:	4b29      	ldr	r3, [pc, #164]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	4927      	ldr	r1, [pc, #156]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d006      	beq.n	8001f7c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f6e:	4b23      	ldr	r3, [pc, #140]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	4922      	ldr	r1, [pc, #136]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	608b      	str	r3, [r1, #8]
 8001f7a:	e006      	b.n	8001f8a <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f7c:	4b1f      	ldr	r3, [pc, #124]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	491d      	ldr	r1, [pc, #116]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d006      	beq.n	8001fa4 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f96:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	4918      	ldr	r1, [pc, #96]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	60cb      	str	r3, [r1, #12]
 8001fa2:	e006      	b.n	8001fb2 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fa4:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	4913      	ldr	r1, [pc, #76]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001fae:	4013      	ands	r3, r2
 8001fb0:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	2b0f      	cmp	r3, #15
 8001fbc:	f67f aed4 	bls.w	8001d68 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	372c      	adds	r7, #44	; 0x2c
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	10210000 	.word	0x10210000
 8001fd0:	10110000 	.word	0x10110000
 8001fd4:	10120000 	.word	0x10120000
 8001fd8:	10310000 	.word	0x10310000
 8001fdc:	10320000 	.word	0x10320000
 8001fe0:	10220000 	.word	0x10220000
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40010000 	.word	0x40010000
 8001fec:	40010800 	.word	0x40010800
 8001ff0:	40010c00 	.word	0x40010c00
 8001ff4:	40011000 	.word	0x40011000
 8001ff8:	40011400 	.word	0x40011400
 8001ffc:	40010400 	.word	0x40010400

08002000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	807b      	strh	r3, [r7, #2]
 800200c:	4613      	mov	r3, r2
 800200e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002010:	787b      	ldrb	r3, [r7, #1]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002016:	887a      	ldrh	r2, [r7, #2]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800201c:	e003      	b.n	8002026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800201e:	887b      	ldrh	r3, [r7, #2]
 8002020:	041a      	lsls	r2, r3, #16
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	611a      	str	r2, [r3, #16]
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800203c:	695a      	ldr	r2, [r3, #20]
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	4013      	ands	r3, r2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d006      	beq.n	8002054 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002046:	4a05      	ldr	r2, [pc, #20]	; (800205c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002048:	88fb      	ldrh	r3, [r7, #6]
 800204a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	4618      	mov	r0, r3
 8002050:	f000 f806 	bl	8002060 <HAL_GPIO_EXTI_Callback>
  }
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40010400 	.word	0x40010400

08002060 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0e7      	b.n	800225e <HAL_I2C_Init+0x1ea>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d106      	bne.n	80020a8 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff fbde 	bl	8001864 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2224      	movs	r2, #36	; 0x24
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0201 	bic.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020c0:	f001 faf4 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
 80020c4:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	4a67      	ldr	r2, [pc, #412]	; (8002268 <HAL_I2C_Init+0x1f4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d807      	bhi.n	80020e0 <HAL_I2C_Init+0x6c>
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	4a66      	ldr	r2, [pc, #408]	; (800226c <HAL_I2C_Init+0x1f8>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	bf94      	ite	ls
 80020d8:	2301      	movls	r3, #1
 80020da:	2300      	movhi	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	e006      	b.n	80020ee <HAL_I2C_Init+0x7a>
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4a63      	ldr	r2, [pc, #396]	; (8002270 <HAL_I2C_Init+0x1fc>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	bf94      	ite	ls
 80020e8:	2301      	movls	r3, #1
 80020ea:	2300      	movhi	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e0b3      	b.n	800225e <HAL_I2C_Init+0x1ea>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4a5e      	ldr	r2, [pc, #376]	; (8002274 <HAL_I2C_Init+0x200>)
 80020fa:	fba2 2303 	umull	r2, r3, r2, r3
 80020fe:	0c9b      	lsrs	r3, r3, #18
 8002100:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	4a56      	ldr	r2, [pc, #344]	; (8002268 <HAL_I2C_Init+0x1f4>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d802      	bhi.n	800211a <HAL_I2C_Init+0xa6>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	3301      	adds	r3, #1
 8002118:	e009      	b.n	800212e <HAL_I2C_Init+0xba>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002120:	fb02 f303 	mul.w	r3, r2, r3
 8002124:	4a54      	ldr	r2, [pc, #336]	; (8002278 <HAL_I2C_Init+0x204>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	099b      	lsrs	r3, r3, #6
 800212c:	3301      	adds	r3, #1
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	4a4b      	ldr	r2, [pc, #300]	; (8002268 <HAL_I2C_Init+0x1f4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d80d      	bhi.n	800215a <HAL_I2C_Init+0xe6>
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	1e5a      	subs	r2, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fbb2 f3f3 	udiv	r3, r2, r3
 800214c:	3301      	adds	r3, #1
 800214e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002152:	2b04      	cmp	r3, #4
 8002154:	bf38      	it	cc
 8002156:	2304      	movcc	r3, #4
 8002158:	e04f      	b.n	80021fa <HAL_I2C_Init+0x186>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d111      	bne.n	8002186 <HAL_I2C_Init+0x112>
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	1e59      	subs	r1, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4413      	add	r3, r2
 8002170:	fbb1 f3f3 	udiv	r3, r1, r3
 8002174:	3301      	adds	r3, #1
 8002176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800217a:	2b00      	cmp	r3, #0
 800217c:	bf0c      	ite	eq
 800217e:	2301      	moveq	r3, #1
 8002180:	2300      	movne	r3, #0
 8002182:	b2db      	uxtb	r3, r3
 8002184:	e012      	b.n	80021ac <HAL_I2C_Init+0x138>
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	1e59      	subs	r1, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	009a      	lsls	r2, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	fbb1 f3f3 	udiv	r3, r1, r3
 800219c:	3301      	adds	r3, #1
 800219e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	bf0c      	ite	eq
 80021a6:	2301      	moveq	r3, #1
 80021a8:	2300      	movne	r3, #0
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_I2C_Init+0x140>
 80021b0:	2301      	movs	r3, #1
 80021b2:	e022      	b.n	80021fa <HAL_I2C_Init+0x186>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10e      	bne.n	80021da <HAL_I2C_Init+0x166>
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	1e59      	subs	r1, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80021ce:	3301      	adds	r3, #1
 80021d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021d8:	e00f      	b.n	80021fa <HAL_I2C_Init+0x186>
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	1e59      	subs	r1, r3, #1
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	009a      	lsls	r2, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80021f0:	3301      	adds	r3, #1
 80021f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6812      	ldr	r2, [r2, #0]
 80021fe:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69d9      	ldr	r1, [r3, #28]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1a      	ldr	r2, [r3, #32]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6919      	ldr	r1, [r3, #16]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6959      	ldr	r1, [r3, #20]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	699a      	ldr	r2, [r3, #24]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0201 	orr.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2220      	movs	r2, #32
 800224a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	000186a0 	.word	0x000186a0
 800226c:	001e847f 	.word	0x001e847f
 8002270:	003d08ff 	.word	0x003d08ff
 8002274:	431bde83 	.word	0x431bde83
 8002278:	10624dd3 	.word	0x10624dd3

0800227c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af02      	add	r7, sp, #8
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	607a      	str	r2, [r7, #4]
 8002286:	461a      	mov	r2, r3
 8002288:	460b      	mov	r3, r1
 800228a:	817b      	strh	r3, [r7, #10]
 800228c:	4613      	mov	r3, r2
 800228e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002294:	f7ff fc20 	bl	8001ad8 <HAL_GetTick>
 8002298:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b20      	cmp	r3, #32
 80022a4:	f040 80ee 	bne.w	8002484 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	2319      	movs	r3, #25
 80022ae:	2201      	movs	r2, #1
 80022b0:	4977      	ldr	r1, [pc, #476]	; (8002490 <HAL_I2C_Master_Transmit+0x214>)
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 fc74 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 80022be:	2302      	movs	r3, #2
 80022c0:	e0e1      	b.n	8002486 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_I2C_Master_Transmit+0x54>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e0da      	b.n	8002486 <HAL_I2C_Master_Transmit+0x20a>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d007      	beq.n	80022f6 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0201 	orr.w	r2, r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002304:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2221      	movs	r2, #33	; 0x21
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2210      	movs	r2, #16
 8002312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	893a      	ldrh	r2, [r7, #8]
 8002326:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4a5a      	ldr	r2, [pc, #360]	; (8002494 <HAL_I2C_Master_Transmit+0x218>)
 800232c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002332:	b29a      	uxth	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002338:	8979      	ldrh	r1, [r7, #10]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	6a3a      	ldr	r2, [r7, #32]
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 fae4 	bl	800290c <I2C_MasterRequestWrite>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00f      	beq.n	800236a <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	2b04      	cmp	r3, #4
 8002350:	d105      	bne.n	800235e <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e093      	b.n	8002486 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e08d      	b.n	8002486 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8002380:	e066      	b.n	8002450 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	6a39      	ldr	r1, [r7, #32]
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 fcc9 	bl	8002d1e <I2C_WaitOnTXEFlagUntilTimeout>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00f      	beq.n	80023b2 <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	2b04      	cmp	r3, #4
 8002398:	d109      	bne.n	80023ae <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a8:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e06b      	b.n	8002486 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e069      	b.n	8002486 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	1c59      	adds	r1, r3, #1
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	6251      	str	r1, [r2, #36]	; 0x24
 80023bc:	781a      	ldrb	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d6:	3b01      	subs	r3, #1
 80023d8:	b29a      	uxth	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d119      	bne.n	8002420 <HAL_I2C_Master_Transmit+0x1a4>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d015      	beq.n	8002420 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	1c59      	adds	r1, r3, #1
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	6251      	str	r1, [r2, #36]	; 0x24
 80023fe:	781a      	ldrb	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240a:	b29b      	uxth	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	6a39      	ldr	r1, [r7, #32]
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 fcb7 	bl	8002d98 <I2C_WaitOnBTFFlagUntilTimeout>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00f      	beq.n	8002450 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	2b04      	cmp	r3, #4
 8002436:	d109      	bne.n	800244c <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002446:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e01c      	b.n	8002486 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e01a      	b.n	8002486 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	2b00      	cmp	r3, #0
 8002456:	d194      	bne.n	8002382 <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002466:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	e000      	b.n	8002486 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8002484:	2302      	movs	r3, #2
  }
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	00100002 	.word	0x00100002
 8002494:	ffff0000 	.word	0xffff0000

08002498 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08c      	sub	sp, #48	; 0x30
 800249c:	af02      	add	r7, sp, #8
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	607a      	str	r2, [r7, #4]
 80024a2:	461a      	mov	r2, r3
 80024a4:	460b      	mov	r3, r1
 80024a6:	817b      	strh	r3, [r7, #10]
 80024a8:	4613      	mov	r3, r2
 80024aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024b0:	f7ff fb12 	bl	8001ad8 <HAL_GetTick>
 80024b4:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b20      	cmp	r3, #32
 80024c0:	f040 821d 	bne.w	80028fe <HAL_I2C_Master_Receive+0x466>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2319      	movs	r3, #25
 80024ca:	2201      	movs	r2, #1
 80024cc:	4987      	ldr	r1, [pc, #540]	; (80026ec <HAL_I2C_Master_Receive+0x254>)
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 fb66 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80024da:	2302      	movs	r3, #2
 80024dc:	e210      	b.n	8002900 <HAL_I2C_Master_Receive+0x468>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_I2C_Master_Receive+0x54>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e209      	b.n	8002900 <HAL_I2C_Master_Receive+0x468>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d007      	beq.n	8002512 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0201 	orr.w	r2, r2, #1
 8002510:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002520:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2222      	movs	r2, #34	; 0x22
 8002526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2210      	movs	r2, #16
 800252e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	893a      	ldrh	r2, [r7, #8]
 8002542:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4a6a      	ldr	r2, [pc, #424]	; (80026f0 <HAL_I2C_Master_Receive+0x258>)
 8002548:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002554:	8979      	ldrh	r1, [r7, #10]
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 fa58 	bl	8002a10 <I2C_MasterRequestRead>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00f      	beq.n	8002586 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	2b04      	cmp	r3, #4
 800256c:	d105      	bne.n	800257a <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e1c2      	b.n	8002900 <HAL_I2C_Master_Receive+0x468>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e1bc      	b.n	8002900 <HAL_I2C_Master_Receive+0x468>
      }
    }

    if(hi2c->XferSize == 0U)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258a:	2b00      	cmp	r3, #0
 800258c:	d113      	bne.n	80025b6 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800258e:	2300      	movs	r3, #0
 8002590:	623b      	str	r3, [r7, #32]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	623b      	str	r3, [r7, #32]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	623b      	str	r3, [r7, #32]
 80025a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	e190      	b.n	80028d8 <HAL_I2C_Master_Receive+0x440>
    }
    else if(hi2c->XferSize == 1U)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d11d      	bne.n	80025fa <HAL_I2C_Master_Receive+0x162>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025cc:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025ce:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d0:	2300      	movs	r3, #0
 80025d2:	61fb      	str	r3, [r7, #28]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	61fb      	str	r3, [r7, #28]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	61fb      	str	r3, [r7, #28]
 80025e4:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025f6:	b662      	cpsie	i
 80025f8:	e16e      	b.n	80028d8 <HAL_I2C_Master_Receive+0x440>

      /* Re-enable IRQs */
      __enable_irq(); 
    }
    else if(hi2c->XferSize == 2U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d11d      	bne.n	800263e <HAL_I2C_Master_Receive+0x1a6>
    {
      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002610:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002612:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002614:	2300      	movs	r3, #0
 8002616:	61bb      	str	r3, [r7, #24]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	61bb      	str	r3, [r7, #24]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002638:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800263a:	b662      	cpsie	i
 800263c:	e14c      	b.n	80028d8 <HAL_I2C_Master_Receive+0x440>
      __enable_irq(); 
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800264c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8002664:	e138      	b.n	80028d8 <HAL_I2C_Master_Receive+0x440>
    {
      if(hi2c->XferSize <= 3U)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266a:	2b03      	cmp	r3, #3
 800266c:	f200 80ef 	bhi.w	800284e <HAL_I2C_Master_Receive+0x3b6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002674:	2b01      	cmp	r3, #1
 8002676:	d127      	bne.n	80026c8 <HAL_I2C_Master_Receive+0x230>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 fbc8 	bl	8002e12 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d007      	beq.n	8002698 <HAL_I2C_Master_Receive+0x200>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	2b20      	cmp	r3, #32
 800268e:	d101      	bne.n	8002694 <HAL_I2C_Master_Receive+0x1fc>
            {
              return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e135      	b.n	8002900 <HAL_I2C_Master_Receive+0x468>
            }
            else
            {
              return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e133      	b.n	8002900 <HAL_I2C_Master_Receive+0x468>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6918      	ldr	r0, [r3, #16]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	1c59      	adds	r1, r3, #1
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	6251      	str	r1, [r2, #36]	; 0x24
 80026a8:	b2c2      	uxtb	r2, r0
 80026aa:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026c6:	e107      	b.n	80028d8 <HAL_I2C_Master_Receive+0x440>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d14c      	bne.n	800276a <HAL_I2C_Master_Receive+0x2d2>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d6:	2200      	movs	r2, #0
 80026d8:	4906      	ldr	r1, [pc, #24]	; (80026f4 <HAL_I2C_Master_Receive+0x25c>)
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 fa60 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d008      	beq.n	80026f8 <HAL_I2C_Master_Receive+0x260>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e10a      	b.n	8002900 <HAL_I2C_Master_Receive+0x468>
 80026ea:	bf00      	nop
 80026ec:	00100002 	.word	0x00100002
 80026f0:	ffff0000 	.word	0xffff0000
 80026f4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80026f8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
           __disable_irq();

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002708:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6918      	ldr	r0, [r3, #16]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	1c59      	adds	r1, r3, #1
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	6251      	str	r1, [r2, #36]	; 0x24
 800271a:	b2c2      	uxtb	r2, r0
 800271c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002722:	3b01      	subs	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272e:	b29b      	uxth	r3, r3
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002738:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6918      	ldr	r0, [r3, #16]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	1c59      	adds	r1, r3, #1
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	6251      	str	r1, [r2, #36]	; 0x24
 800274a:	b2c2      	uxtb	r2, r0
 800274c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002768:	e0b6      	b.n	80028d8 <HAL_I2C_Master_Receive+0x440>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002770:	2200      	movs	r2, #0
 8002772:	4965      	ldr	r1, [pc, #404]	; (8002908 <HAL_I2C_Master_Receive+0x470>)
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 fa13 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <HAL_I2C_Master_Receive+0x2ec>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e0bd      	b.n	8002900 <HAL_I2C_Master_Receive+0x468>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002792:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002794:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6918      	ldr	r0, [r3, #16]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	1c59      	adds	r1, r3, #1
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	6251      	str	r1, [r2, #36]	; 0x24
 80027a6:	b2c2      	uxtb	r2, r0
 80027a8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ca:	2200      	movs	r2, #0
 80027cc:	494e      	ldr	r1, [pc, #312]	; (8002908 <HAL_I2C_Master_Receive+0x470>)
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 f9e6 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_I2C_Master_Receive+0x346>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e090      	b.n	8002900 <HAL_I2C_Master_Receive+0x468>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ec:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6918      	ldr	r0, [r3, #16]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	1c59      	adds	r1, r3, #1
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	6251      	str	r1, [r2, #36]	; 0x24
 80027fe:	b2c2      	uxtb	r2, r0
 8002800:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002812:	b29b      	uxth	r3, r3
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800281c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq(); 

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6918      	ldr	r0, [r3, #16]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	1c59      	adds	r1, r3, #1
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	6251      	str	r1, [r2, #36]	; 0x24
 800282e:	b2c2      	uxtb	r2, r0
 8002830:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002842:	b29b      	uxth	r3, r3
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800284c:	e044      	b.n	80028d8 <HAL_I2C_Master_Receive+0x440>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800284e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002850:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 fadd 	bl	8002e12 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d007      	beq.n	800286e <HAL_I2C_Master_Receive+0x3d6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	2b20      	cmp	r3, #32
 8002864:	d101      	bne.n	800286a <HAL_I2C_Master_Receive+0x3d2>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e04a      	b.n	8002900 <HAL_I2C_Master_Receive+0x468>
          }
          else
          {
            return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e048      	b.n	8002900 <HAL_I2C_Master_Receive+0x468>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6918      	ldr	r0, [r3, #16]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	1c59      	adds	r1, r3, #1
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	6251      	str	r1, [r2, #36]	; 0x24
 800287e:	b2c2      	uxtb	r2, r0
 8002880:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002886:	3b01      	subs	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002892:	b29b      	uxth	r3, r3
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d116      	bne.n	80028d8 <HAL_I2C_Master_Receive+0x440>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6918      	ldr	r0, [r3, #16]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	1c59      	adds	r1, r3, #1
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	6251      	str	r1, [r2, #36]	; 0x24
 80028ba:	b2c2      	uxtb	r2, r0
 80028bc:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f47f aec2 	bne.w	8002666 <HAL_I2C_Master_Receive+0x1ce>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	e000      	b.n	8002900 <HAL_I2C_Master_Receive+0x468>
  }
  else
  {
    return HAL_BUSY;
 80028fe:	2302      	movs	r3, #2
  }
}
 8002900:	4618      	mov	r0, r3
 8002902:	3728      	adds	r7, #40	; 0x28
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	00010004 	.word	0x00010004

0800290c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af02      	add	r7, sp, #8
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	607a      	str	r2, [r7, #4]
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	460b      	mov	r3, r1
 800291a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b04      	cmp	r3, #4
 8002926:	d006      	beq.n	8002936 <I2C_MasterRequestWrite+0x2a>
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d003      	beq.n	8002936 <I2C_MasterRequestWrite+0x2a>
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002934:	d108      	bne.n	8002948 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	e00b      	b.n	8002960 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	2b12      	cmp	r3, #18
 800294e:	d107      	bne.n	8002960 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800295e:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 f917 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e041      	b.n	8002a00 <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002984:	d108      	bne.n	8002998 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002986:	897b      	ldrh	r3, [r7, #10]
 8002988:	b2db      	uxtb	r3, r3
 800298a:	461a      	mov	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002994:	611a      	str	r2, [r3, #16]
 8002996:	e021      	b.n	80029dc <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002998:	897b      	ldrh	r3, [r7, #10]
 800299a:	11db      	asrs	r3, r3, #7
 800299c:	b2db      	uxtb	r3, r3
 800299e:	f003 0306 	and.w	r3, r3, #6
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f063 030f 	orn	r3, r3, #15
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	4914      	ldr	r1, [pc, #80]	; (8002a08 <I2C_MasterRequestWrite+0xfc>)
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 f943 	bl	8002c42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d007      	beq.n	80029d2 <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d101      	bne.n	80029ce <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e018      	b.n	8002a00 <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e016      	b.n	8002a00 <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029d2:	897b      	ldrh	r3, [r7, #10]
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	490a      	ldr	r1, [pc, #40]	; (8002a0c <I2C_MasterRequestWrite+0x100>)
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f92d 	bl	8002c42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d007      	beq.n	80029fe <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d101      	bne.n	80029fa <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e002      	b.n	8002a00 <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e000      	b.n	8002a00 <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	00010008 	.word	0x00010008
 8002a0c:	00010002 	.word	0x00010002

08002a10 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a34:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d006      	beq.n	8002a4a <I2C_MasterRequestRead+0x3a>
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d003      	beq.n	8002a4a <I2C_MasterRequestRead+0x3a>
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a48:	d108      	bne.n	8002a5c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	e00b      	b.n	8002a74 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	2b11      	cmp	r3, #17
 8002a62:	d107      	bne.n	8002a74 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a72:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f88d 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e07f      	b.n	8002b90 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a98:	d108      	bne.n	8002aac <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a9a:	897b      	ldrh	r3, [r7, #10]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	611a      	str	r2, [r3, #16]
 8002aaa:	e05f      	b.n	8002b6c <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002aac:	897b      	ldrh	r3, [r7, #10]
 8002aae:	11db      	asrs	r3, r3, #7
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	f003 0306 	and.w	r3, r3, #6
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	f063 030f 	orn	r3, r3, #15
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	4933      	ldr	r1, [pc, #204]	; (8002b98 <I2C_MasterRequestRead+0x188>)
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f8b9 	bl	8002c42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d007      	beq.n	8002ae6 <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d101      	bne.n	8002ae2 <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e056      	b.n	8002b90 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e054      	b.n	8002b90 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ae6:	897b      	ldrh	r3, [r7, #10]
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	4929      	ldr	r1, [pc, #164]	; (8002b9c <I2C_MasterRequestRead+0x18c>)
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f8a3 	bl	8002c42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d007      	beq.n	8002b12 <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d101      	bne.n	8002b0e <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e040      	b.n	8002b90 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e03e      	b.n	8002b90 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b12:	2300      	movs	r3, #0
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b36:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f82b 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e01d      	b.n	8002b90 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002b54:	897b      	ldrh	r3, [r7, #10]
 8002b56:	11db      	asrs	r3, r3, #7
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	f003 0306 	and.w	r3, r3, #6
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	f063 030e 	orn	r3, r3, #14
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	490a      	ldr	r1, [pc, #40]	; (8002b9c <I2C_MasterRequestRead+0x18c>)
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f865 	bl	8002c42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d007      	beq.n	8002b8e <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d101      	bne.n	8002b8a <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e002      	b.n	8002b90 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e000      	b.n	8002b90 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	00010008 	.word	0x00010008
 8002b9c:	00010002 	.word	0x00010002

08002ba0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	4613      	mov	r3, r2
 8002bae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002bb0:	e01f      	b.n	8002bf2 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb8:	d01b      	beq.n	8002bf2 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d007      	beq.n	8002bd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bc0:	f7fe ff8a 	bl	8001ad8 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d210      	bcs.n	8002bf2 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e023      	b.n	8002c3a <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	0c1b      	lsrs	r3, r3, #16
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d10d      	bne.n	8002c18 <I2C_WaitOnFlagUntilTimeout+0x78>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	43da      	mvns	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	4013      	ands	r3, r2
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	bf0c      	ite	eq
 8002c0e:	2301      	moveq	r3, #1
 8002c10:	2300      	movne	r3, #0
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	e00c      	b.n	8002c32 <I2C_WaitOnFlagUntilTimeout+0x92>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	4013      	ands	r3, r2
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	bf0c      	ite	eq
 8002c2a:	2301      	moveq	r3, #1
 8002c2c:	2300      	movne	r3, #0
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	461a      	mov	r2, r3
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d0bc      	beq.n	8002bb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	607a      	str	r2, [r7, #4]
 8002c4e:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c50:	e040      	b.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c60:	d11c      	bne.n	8002c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c70:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c7a:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2204      	movs	r2, #4
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e03c      	b.n	8002d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca2:	d017      	beq.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d007      	beq.n	8002cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8002caa:	f7fe ff15 	bl	8001ad8 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d20c      	bcs.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e020      	b.n	8002d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	0c1b      	lsrs	r3, r3, #16
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d10c      	bne.n	8002cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf14      	ite	ne
 8002cf0:	2301      	movne	r3, #1
 8002cf2:	2300      	moveq	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	e00b      	b.n	8002d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	43da      	mvns	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4013      	ands	r3, r2
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	bf14      	ite	ne
 8002d0a:	2301      	movne	r3, #1
 8002d0c:	2300      	moveq	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d19e      	bne.n	8002c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d2a:	e029      	b.n	8002d80 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 f8ba 	bl	8002ea6 <I2C_IsAcknowledgeFailed>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e029      	b.n	8002d90 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d42:	d01d      	beq.n	8002d80 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d007      	beq.n	8002d5a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d4a:	f7fe fec5 	bl	8001ad8 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d212      	bcs.n	8002d80 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	f043 0220 	orr.w	r2, r3, #32
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e007      	b.n	8002d90 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8a:	2b80      	cmp	r3, #128	; 0x80
 8002d8c:	d1ce      	bne.n	8002d2c <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002da4:	e029      	b.n	8002dfa <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f87d 	bl	8002ea6 <I2C_IsAcknowledgeFailed>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e029      	b.n	8002e0a <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbc:	d01d      	beq.n	8002dfa <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d007      	beq.n	8002dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002dc4:	f7fe fe88 	bl	8001ad8 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d212      	bcs.n	8002dfa <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	f043 0220 	orr.w	r2, r3, #32
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e007      	b.n	8002e0a <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d1ce      	bne.n	8002da6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b084      	sub	sp, #16
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e1e:	e036      	b.n	8002e8e <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b10      	cmp	r3, #16
 8002e2c:	d114      	bne.n	8002e58 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f06f 0210 	mvn.w	r2, #16
 8002e36:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e022      	b.n	8002e9e <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d007      	beq.n	8002e6e <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8002e5e:	f7fe fe3b 	bl	8001ad8 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d20f      	bcs.n	8002e8e <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f043 0220 	orr.w	r2, r3, #32
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e007      	b.n	8002e9e <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e98:	2b40      	cmp	r3, #64	; 0x40
 8002e9a:	d1c1      	bne.n	8002e20 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ebc:	d114      	bne.n	8002ee8 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ec6:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2204      	movs	r2, #4
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 8087 	beq.w	800301c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f0e:	4b92      	ldr	r3, [pc, #584]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d00c      	beq.n	8002f34 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f1a:	4b8f      	ldr	r3, [pc, #572]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d112      	bne.n	8002f4c <HAL_RCC_OscConfig+0x58>
 8002f26:	4b8c      	ldr	r3, [pc, #560]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f32:	d10b      	bne.n	8002f4c <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f34:	4b88      	ldr	r3, [pc, #544]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d06c      	beq.n	800301a <HAL_RCC_OscConfig+0x126>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d168      	bne.n	800301a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e22d      	b.n	80033a8 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f54:	d106      	bne.n	8002f64 <HAL_RCC_OscConfig+0x70>
 8002f56:	4b80      	ldr	r3, [pc, #512]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a7f      	ldr	r2, [pc, #508]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e02e      	b.n	8002fc2 <HAL_RCC_OscConfig+0xce>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10c      	bne.n	8002f86 <HAL_RCC_OscConfig+0x92>
 8002f6c:	4b7a      	ldr	r3, [pc, #488]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a79      	ldr	r2, [pc, #484]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 8002f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	4b77      	ldr	r3, [pc, #476]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a76      	ldr	r2, [pc, #472]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 8002f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	e01d      	b.n	8002fc2 <HAL_RCC_OscConfig+0xce>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f8e:	d10c      	bne.n	8002faa <HAL_RCC_OscConfig+0xb6>
 8002f90:	4b71      	ldr	r3, [pc, #452]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a70      	ldr	r2, [pc, #448]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 8002f96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	4b6e      	ldr	r3, [pc, #440]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a6d      	ldr	r2, [pc, #436]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 8002fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	e00b      	b.n	8002fc2 <HAL_RCC_OscConfig+0xce>
 8002faa:	4b6b      	ldr	r3, [pc, #428]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a6a      	ldr	r2, [pc, #424]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 8002fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	4b68      	ldr	r3, [pc, #416]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a67      	ldr	r2, [pc, #412]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 8002fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fc0:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d013      	beq.n	8002ff2 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fca:	f7fe fd85 	bl	8001ad8 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd2:	f7fe fd81 	bl	8001ad8 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b64      	cmp	r3, #100	; 0x64
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e1e1      	b.n	80033a8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe4:	4b5c      	ldr	r3, [pc, #368]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0xde>
 8002ff0:	e014      	b.n	800301c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff2:	f7fe fd71 	bl	8001ad8 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ffa:	f7fe fd6d 	bl	8001ad8 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b64      	cmp	r3, #100	; 0x64
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e1cd      	b.n	80033a8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300c:	4b52      	ldr	r3, [pc, #328]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f0      	bne.n	8002ffa <HAL_RCC_OscConfig+0x106>
 8003018:	e000      	b.n	800301c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800301a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d063      	beq.n	80030f0 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003028:	4b4b      	ldr	r3, [pc, #300]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 030c 	and.w	r3, r3, #12
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00b      	beq.n	800304c <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003034:	4b48      	ldr	r3, [pc, #288]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 030c 	and.w	r3, r3, #12
 800303c:	2b08      	cmp	r3, #8
 800303e:	d11c      	bne.n	800307a <HAL_RCC_OscConfig+0x186>
 8003040:	4b45      	ldr	r3, [pc, #276]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d116      	bne.n	800307a <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304c:	4b42      	ldr	r3, [pc, #264]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <HAL_RCC_OscConfig+0x170>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d001      	beq.n	8003064 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e1a1      	b.n	80033a8 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003064:	4b3c      	ldr	r3, [pc, #240]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4939      	ldr	r1, [pc, #228]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 8003074:	4313      	orrs	r3, r2
 8003076:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003078:	e03a      	b.n	80030f0 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d020      	beq.n	80030c4 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003082:	4b36      	ldr	r3, [pc, #216]	; (800315c <HAL_RCC_OscConfig+0x268>)
 8003084:	2201      	movs	r2, #1
 8003086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7fe fd26 	bl	8001ad8 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003090:	f7fe fd22 	bl	8001ad8 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e182      	b.n	80033a8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a2:	4b2d      	ldr	r3, [pc, #180]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0f0      	beq.n	8003090 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ae:	4b2a      	ldr	r3, [pc, #168]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4926      	ldr	r1, [pc, #152]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	600b      	str	r3, [r1, #0]
 80030c2:	e015      	b.n	80030f0 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c4:	4b25      	ldr	r3, [pc, #148]	; (800315c <HAL_RCC_OscConfig+0x268>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ca:	f7fe fd05 	bl	8001ad8 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030d2:	f7fe fd01 	bl	8001ad8 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e161      	b.n	80033a8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e4:	4b1c      	ldr	r3, [pc, #112]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f0      	bne.n	80030d2 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d039      	beq.n	8003170 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d019      	beq.n	8003138 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003104:	4b16      	ldr	r3, [pc, #88]	; (8003160 <HAL_RCC_OscConfig+0x26c>)
 8003106:	2201      	movs	r2, #1
 8003108:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800310a:	f7fe fce5 	bl	8001ad8 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003112:	f7fe fce1 	bl	8001ad8 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e141      	b.n	80033a8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <HAL_RCC_OscConfig+0x264>)
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8003130:	2001      	movs	r0, #1
 8003132:	f000 fae3 	bl	80036fc <RCC_Delay>
 8003136:	e01b      	b.n	8003170 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003138:	4b09      	ldr	r3, [pc, #36]	; (8003160 <HAL_RCC_OscConfig+0x26c>)
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313e:	f7fe fccb 	bl	8001ad8 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003144:	e00e      	b.n	8003164 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003146:	f7fe fcc7 	bl	8001ad8 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d907      	bls.n	8003164 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e127      	b.n	80033a8 <HAL_RCC_OscConfig+0x4b4>
 8003158:	40021000 	.word	0x40021000
 800315c:	42420000 	.word	0x42420000
 8003160:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003164:	4b92      	ldr	r3, [pc, #584]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1ea      	bne.n	8003146 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80a6 	beq.w	80032ca <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800317e:	2300      	movs	r3, #0
 8003180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003182:	4b8b      	ldr	r3, [pc, #556]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10d      	bne.n	80031aa <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318e:	4b88      	ldr	r3, [pc, #544]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	4a87      	ldr	r2, [pc, #540]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 8003194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003198:	61d3      	str	r3, [r2, #28]
 800319a:	4b85      	ldr	r3, [pc, #532]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80031a6:	2301      	movs	r3, #1
 80031a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031aa:	4b82      	ldr	r3, [pc, #520]	; (80033b4 <HAL_RCC_OscConfig+0x4c0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d118      	bne.n	80031e8 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b6:	4b7f      	ldr	r3, [pc, #508]	; (80033b4 <HAL_RCC_OscConfig+0x4c0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a7e      	ldr	r2, [pc, #504]	; (80033b4 <HAL_RCC_OscConfig+0x4c0>)
 80031bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c2:	f7fe fc89 	bl	8001ad8 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ca:	f7fe fc85 	bl	8001ad8 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b64      	cmp	r3, #100	; 0x64
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e0e5      	b.n	80033a8 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	4b75      	ldr	r3, [pc, #468]	; (80033b4 <HAL_RCC_OscConfig+0x4c0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f0      	beq.n	80031ca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x30a>
 80031f0:	4b6f      	ldr	r3, [pc, #444]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4a6e      	ldr	r2, [pc, #440]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6213      	str	r3, [r2, #32]
 80031fc:	e02d      	b.n	800325a <HAL_RCC_OscConfig+0x366>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0x32c>
 8003206:	4b6a      	ldr	r3, [pc, #424]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	4a69      	ldr	r2, [pc, #420]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 800320c:	f023 0301 	bic.w	r3, r3, #1
 8003210:	6213      	str	r3, [r2, #32]
 8003212:	4b67      	ldr	r3, [pc, #412]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	4a66      	ldr	r2, [pc, #408]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 8003218:	f023 0304 	bic.w	r3, r3, #4
 800321c:	6213      	str	r3, [r2, #32]
 800321e:	e01c      	b.n	800325a <HAL_RCC_OscConfig+0x366>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	2b05      	cmp	r3, #5
 8003226:	d10c      	bne.n	8003242 <HAL_RCC_OscConfig+0x34e>
 8003228:	4b61      	ldr	r3, [pc, #388]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	4a60      	ldr	r2, [pc, #384]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 800322e:	f043 0304 	orr.w	r3, r3, #4
 8003232:	6213      	str	r3, [r2, #32]
 8003234:	4b5e      	ldr	r3, [pc, #376]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	4a5d      	ldr	r2, [pc, #372]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	6213      	str	r3, [r2, #32]
 8003240:	e00b      	b.n	800325a <HAL_RCC_OscConfig+0x366>
 8003242:	4b5b      	ldr	r3, [pc, #364]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	4a5a      	ldr	r2, [pc, #360]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	6213      	str	r3, [r2, #32]
 800324e:	4b58      	ldr	r3, [pc, #352]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	4a57      	ldr	r2, [pc, #348]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 8003254:	f023 0304 	bic.w	r3, r3, #4
 8003258:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d015      	beq.n	800328e <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003262:	f7fe fc39 	bl	8001ad8 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800326a:	f7fe fc35 	bl	8001ad8 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f241 3288 	movw	r2, #5000	; 0x1388
 8003278:	4293      	cmp	r3, r2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e093      	b.n	80033a8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003280:	4b4b      	ldr	r3, [pc, #300]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0ee      	beq.n	800326a <HAL_RCC_OscConfig+0x376>
 800328c:	e014      	b.n	80032b8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328e:	f7fe fc23 	bl	8001ad8 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003294:	e00a      	b.n	80032ac <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003296:	f7fe fc1f 	bl	8001ad8 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e07d      	b.n	80033a8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ac:	4b40      	ldr	r3, [pc, #256]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1ee      	bne.n	8003296 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d105      	bne.n	80032ca <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032be:	4b3c      	ldr	r3, [pc, #240]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	4a3b      	ldr	r2, [pc, #236]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 80032c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d069      	beq.n	80033a6 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032d2:	4b37      	ldr	r3, [pc, #220]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d061      	beq.n	80033a2 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d146      	bne.n	8003374 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e6:	4b34      	ldr	r3, [pc, #208]	; (80033b8 <HAL_RCC_OscConfig+0x4c4>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7fe fbf4 	bl	8001ad8 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f4:	f7fe fbf0 	bl	8001ad8 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e050      	b.n	80033a8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003306:	4b2a      	ldr	r3, [pc, #168]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800331a:	d108      	bne.n	800332e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800331c:	4b24      	ldr	r3, [pc, #144]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	4921      	ldr	r1, [pc, #132]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 800332a:	4313      	orrs	r3, r2
 800332c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800332e:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a19      	ldr	r1, [r3, #32]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	430b      	orrs	r3, r1
 8003340:	491b      	ldr	r1, [pc, #108]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 8003342:	4313      	orrs	r3, r2
 8003344:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003346:	4b1c      	ldr	r3, [pc, #112]	; (80033b8 <HAL_RCC_OscConfig+0x4c4>)
 8003348:	2201      	movs	r2, #1
 800334a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334c:	f7fe fbc4 	bl	8001ad8 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003354:	f7fe fbc0 	bl	8001ad8 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e020      	b.n	80033a8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003366:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0x460>
 8003372:	e018      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003374:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <HAL_RCC_OscConfig+0x4c4>)
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337a:	f7fe fbad 	bl	8001ad8 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003382:	f7fe fba9 	bl	8001ad8 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e009      	b.n	80033a8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <HAL_RCC_OscConfig+0x4bc>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f0      	bne.n	8003382 <HAL_RCC_OscConfig+0x48e>
 80033a0:	e001      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40007000 	.word	0x40007000
 80033b8:	42420060 	.word	0x42420060

080033bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80033ca:	4b7e      	ldr	r3, [pc, #504]	; (80035c4 <HAL_RCC_ClockConfig+0x208>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d910      	bls.n	80033fa <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d8:	4b7a      	ldr	r3, [pc, #488]	; (80035c4 <HAL_RCC_ClockConfig+0x208>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f023 0207 	bic.w	r2, r3, #7
 80033e0:	4978      	ldr	r1, [pc, #480]	; (80035c4 <HAL_RCC_ClockConfig+0x208>)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033e8:	4b76      	ldr	r3, [pc, #472]	; (80035c4 <HAL_RCC_ClockConfig+0x208>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e0e0      	b.n	80035bc <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d020      	beq.n	8003448 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b00      	cmp	r3, #0
 8003410:	d005      	beq.n	800341e <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003412:	4b6d      	ldr	r3, [pc, #436]	; (80035c8 <HAL_RCC_ClockConfig+0x20c>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4a6c      	ldr	r2, [pc, #432]	; (80035c8 <HAL_RCC_ClockConfig+0x20c>)
 8003418:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800341c:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800342a:	4b67      	ldr	r3, [pc, #412]	; (80035c8 <HAL_RCC_ClockConfig+0x20c>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	4a66      	ldr	r2, [pc, #408]	; (80035c8 <HAL_RCC_ClockConfig+0x20c>)
 8003430:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003434:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003436:	4b64      	ldr	r3, [pc, #400]	; (80035c8 <HAL_RCC_ClockConfig+0x20c>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	4961      	ldr	r1, [pc, #388]	; (80035c8 <HAL_RCC_ClockConfig+0x20c>)
 8003444:	4313      	orrs	r3, r2
 8003446:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d06a      	beq.n	800352a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d107      	bne.n	800346c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345c:	4b5a      	ldr	r3, [pc, #360]	; (80035c8 <HAL_RCC_ClockConfig+0x20c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d115      	bne.n	8003494 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e0a7      	b.n	80035bc <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b02      	cmp	r3, #2
 8003472:	d107      	bne.n	8003484 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003474:	4b54      	ldr	r3, [pc, #336]	; (80035c8 <HAL_RCC_ClockConfig+0x20c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d109      	bne.n	8003494 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e09b      	b.n	80035bc <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003484:	4b50      	ldr	r3, [pc, #320]	; (80035c8 <HAL_RCC_ClockConfig+0x20c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e093      	b.n	80035bc <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003494:	4b4c      	ldr	r3, [pc, #304]	; (80035c8 <HAL_RCC_ClockConfig+0x20c>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f023 0203 	bic.w	r2, r3, #3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	4949      	ldr	r1, [pc, #292]	; (80035c8 <HAL_RCC_ClockConfig+0x20c>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034a6:	f7fe fb17 	bl	8001ad8 <HAL_GetTick>
 80034aa:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d112      	bne.n	80034da <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034b4:	e00a      	b.n	80034cc <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b6:	f7fe fb0f 	bl	8001ad8 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e077      	b.n	80035bc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034cc:	4b3e      	ldr	r3, [pc, #248]	; (80035c8 <HAL_RCC_ClockConfig+0x20c>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 030c 	and.w	r3, r3, #12
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d1ee      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xfa>
 80034d8:	e027      	b.n	800352a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d11d      	bne.n	800351e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034e2:	e00a      	b.n	80034fa <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e4:	f7fe faf8 	bl	8001ad8 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e060      	b.n	80035bc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034fa:	4b33      	ldr	r3, [pc, #204]	; (80035c8 <HAL_RCC_ClockConfig+0x20c>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f003 030c 	and.w	r3, r3, #12
 8003502:	2b08      	cmp	r3, #8
 8003504:	d1ee      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x128>
 8003506:	e010      	b.n	800352a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003508:	f7fe fae6 	bl	8001ad8 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	f241 3288 	movw	r2, #5000	; 0x1388
 8003516:	4293      	cmp	r3, r2
 8003518:	d901      	bls.n	800351e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e04e      	b.n	80035bc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800351e:	4b2a      	ldr	r3, [pc, #168]	; (80035c8 <HAL_RCC_ClockConfig+0x20c>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 030c 	and.w	r3, r3, #12
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1ee      	bne.n	8003508 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800352a:	4b26      	ldr	r3, [pc, #152]	; (80035c4 <HAL_RCC_ClockConfig+0x208>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d210      	bcs.n	800355a <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003538:	4b22      	ldr	r3, [pc, #136]	; (80035c4 <HAL_RCC_ClockConfig+0x208>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f023 0207 	bic.w	r2, r3, #7
 8003540:	4920      	ldr	r1, [pc, #128]	; (80035c4 <HAL_RCC_ClockConfig+0x208>)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	4313      	orrs	r3, r2
 8003546:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003548:	4b1e      	ldr	r3, [pc, #120]	; (80035c4 <HAL_RCC_ClockConfig+0x208>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d001      	beq.n	800355a <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e030      	b.n	80035bc <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b00      	cmp	r3, #0
 8003564:	d008      	beq.n	8003578 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003566:	4b18      	ldr	r3, [pc, #96]	; (80035c8 <HAL_RCC_ClockConfig+0x20c>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	4915      	ldr	r1, [pc, #84]	; (80035c8 <HAL_RCC_ClockConfig+0x20c>)
 8003574:	4313      	orrs	r3, r2
 8003576:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b00      	cmp	r3, #0
 8003582:	d009      	beq.n	8003598 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003584:	4b10      	ldr	r3, [pc, #64]	; (80035c8 <HAL_RCC_ClockConfig+0x20c>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	490d      	ldr	r1, [pc, #52]	; (80035c8 <HAL_RCC_ClockConfig+0x20c>)
 8003594:	4313      	orrs	r3, r2
 8003596:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003598:	f000 f81c 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 800359c:	4601      	mov	r1, r0
 800359e:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <HAL_RCC_ClockConfig+0x20c>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	f003 030f 	and.w	r3, r3, #15
 80035a8:	4a08      	ldr	r2, [pc, #32]	; (80035cc <HAL_RCC_ClockConfig+0x210>)
 80035aa:	5cd3      	ldrb	r3, [r2, r3]
 80035ac:	fa21 f303 	lsr.w	r3, r1, r3
 80035b0:	4a07      	ldr	r2, [pc, #28]	; (80035d0 <HAL_RCC_ClockConfig+0x214>)
 80035b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80035b4:	2000      	movs	r0, #0
 80035b6:	f7fe fa4d 	bl	8001a54 <HAL_InitTick>
  
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40022000 	.word	0x40022000
 80035c8:	40021000 	.word	0x40021000
 80035cc:	08004b34 	.word	0x08004b34
 80035d0:	20000000 	.word	0x20000000

080035d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d4:	b490      	push	{r4, r7}
 80035d6:	b08a      	sub	sp, #40	; 0x28
 80035d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035da:	4b2a      	ldr	r3, [pc, #168]	; (8003684 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035dc:	1d3c      	adds	r4, r7, #4
 80035de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035e4:	4b28      	ldr	r3, [pc, #160]	; (8003688 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	2300      	movs	r3, #0
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	2300      	movs	r3, #0
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035fe:	4b23      	ldr	r3, [pc, #140]	; (800368c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	2b04      	cmp	r3, #4
 800360c:	d002      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0x40>
 800360e:	2b08      	cmp	r3, #8
 8003610:	d003      	beq.n	800361a <HAL_RCC_GetSysClockFreq+0x46>
 8003612:	e02d      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003614:	4b1e      	ldr	r3, [pc, #120]	; (8003690 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003616:	623b      	str	r3, [r7, #32]
      break;
 8003618:	e02d      	b.n	8003676 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	0c9b      	lsrs	r3, r3, #18
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003626:	4413      	add	r3, r2
 8003628:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800362c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d013      	beq.n	8003660 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003638:	4b14      	ldr	r3, [pc, #80]	; (800368c <HAL_RCC_GetSysClockFreq+0xb8>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	0c5b      	lsrs	r3, r3, #17
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003646:	4413      	add	r3, r2
 8003648:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800364c:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	4a0f      	ldr	r2, [pc, #60]	; (8003690 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003652:	fb02 f203 	mul.w	r2, r2, r3
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	fbb2 f3f3 	udiv	r3, r2, r3
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
 800365e:	e004      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	4a0c      	ldr	r2, [pc, #48]	; (8003694 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003664:	fb02 f303 	mul.w	r3, r2, r3
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	623b      	str	r3, [r7, #32]
      break;
 800366e:	e002      	b.n	8003676 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003670:	4b07      	ldr	r3, [pc, #28]	; (8003690 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003672:	623b      	str	r3, [r7, #32]
      break;
 8003674:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003676:	6a3b      	ldr	r3, [r7, #32]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3728      	adds	r7, #40	; 0x28
 800367c:	46bd      	mov	sp, r7
 800367e:	bc90      	pop	{r4, r7}
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	08004b20 	.word	0x08004b20
 8003688:	08004b30 	.word	0x08004b30
 800368c:	40021000 	.word	0x40021000
 8003690:	007a1200 	.word	0x007a1200
 8003694:	003d0900 	.word	0x003d0900

08003698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800369c:	4b02      	ldr	r3, [pc, #8]	; (80036a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800369e:	681b      	ldr	r3, [r3, #0]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr
 80036a8:	20000000 	.word	0x20000000

080036ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036b0:	f7ff fff2 	bl	8003698 <HAL_RCC_GetHCLKFreq>
 80036b4:	4601      	mov	r1, r0
 80036b6:	4b05      	ldr	r3, [pc, #20]	; (80036cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	0a1b      	lsrs	r3, r3, #8
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	4a03      	ldr	r2, [pc, #12]	; (80036d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036c2:	5cd3      	ldrb	r3, [r2, r3]
 80036c4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80036c8:	4618      	mov	r0, r3
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40021000 	.word	0x40021000
 80036d0:	08004b44 	.word	0x08004b44

080036d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036d8:	f7ff ffde 	bl	8003698 <HAL_RCC_GetHCLKFreq>
 80036dc:	4601      	mov	r1, r0
 80036de:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	0adb      	lsrs	r3, r3, #11
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	4a03      	ldr	r2, [pc, #12]	; (80036f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ea:	5cd3      	ldrb	r3, [r2, r3]
 80036ec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80036f0:	4618      	mov	r0, r3
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40021000 	.word	0x40021000
 80036f8:	08004b44 	.word	0x08004b44

080036fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003704:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <RCC_Delay+0x34>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a0a      	ldr	r2, [pc, #40]	; (8003734 <RCC_Delay+0x38>)
 800370a:	fba2 2303 	umull	r2, r3, r2, r3
 800370e:	0a5b      	lsrs	r3, r3, #9
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	fb02 f303 	mul.w	r3, r2, r3
 8003716:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8003718:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	1e5a      	subs	r2, r3, #1
 800371e:	60fa      	str	r2, [r7, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1f9      	bne.n	8003718 <RCC_Delay+0x1c>
}
 8003724:	bf00      	nop
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	20000000 	.word	0x20000000
 8003734:	10624dd3 	.word	0x10624dd3

08003738 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e03f      	b.n	80037ca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7fe f8be 	bl	80018e0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2224      	movs	r2, #36	; 0x24
 8003768:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800377a:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f829 	bl	80037d4 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003790:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695a      	ldr	r2, [r3, #20]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037a0:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037b0:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037d4:	b5b0      	push	{r4, r5, r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80037dc:	2300      	movs	r3, #0
 80037de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	4313      	orrs	r3, r2
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003816:	f023 030c 	bic.w	r3, r3, #12
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6812      	ldr	r2, [r2, #0]
 800381e:	68f9      	ldr	r1, [r7, #12]
 8003820:	430b      	orrs	r3, r1
 8003822:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a6f      	ldr	r2, [pc, #444]	; (80039fc <UART_SetConfig+0x228>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d16b      	bne.n	800391c <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003844:	f7ff ff46 	bl	80036d4 <HAL_RCC_GetPCLK2Freq>
 8003848:	4602      	mov	r2, r0
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	009a      	lsls	r2, r3, #2
 8003852:	441a      	add	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	fbb2 f3f3 	udiv	r3, r2, r3
 800385e:	4a68      	ldr	r2, [pc, #416]	; (8003a00 <UART_SetConfig+0x22c>)
 8003860:	fba2 2303 	umull	r2, r3, r2, r3
 8003864:	095b      	lsrs	r3, r3, #5
 8003866:	011c      	lsls	r4, r3, #4
 8003868:	f7ff ff34 	bl	80036d4 <HAL_RCC_GetPCLK2Freq>
 800386c:	4602      	mov	r2, r0
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	009a      	lsls	r2, r3, #2
 8003876:	441a      	add	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003882:	f7ff ff27 	bl	80036d4 <HAL_RCC_GetPCLK2Freq>
 8003886:	4602      	mov	r2, r0
 8003888:	4613      	mov	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	009a      	lsls	r2, r3, #2
 8003890:	441a      	add	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	fbb2 f3f3 	udiv	r3, r2, r3
 800389c:	4a58      	ldr	r2, [pc, #352]	; (8003a00 <UART_SetConfig+0x22c>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	2264      	movs	r2, #100	; 0x64
 80038a6:	fb02 f303 	mul.w	r3, r2, r3
 80038aa:	1aeb      	subs	r3, r5, r3
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	3332      	adds	r3, #50	; 0x32
 80038b0:	4a53      	ldr	r2, [pc, #332]	; (8003a00 <UART_SetConfig+0x22c>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038bc:	441c      	add	r4, r3
 80038be:	f7ff ff09 	bl	80036d4 <HAL_RCC_GetPCLK2Freq>
 80038c2:	4602      	mov	r2, r0
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	009a      	lsls	r2, r3, #2
 80038cc:	441a      	add	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	fbb2 f5f3 	udiv	r5, r2, r3
 80038d8:	f7ff fefc 	bl	80036d4 <HAL_RCC_GetPCLK2Freq>
 80038dc:	4602      	mov	r2, r0
 80038de:	4613      	mov	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	009a      	lsls	r2, r3, #2
 80038e6:	441a      	add	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f2:	4a43      	ldr	r2, [pc, #268]	; (8003a00 <UART_SetConfig+0x22c>)
 80038f4:	fba2 2303 	umull	r2, r3, r2, r3
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	2264      	movs	r2, #100	; 0x64
 80038fc:	fb02 f303 	mul.w	r3, r2, r3
 8003900:	1aeb      	subs	r3, r5, r3
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	3332      	adds	r3, #50	; 0x32
 8003906:	4a3e      	ldr	r2, [pc, #248]	; (8003a00 <UART_SetConfig+0x22c>)
 8003908:	fba2 2303 	umull	r2, r3, r2, r3
 800390c:	095b      	lsrs	r3, r3, #5
 800390e:	f003 020f 	and.w	r2, r3, #15
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4422      	add	r2, r4
 8003918:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800391a:	e06a      	b.n	80039f2 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800391c:	f7ff fec6 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
 8003920:	4602      	mov	r2, r0
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	009a      	lsls	r2, r3, #2
 800392a:	441a      	add	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	fbb2 f3f3 	udiv	r3, r2, r3
 8003936:	4a32      	ldr	r2, [pc, #200]	; (8003a00 <UART_SetConfig+0x22c>)
 8003938:	fba2 2303 	umull	r2, r3, r2, r3
 800393c:	095b      	lsrs	r3, r3, #5
 800393e:	011c      	lsls	r4, r3, #4
 8003940:	f7ff feb4 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
 8003944:	4602      	mov	r2, r0
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	009a      	lsls	r2, r3, #2
 800394e:	441a      	add	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	fbb2 f5f3 	udiv	r5, r2, r3
 800395a:	f7ff fea7 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
 800395e:	4602      	mov	r2, r0
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	009a      	lsls	r2, r3, #2
 8003968:	441a      	add	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	fbb2 f3f3 	udiv	r3, r2, r3
 8003974:	4a22      	ldr	r2, [pc, #136]	; (8003a00 <UART_SetConfig+0x22c>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	2264      	movs	r2, #100	; 0x64
 800397e:	fb02 f303 	mul.w	r3, r2, r3
 8003982:	1aeb      	subs	r3, r5, r3
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	3332      	adds	r3, #50	; 0x32
 8003988:	4a1d      	ldr	r2, [pc, #116]	; (8003a00 <UART_SetConfig+0x22c>)
 800398a:	fba2 2303 	umull	r2, r3, r2, r3
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003994:	441c      	add	r4, r3
 8003996:	f7ff fe89 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
 800399a:	4602      	mov	r2, r0
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	009a      	lsls	r2, r3, #2
 80039a4:	441a      	add	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	fbb2 f5f3 	udiv	r5, r2, r3
 80039b0:	f7ff fe7c 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
 80039b4:	4602      	mov	r2, r0
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	009a      	lsls	r2, r3, #2
 80039be:	441a      	add	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ca:	4a0d      	ldr	r2, [pc, #52]	; (8003a00 <UART_SetConfig+0x22c>)
 80039cc:	fba2 2303 	umull	r2, r3, r2, r3
 80039d0:	095b      	lsrs	r3, r3, #5
 80039d2:	2264      	movs	r2, #100	; 0x64
 80039d4:	fb02 f303 	mul.w	r3, r2, r3
 80039d8:	1aeb      	subs	r3, r5, r3
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	3332      	adds	r3, #50	; 0x32
 80039de:	4a08      	ldr	r2, [pc, #32]	; (8003a00 <UART_SetConfig+0x22c>)
 80039e0:	fba2 2303 	umull	r2, r3, r2, r3
 80039e4:	095b      	lsrs	r3, r3, #5
 80039e6:	f003 020f 	and.w	r2, r3, #15
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4422      	add	r2, r4
 80039f0:	609a      	str	r2, [r3, #8]
}
 80039f2:	bf00      	nop
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bdb0      	pop	{r4, r5, r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40013800 	.word	0x40013800
 8003a00:	51eb851f 	.word	0x51eb851f

08003a04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003a04:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003a06:	e003      	b.n	8003a10 <LoopCopyDataInit>

08003a08 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003a0a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003a0c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003a0e:	3104      	adds	r1, #4

08003a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003a10:	480a      	ldr	r0, [pc, #40]	; (8003a3c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003a12:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003a14:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003a16:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003a18:	d3f6      	bcc.n	8003a08 <CopyDataInit>
  ldr r2, =_sbss
 8003a1a:	4a0a      	ldr	r2, [pc, #40]	; (8003a44 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003a1c:	e002      	b.n	8003a24 <LoopFillZerobss>

08003a1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003a1e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003a20:	f842 3b04 	str.w	r3, [r2], #4

08003a24 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003a24:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003a26:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003a28:	d3f9      	bcc.n	8003a1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003a2a:	f7fd ffc9 	bl	80019c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a2e:	f000 f815 	bl	8003a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a32:	f7fd fdbd 	bl	80015b0 <main>
  bx lr
 8003a36:	4770      	bx	lr
  ldr r3, =_sidata
 8003a38:	08004b98 	.word	0x08004b98
  ldr r0, =_sdata
 8003a3c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003a40:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8003a44:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8003a48:	20000128 	.word	0x20000128

08003a4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a4c:	e7fe      	b.n	8003a4c <ADC1_2_IRQHandler>
	...

08003a50 <__errno>:
 8003a50:	4b01      	ldr	r3, [pc, #4]	; (8003a58 <__errno+0x8>)
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	2000000c 	.word	0x2000000c

08003a5c <__libc_init_array>:
 8003a5c:	b570      	push	{r4, r5, r6, lr}
 8003a5e:	2500      	movs	r5, #0
 8003a60:	4e0c      	ldr	r6, [pc, #48]	; (8003a94 <__libc_init_array+0x38>)
 8003a62:	4c0d      	ldr	r4, [pc, #52]	; (8003a98 <__libc_init_array+0x3c>)
 8003a64:	1ba4      	subs	r4, r4, r6
 8003a66:	10a4      	asrs	r4, r4, #2
 8003a68:	42a5      	cmp	r5, r4
 8003a6a:	d109      	bne.n	8003a80 <__libc_init_array+0x24>
 8003a6c:	f001 f84c 	bl	8004b08 <_init>
 8003a70:	2500      	movs	r5, #0
 8003a72:	4e0a      	ldr	r6, [pc, #40]	; (8003a9c <__libc_init_array+0x40>)
 8003a74:	4c0a      	ldr	r4, [pc, #40]	; (8003aa0 <__libc_init_array+0x44>)
 8003a76:	1ba4      	subs	r4, r4, r6
 8003a78:	10a4      	asrs	r4, r4, #2
 8003a7a:	42a5      	cmp	r5, r4
 8003a7c:	d105      	bne.n	8003a8a <__libc_init_array+0x2e>
 8003a7e:	bd70      	pop	{r4, r5, r6, pc}
 8003a80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a84:	4798      	blx	r3
 8003a86:	3501      	adds	r5, #1
 8003a88:	e7ee      	b.n	8003a68 <__libc_init_array+0xc>
 8003a8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a8e:	4798      	blx	r3
 8003a90:	3501      	adds	r5, #1
 8003a92:	e7f2      	b.n	8003a7a <__libc_init_array+0x1e>
 8003a94:	08004b90 	.word	0x08004b90
 8003a98:	08004b90 	.word	0x08004b90
 8003a9c:	08004b90 	.word	0x08004b90
 8003aa0:	08004b94 	.word	0x08004b94

08003aa4 <memset>:
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	4402      	add	r2, r0
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d100      	bne.n	8003aae <memset+0xa>
 8003aac:	4770      	bx	lr
 8003aae:	f803 1b01 	strb.w	r1, [r3], #1
 8003ab2:	e7f9      	b.n	8003aa8 <memset+0x4>

08003ab4 <pow>:
 8003ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab8:	b08f      	sub	sp, #60	; 0x3c
 8003aba:	461d      	mov	r5, r3
 8003abc:	4680      	mov	r8, r0
 8003abe:	4689      	mov	r9, r1
 8003ac0:	4614      	mov	r4, r2
 8003ac2:	f000 f955 	bl	8003d70 <__ieee754_pow>
 8003ac6:	4fa1      	ldr	r7, [pc, #644]	; (8003d4c <pow+0x298>)
 8003ac8:	e9cd 0100 	strd	r0, r1, [sp]
 8003acc:	f997 3000 	ldrsb.w	r3, [r7]
 8003ad0:	463e      	mov	r6, r7
 8003ad2:	9302      	str	r3, [sp, #8]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	d05f      	beq.n	8003b98 <pow+0xe4>
 8003ad8:	4622      	mov	r2, r4
 8003ada:	462b      	mov	r3, r5
 8003adc:	4620      	mov	r0, r4
 8003ade:	4629      	mov	r1, r5
 8003ae0:	f7fc ff8c 	bl	80009fc <__aeabi_dcmpun>
 8003ae4:	4682      	mov	sl, r0
 8003ae6:	2800      	cmp	r0, #0
 8003ae8:	d156      	bne.n	8003b98 <pow+0xe4>
 8003aea:	4642      	mov	r2, r8
 8003aec:	464b      	mov	r3, r9
 8003aee:	4640      	mov	r0, r8
 8003af0:	4649      	mov	r1, r9
 8003af2:	f7fc ff83 	bl	80009fc <__aeabi_dcmpun>
 8003af6:	9003      	str	r0, [sp, #12]
 8003af8:	b1e8      	cbz	r0, 8003b36 <pow+0x82>
 8003afa:	2200      	movs	r2, #0
 8003afc:	2300      	movs	r3, #0
 8003afe:	4620      	mov	r0, r4
 8003b00:	4629      	mov	r1, r5
 8003b02:	f7fc ff49 	bl	8000998 <__aeabi_dcmpeq>
 8003b06:	2800      	cmp	r0, #0
 8003b08:	d046      	beq.n	8003b98 <pow+0xe4>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	9304      	str	r3, [sp, #16]
 8003b10:	4b8f      	ldr	r3, [pc, #572]	; (8003d50 <pow+0x29c>)
 8003b12:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003b16:	9305      	str	r3, [sp, #20]
 8003b18:	4b8e      	ldr	r3, [pc, #568]	; (8003d54 <pow+0x2a0>)
 8003b1a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003b1e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003b22:	9b02      	ldr	r3, [sp, #8]
 8003b24:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d031      	beq.n	8003b90 <pow+0xdc>
 8003b2c:	a804      	add	r0, sp, #16
 8003b2e:	f000 fedf 	bl	80048f0 <matherr>
 8003b32:	bb38      	cbnz	r0, 8003b84 <pow+0xd0>
 8003b34:	e058      	b.n	8003be8 <pow+0x134>
 8003b36:	f04f 0a00 	mov.w	sl, #0
 8003b3a:	f04f 0b00 	mov.w	fp, #0
 8003b3e:	4652      	mov	r2, sl
 8003b40:	465b      	mov	r3, fp
 8003b42:	4640      	mov	r0, r8
 8003b44:	4649      	mov	r1, r9
 8003b46:	f7fc ff27 	bl	8000998 <__aeabi_dcmpeq>
 8003b4a:	2800      	cmp	r0, #0
 8003b4c:	d051      	beq.n	8003bf2 <pow+0x13e>
 8003b4e:	4652      	mov	r2, sl
 8003b50:	465b      	mov	r3, fp
 8003b52:	4620      	mov	r0, r4
 8003b54:	4629      	mov	r1, r5
 8003b56:	f7fc ff1f 	bl	8000998 <__aeabi_dcmpeq>
 8003b5a:	4606      	mov	r6, r0
 8003b5c:	b308      	cbz	r0, 8003ba2 <pow+0xee>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	9304      	str	r3, [sp, #16]
 8003b62:	4b7b      	ldr	r3, [pc, #492]	; (8003d50 <pow+0x29c>)
 8003b64:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003b68:	9305      	str	r3, [sp, #20]
 8003b6a:	9b03      	ldr	r3, [sp, #12]
 8003b6c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003b70:	930c      	str	r3, [sp, #48]	; 0x30
 8003b72:	9b02      	ldr	r3, [sp, #8]
 8003b74:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0d7      	beq.n	8003b2c <pow+0x78>
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	4b75      	ldr	r3, [pc, #468]	; (8003d54 <pow+0x2a0>)
 8003b80:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003b84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b86:	b11b      	cbz	r3, 8003b90 <pow+0xdc>
 8003b88:	f7ff ff62 	bl	8003a50 <__errno>
 8003b8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b8e:	6003      	str	r3, [r0, #0]
 8003b90:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8003b94:	e9cd 3400 	strd	r3, r4, [sp]
 8003b98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b9c:	b00f      	add	sp, #60	; 0x3c
 8003b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	4629      	mov	r1, r5
 8003ba6:	f000 fe9d 	bl	80048e4 <finite>
 8003baa:	2800      	cmp	r0, #0
 8003bac:	d0f4      	beq.n	8003b98 <pow+0xe4>
 8003bae:	4652      	mov	r2, sl
 8003bb0:	465b      	mov	r3, fp
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	4629      	mov	r1, r5
 8003bb6:	f7fc fef9 	bl	80009ac <__aeabi_dcmplt>
 8003bba:	2800      	cmp	r0, #0
 8003bbc:	d0ec      	beq.n	8003b98 <pow+0xe4>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	9304      	str	r3, [sp, #16]
 8003bc2:	4b63      	ldr	r3, [pc, #396]	; (8003d50 <pow+0x29c>)
 8003bc4:	960c      	str	r6, [sp, #48]	; 0x30
 8003bc6:	9305      	str	r3, [sp, #20]
 8003bc8:	f997 3000 	ldrsb.w	r3, [r7]
 8003bcc:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003bd0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003bd4:	b913      	cbnz	r3, 8003bdc <pow+0x128>
 8003bd6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003bda:	e7a7      	b.n	8003b2c <pow+0x78>
 8003bdc:	2000      	movs	r0, #0
 8003bde:	495e      	ldr	r1, [pc, #376]	; (8003d58 <pow+0x2a4>)
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003be6:	d1a1      	bne.n	8003b2c <pow+0x78>
 8003be8:	f7ff ff32 	bl	8003a50 <__errno>
 8003bec:	2321      	movs	r3, #33	; 0x21
 8003bee:	6003      	str	r3, [r0, #0]
 8003bf0:	e7c8      	b.n	8003b84 <pow+0xd0>
 8003bf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003bf6:	f000 fe75 	bl	80048e4 <finite>
 8003bfa:	9002      	str	r0, [sp, #8]
 8003bfc:	2800      	cmp	r0, #0
 8003bfe:	d177      	bne.n	8003cf0 <pow+0x23c>
 8003c00:	4640      	mov	r0, r8
 8003c02:	4649      	mov	r1, r9
 8003c04:	f000 fe6e 	bl	80048e4 <finite>
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	d071      	beq.n	8003cf0 <pow+0x23c>
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	4629      	mov	r1, r5
 8003c10:	f000 fe68 	bl	80048e4 <finite>
 8003c14:	2800      	cmp	r0, #0
 8003c16:	d06b      	beq.n	8003cf0 <pow+0x23c>
 8003c18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4610      	mov	r0, r2
 8003c20:	f7fc feec 	bl	80009fc <__aeabi_dcmpun>
 8003c24:	f997 7000 	ldrsb.w	r7, [r7]
 8003c28:	4b49      	ldr	r3, [pc, #292]	; (8003d50 <pow+0x29c>)
 8003c2a:	b1a0      	cbz	r0, 8003c56 <pow+0x1a2>
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003c32:	9b02      	ldr	r3, [sp, #8]
 8003c34:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003c38:	930c      	str	r3, [sp, #48]	; 0x30
 8003c3a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003c3e:	2f00      	cmp	r7, #0
 8003c40:	d0c9      	beq.n	8003bd6 <pow+0x122>
 8003c42:	4652      	mov	r2, sl
 8003c44:	465b      	mov	r3, fp
 8003c46:	4650      	mov	r0, sl
 8003c48:	4659      	mov	r1, fp
 8003c4a:	f7fc fd67 	bl	800071c <__aeabi_ddiv>
 8003c4e:	2f02      	cmp	r7, #2
 8003c50:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003c54:	e7c7      	b.n	8003be6 <pow+0x132>
 8003c56:	2203      	movs	r2, #3
 8003c58:	900c      	str	r0, [sp, #48]	; 0x30
 8003c5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003c5e:	4620      	mov	r0, r4
 8003c60:	4629      	mov	r1, r5
 8003c62:	2200      	movs	r2, #0
 8003c64:	4b3d      	ldr	r3, [pc, #244]	; (8003d5c <pow+0x2a8>)
 8003c66:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003c6a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003c6e:	f7fc fc2b 	bl	80004c8 <__aeabi_dmul>
 8003c72:	4604      	mov	r4, r0
 8003c74:	460d      	mov	r5, r1
 8003c76:	bb17      	cbnz	r7, 8003cbe <pow+0x20a>
 8003c78:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003c7c:	4b38      	ldr	r3, [pc, #224]	; (8003d60 <pow+0x2ac>)
 8003c7e:	4640      	mov	r0, r8
 8003c80:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003c84:	4649      	mov	r1, r9
 8003c86:	4652      	mov	r2, sl
 8003c88:	465b      	mov	r3, fp
 8003c8a:	f7fc fe8f 	bl	80009ac <__aeabi_dcmplt>
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	d054      	beq.n	8003d3c <pow+0x288>
 8003c92:	4620      	mov	r0, r4
 8003c94:	4629      	mov	r1, r5
 8003c96:	f000 fe33 	bl	8004900 <rint>
 8003c9a:	4622      	mov	r2, r4
 8003c9c:	462b      	mov	r3, r5
 8003c9e:	f7fc fe7b 	bl	8000998 <__aeabi_dcmpeq>
 8003ca2:	b920      	cbnz	r0, 8003cae <pow+0x1fa>
 8003ca4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003ca8:	4b2e      	ldr	r3, [pc, #184]	; (8003d64 <pow+0x2b0>)
 8003caa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003cae:	f996 3000 	ldrsb.w	r3, [r6]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d142      	bne.n	8003d3c <pow+0x288>
 8003cb6:	f7ff fecb 	bl	8003a50 <__errno>
 8003cba:	2322      	movs	r3, #34	; 0x22
 8003cbc:	e797      	b.n	8003bee <pow+0x13a>
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	4b29      	ldr	r3, [pc, #164]	; (8003d68 <pow+0x2b4>)
 8003cc2:	4640      	mov	r0, r8
 8003cc4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003cc8:	4649      	mov	r1, r9
 8003cca:	4652      	mov	r2, sl
 8003ccc:	465b      	mov	r3, fp
 8003cce:	f7fc fe6d 	bl	80009ac <__aeabi_dcmplt>
 8003cd2:	2800      	cmp	r0, #0
 8003cd4:	d0eb      	beq.n	8003cae <pow+0x1fa>
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	4629      	mov	r1, r5
 8003cda:	f000 fe11 	bl	8004900 <rint>
 8003cde:	4622      	mov	r2, r4
 8003ce0:	462b      	mov	r3, r5
 8003ce2:	f7fc fe59 	bl	8000998 <__aeabi_dcmpeq>
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	d1e1      	bne.n	8003cae <pow+0x1fa>
 8003cea:	2200      	movs	r2, #0
 8003cec:	4b1a      	ldr	r3, [pc, #104]	; (8003d58 <pow+0x2a4>)
 8003cee:	e7dc      	b.n	8003caa <pow+0x1f6>
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	f7fc fe4e 	bl	8000998 <__aeabi_dcmpeq>
 8003cfc:	2800      	cmp	r0, #0
 8003cfe:	f43f af4b 	beq.w	8003b98 <pow+0xe4>
 8003d02:	4640      	mov	r0, r8
 8003d04:	4649      	mov	r1, r9
 8003d06:	f000 fded 	bl	80048e4 <finite>
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	f43f af44 	beq.w	8003b98 <pow+0xe4>
 8003d10:	4620      	mov	r0, r4
 8003d12:	4629      	mov	r1, r5
 8003d14:	f000 fde6 	bl	80048e4 <finite>
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	f43f af3d 	beq.w	8003b98 <pow+0xe4>
 8003d1e:	2304      	movs	r3, #4
 8003d20:	9304      	str	r3, [sp, #16]
 8003d22:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <pow+0x29c>)
 8003d24:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003d28:	9305      	str	r3, [sp, #20]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	2400      	movs	r4, #0
 8003d2e:	930c      	str	r3, [sp, #48]	; 0x30
 8003d30:	2300      	movs	r3, #0
 8003d32:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003d36:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8003d3a:	e7b8      	b.n	8003cae <pow+0x1fa>
 8003d3c:	a804      	add	r0, sp, #16
 8003d3e:	f000 fdd7 	bl	80048f0 <matherr>
 8003d42:	2800      	cmp	r0, #0
 8003d44:	f47f af1e 	bne.w	8003b84 <pow+0xd0>
 8003d48:	e7b5      	b.n	8003cb6 <pow+0x202>
 8003d4a:	bf00      	nop
 8003d4c:	20000070 	.word	0x20000070
 8003d50:	08004b4c 	.word	0x08004b4c
 8003d54:	3ff00000 	.word	0x3ff00000
 8003d58:	fff00000 	.word	0xfff00000
 8003d5c:	3fe00000 	.word	0x3fe00000
 8003d60:	47efffff 	.word	0x47efffff
 8003d64:	c7efffff 	.word	0xc7efffff
 8003d68:	7ff00000 	.word	0x7ff00000
 8003d6c:	00000000 	.word	0x00000000

08003d70 <__ieee754_pow>:
 8003d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d74:	b091      	sub	sp, #68	; 0x44
 8003d76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d7a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8003d7e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8003d82:	ea55 0302 	orrs.w	r3, r5, r2
 8003d86:	4607      	mov	r7, r0
 8003d88:	4688      	mov	r8, r1
 8003d8a:	f000 84b7 	beq.w	80046fc <__ieee754_pow+0x98c>
 8003d8e:	4b80      	ldr	r3, [pc, #512]	; (8003f90 <__ieee754_pow+0x220>)
 8003d90:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8003d94:	429c      	cmp	r4, r3
 8003d96:	4689      	mov	r9, r1
 8003d98:	4682      	mov	sl, r0
 8003d9a:	dc09      	bgt.n	8003db0 <__ieee754_pow+0x40>
 8003d9c:	d103      	bne.n	8003da6 <__ieee754_pow+0x36>
 8003d9e:	b938      	cbnz	r0, 8003db0 <__ieee754_pow+0x40>
 8003da0:	42a5      	cmp	r5, r4
 8003da2:	dc0d      	bgt.n	8003dc0 <__ieee754_pow+0x50>
 8003da4:	e001      	b.n	8003daa <__ieee754_pow+0x3a>
 8003da6:	429d      	cmp	r5, r3
 8003da8:	dc02      	bgt.n	8003db0 <__ieee754_pow+0x40>
 8003daa:	429d      	cmp	r5, r3
 8003dac:	d10e      	bne.n	8003dcc <__ieee754_pow+0x5c>
 8003dae:	b16a      	cbz	r2, 8003dcc <__ieee754_pow+0x5c>
 8003db0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003db4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003db8:	ea54 030a 	orrs.w	r3, r4, sl
 8003dbc:	f000 849e 	beq.w	80046fc <__ieee754_pow+0x98c>
 8003dc0:	4874      	ldr	r0, [pc, #464]	; (8003f94 <__ieee754_pow+0x224>)
 8003dc2:	b011      	add	sp, #68	; 0x44
 8003dc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc8:	f000 bd94 	b.w	80048f4 <nan>
 8003dcc:	f1b9 0f00 	cmp.w	r9, #0
 8003dd0:	da53      	bge.n	8003e7a <__ieee754_pow+0x10a>
 8003dd2:	4b71      	ldr	r3, [pc, #452]	; (8003f98 <__ieee754_pow+0x228>)
 8003dd4:	429d      	cmp	r5, r3
 8003dd6:	dc4e      	bgt.n	8003e76 <__ieee754_pow+0x106>
 8003dd8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003ddc:	429d      	cmp	r5, r3
 8003dde:	dd4c      	ble.n	8003e7a <__ieee754_pow+0x10a>
 8003de0:	152b      	asrs	r3, r5, #20
 8003de2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003de6:	2b14      	cmp	r3, #20
 8003de8:	dd28      	ble.n	8003e3c <__ieee754_pow+0xcc>
 8003dea:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003dee:	fa22 f103 	lsr.w	r1, r2, r3
 8003df2:	fa01 f303 	lsl.w	r3, r1, r3
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d13f      	bne.n	8003e7a <__ieee754_pow+0x10a>
 8003dfa:	f001 0101 	and.w	r1, r1, #1
 8003dfe:	f1c1 0302 	rsb	r3, r1, #2
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	2a00      	cmp	r2, #0
 8003e06:	d15c      	bne.n	8003ec2 <__ieee754_pow+0x152>
 8003e08:	4b61      	ldr	r3, [pc, #388]	; (8003f90 <__ieee754_pow+0x220>)
 8003e0a:	429d      	cmp	r5, r3
 8003e0c:	d126      	bne.n	8003e5c <__ieee754_pow+0xec>
 8003e0e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003e12:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003e16:	ea53 030a 	orrs.w	r3, r3, sl
 8003e1a:	f000 846f 	beq.w	80046fc <__ieee754_pow+0x98c>
 8003e1e:	4b5f      	ldr	r3, [pc, #380]	; (8003f9c <__ieee754_pow+0x22c>)
 8003e20:	429c      	cmp	r4, r3
 8003e22:	dd2c      	ble.n	8003e7e <__ieee754_pow+0x10e>
 8003e24:	2e00      	cmp	r6, #0
 8003e26:	f280 846f 	bge.w	8004708 <__ieee754_pow+0x998>
 8003e2a:	f04f 0b00 	mov.w	fp, #0
 8003e2e:	f04f 0c00 	mov.w	ip, #0
 8003e32:	4658      	mov	r0, fp
 8003e34:	4661      	mov	r1, ip
 8003e36:	b011      	add	sp, #68	; 0x44
 8003e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e3c:	2a00      	cmp	r2, #0
 8003e3e:	d13e      	bne.n	8003ebe <__ieee754_pow+0x14e>
 8003e40:	f1c3 0314 	rsb	r3, r3, #20
 8003e44:	fa45 f103 	asr.w	r1, r5, r3
 8003e48:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4c:	42ab      	cmp	r3, r5
 8003e4e:	f040 8463 	bne.w	8004718 <__ieee754_pow+0x9a8>
 8003e52:	f001 0101 	and.w	r1, r1, #1
 8003e56:	f1c1 0302 	rsb	r3, r1, #2
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	4b50      	ldr	r3, [pc, #320]	; (8003fa0 <__ieee754_pow+0x230>)
 8003e5e:	429d      	cmp	r5, r3
 8003e60:	d114      	bne.n	8003e8c <__ieee754_pow+0x11c>
 8003e62:	2e00      	cmp	r6, #0
 8003e64:	f280 8454 	bge.w	8004710 <__ieee754_pow+0x9a0>
 8003e68:	463a      	mov	r2, r7
 8003e6a:	4643      	mov	r3, r8
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	494c      	ldr	r1, [pc, #304]	; (8003fa0 <__ieee754_pow+0x230>)
 8003e70:	f7fc fc54 	bl	800071c <__aeabi_ddiv>
 8003e74:	e013      	b.n	8003e9e <__ieee754_pow+0x12e>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e7c3      	b.n	8003e02 <__ieee754_pow+0x92>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e7c1      	b.n	8003e02 <__ieee754_pow+0x92>
 8003e7e:	2e00      	cmp	r6, #0
 8003e80:	dad3      	bge.n	8003e2a <__ieee754_pow+0xba>
 8003e82:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8003e86:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8003e8a:	e7d2      	b.n	8003e32 <__ieee754_pow+0xc2>
 8003e8c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8003e90:	d108      	bne.n	8003ea4 <__ieee754_pow+0x134>
 8003e92:	463a      	mov	r2, r7
 8003e94:	4643      	mov	r3, r8
 8003e96:	4638      	mov	r0, r7
 8003e98:	4641      	mov	r1, r8
 8003e9a:	f7fc fb15 	bl	80004c8 <__aeabi_dmul>
 8003e9e:	4683      	mov	fp, r0
 8003ea0:	468c      	mov	ip, r1
 8003ea2:	e7c6      	b.n	8003e32 <__ieee754_pow+0xc2>
 8003ea4:	4b3f      	ldr	r3, [pc, #252]	; (8003fa4 <__ieee754_pow+0x234>)
 8003ea6:	429e      	cmp	r6, r3
 8003ea8:	d10b      	bne.n	8003ec2 <__ieee754_pow+0x152>
 8003eaa:	f1b9 0f00 	cmp.w	r9, #0
 8003eae:	db08      	blt.n	8003ec2 <__ieee754_pow+0x152>
 8003eb0:	4638      	mov	r0, r7
 8003eb2:	4641      	mov	r1, r8
 8003eb4:	b011      	add	sp, #68	; 0x44
 8003eb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eba:	f000 bc63 	b.w	8004784 <__ieee754_sqrt>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	4638      	mov	r0, r7
 8003ec4:	4641      	mov	r1, r8
 8003ec6:	f000 fd09 	bl	80048dc <fabs>
 8003eca:	4683      	mov	fp, r0
 8003ecc:	468c      	mov	ip, r1
 8003ece:	f1ba 0f00 	cmp.w	sl, #0
 8003ed2:	d12b      	bne.n	8003f2c <__ieee754_pow+0x1bc>
 8003ed4:	b124      	cbz	r4, 8003ee0 <__ieee754_pow+0x170>
 8003ed6:	4b32      	ldr	r3, [pc, #200]	; (8003fa0 <__ieee754_pow+0x230>)
 8003ed8:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d125      	bne.n	8003f2c <__ieee754_pow+0x1bc>
 8003ee0:	2e00      	cmp	r6, #0
 8003ee2:	da07      	bge.n	8003ef4 <__ieee754_pow+0x184>
 8003ee4:	465a      	mov	r2, fp
 8003ee6:	4663      	mov	r3, ip
 8003ee8:	2000      	movs	r0, #0
 8003eea:	492d      	ldr	r1, [pc, #180]	; (8003fa0 <__ieee754_pow+0x230>)
 8003eec:	f7fc fc16 	bl	800071c <__aeabi_ddiv>
 8003ef0:	4683      	mov	fp, r0
 8003ef2:	468c      	mov	ip, r1
 8003ef4:	f1b9 0f00 	cmp.w	r9, #0
 8003ef8:	da9b      	bge.n	8003e32 <__ieee754_pow+0xc2>
 8003efa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003efe:	9b00      	ldr	r3, [sp, #0]
 8003f00:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003f04:	4323      	orrs	r3, r4
 8003f06:	d108      	bne.n	8003f1a <__ieee754_pow+0x1aa>
 8003f08:	465a      	mov	r2, fp
 8003f0a:	4663      	mov	r3, ip
 8003f0c:	4658      	mov	r0, fp
 8003f0e:	4661      	mov	r1, ip
 8003f10:	f7fc f922 	bl	8000158 <__aeabi_dsub>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	e7aa      	b.n	8003e70 <__ieee754_pow+0x100>
 8003f1a:	9b00      	ldr	r3, [sp, #0]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d188      	bne.n	8003e32 <__ieee754_pow+0xc2>
 8003f20:	4658      	mov	r0, fp
 8003f22:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8003f26:	4683      	mov	fp, r0
 8003f28:	469c      	mov	ip, r3
 8003f2a:	e782      	b.n	8003e32 <__ieee754_pow+0xc2>
 8003f2c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8003f30:	f109 33ff 	add.w	r3, r9, #4294967295
 8003f34:	930d      	str	r3, [sp, #52]	; 0x34
 8003f36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003f38:	9b00      	ldr	r3, [sp, #0]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	d104      	bne.n	8003f48 <__ieee754_pow+0x1d8>
 8003f3e:	463a      	mov	r2, r7
 8003f40:	4643      	mov	r3, r8
 8003f42:	4638      	mov	r0, r7
 8003f44:	4641      	mov	r1, r8
 8003f46:	e7e3      	b.n	8003f10 <__ieee754_pow+0x1a0>
 8003f48:	4b17      	ldr	r3, [pc, #92]	; (8003fa8 <__ieee754_pow+0x238>)
 8003f4a:	429d      	cmp	r5, r3
 8003f4c:	f340 80fe 	ble.w	800414c <__ieee754_pow+0x3dc>
 8003f50:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003f54:	429d      	cmp	r5, r3
 8003f56:	dd0b      	ble.n	8003f70 <__ieee754_pow+0x200>
 8003f58:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <__ieee754_pow+0x22c>)
 8003f5a:	429c      	cmp	r4, r3
 8003f5c:	dc0e      	bgt.n	8003f7c <__ieee754_pow+0x20c>
 8003f5e:	2e00      	cmp	r6, #0
 8003f60:	f6bf af63 	bge.w	8003e2a <__ieee754_pow+0xba>
 8003f64:	a308      	add	r3, pc, #32	; (adr r3, 8003f88 <__ieee754_pow+0x218>)
 8003f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	e794      	b.n	8003e9a <__ieee754_pow+0x12a>
 8003f70:	4b0e      	ldr	r3, [pc, #56]	; (8003fac <__ieee754_pow+0x23c>)
 8003f72:	429c      	cmp	r4, r3
 8003f74:	ddf3      	ble.n	8003f5e <__ieee754_pow+0x1ee>
 8003f76:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <__ieee754_pow+0x230>)
 8003f78:	429c      	cmp	r4, r3
 8003f7a:	dd19      	ble.n	8003fb0 <__ieee754_pow+0x240>
 8003f7c:	2e00      	cmp	r6, #0
 8003f7e:	dcf1      	bgt.n	8003f64 <__ieee754_pow+0x1f4>
 8003f80:	e753      	b.n	8003e2a <__ieee754_pow+0xba>
 8003f82:	bf00      	nop
 8003f84:	f3af 8000 	nop.w
 8003f88:	8800759c 	.word	0x8800759c
 8003f8c:	7e37e43c 	.word	0x7e37e43c
 8003f90:	7ff00000 	.word	0x7ff00000
 8003f94:	08004b4f 	.word	0x08004b4f
 8003f98:	433fffff 	.word	0x433fffff
 8003f9c:	3fefffff 	.word	0x3fefffff
 8003fa0:	3ff00000 	.word	0x3ff00000
 8003fa4:	3fe00000 	.word	0x3fe00000
 8003fa8:	41e00000 	.word	0x41e00000
 8003fac:	3feffffe 	.word	0x3feffffe
 8003fb0:	4661      	mov	r1, ip
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	4b60      	ldr	r3, [pc, #384]	; (8004138 <__ieee754_pow+0x3c8>)
 8003fb6:	4658      	mov	r0, fp
 8003fb8:	f7fc f8ce 	bl	8000158 <__aeabi_dsub>
 8003fbc:	a354      	add	r3, pc, #336	; (adr r3, 8004110 <__ieee754_pow+0x3a0>)
 8003fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	460d      	mov	r5, r1
 8003fc6:	f7fc fa7f 	bl	80004c8 <__aeabi_dmul>
 8003fca:	a353      	add	r3, pc, #332	; (adr r3, 8004118 <__ieee754_pow+0x3a8>)
 8003fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd0:	4606      	mov	r6, r0
 8003fd2:	460f      	mov	r7, r1
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	4629      	mov	r1, r5
 8003fd8:	f7fc fa76 	bl	80004c8 <__aeabi_dmul>
 8003fdc:	2200      	movs	r2, #0
 8003fde:	4682      	mov	sl, r0
 8003fe0:	468b      	mov	fp, r1
 8003fe2:	4b56      	ldr	r3, [pc, #344]	; (800413c <__ieee754_pow+0x3cc>)
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	4629      	mov	r1, r5
 8003fe8:	f7fc fa6e 	bl	80004c8 <__aeabi_dmul>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	a14b      	add	r1, pc, #300	; (adr r1, 8004120 <__ieee754_pow+0x3b0>)
 8003ff2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ff6:	f7fc f8af 	bl	8000158 <__aeabi_dsub>
 8003ffa:	4622      	mov	r2, r4
 8003ffc:	462b      	mov	r3, r5
 8003ffe:	f7fc fa63 	bl	80004c8 <__aeabi_dmul>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	2000      	movs	r0, #0
 8004008:	494d      	ldr	r1, [pc, #308]	; (8004140 <__ieee754_pow+0x3d0>)
 800400a:	f7fc f8a5 	bl	8000158 <__aeabi_dsub>
 800400e:	4622      	mov	r2, r4
 8004010:	462b      	mov	r3, r5
 8004012:	4680      	mov	r8, r0
 8004014:	4689      	mov	r9, r1
 8004016:	4620      	mov	r0, r4
 8004018:	4629      	mov	r1, r5
 800401a:	f7fc fa55 	bl	80004c8 <__aeabi_dmul>
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	4640      	mov	r0, r8
 8004024:	4649      	mov	r1, r9
 8004026:	f7fc fa4f 	bl	80004c8 <__aeabi_dmul>
 800402a:	a33f      	add	r3, pc, #252	; (adr r3, 8004128 <__ieee754_pow+0x3b8>)
 800402c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004030:	f7fc fa4a 	bl	80004c8 <__aeabi_dmul>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4650      	mov	r0, sl
 800403a:	4659      	mov	r1, fp
 800403c:	f7fc f88c 	bl	8000158 <__aeabi_dsub>
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	4604      	mov	r4, r0
 8004046:	460d      	mov	r5, r1
 8004048:	4630      	mov	r0, r6
 800404a:	4639      	mov	r1, r7
 800404c:	f7fc f886 	bl	800015c <__adddf3>
 8004050:	2000      	movs	r0, #0
 8004052:	468b      	mov	fp, r1
 8004054:	4682      	mov	sl, r0
 8004056:	4632      	mov	r2, r6
 8004058:	463b      	mov	r3, r7
 800405a:	f7fc f87d 	bl	8000158 <__aeabi_dsub>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	4620      	mov	r0, r4
 8004064:	4629      	mov	r1, r5
 8004066:	f7fc f877 	bl	8000158 <__aeabi_dsub>
 800406a:	9b00      	ldr	r3, [sp, #0]
 800406c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800406e:	3b01      	subs	r3, #1
 8004070:	4313      	orrs	r3, r2
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	bf0c      	ite	eq
 8004078:	4c32      	ldreq	r4, [pc, #200]	; (8004144 <__ieee754_pow+0x3d4>)
 800407a:	4c2f      	ldrne	r4, [pc, #188]	; (8004138 <__ieee754_pow+0x3c8>)
 800407c:	4606      	mov	r6, r0
 800407e:	e9cd 3400 	strd	r3, r4, [sp]
 8004082:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004086:	2400      	movs	r4, #0
 8004088:	460f      	mov	r7, r1
 800408a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800408e:	4622      	mov	r2, r4
 8004090:	462b      	mov	r3, r5
 8004092:	f7fc f861 	bl	8000158 <__aeabi_dsub>
 8004096:	4652      	mov	r2, sl
 8004098:	465b      	mov	r3, fp
 800409a:	f7fc fa15 	bl	80004c8 <__aeabi_dmul>
 800409e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040a2:	4680      	mov	r8, r0
 80040a4:	4689      	mov	r9, r1
 80040a6:	4630      	mov	r0, r6
 80040a8:	4639      	mov	r1, r7
 80040aa:	f7fc fa0d 	bl	80004c8 <__aeabi_dmul>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4640      	mov	r0, r8
 80040b4:	4649      	mov	r1, r9
 80040b6:	f7fc f851 	bl	800015c <__adddf3>
 80040ba:	4622      	mov	r2, r4
 80040bc:	462b      	mov	r3, r5
 80040be:	4680      	mov	r8, r0
 80040c0:	4689      	mov	r9, r1
 80040c2:	4650      	mov	r0, sl
 80040c4:	4659      	mov	r1, fp
 80040c6:	f7fc f9ff 	bl	80004c8 <__aeabi_dmul>
 80040ca:	4604      	mov	r4, r0
 80040cc:	460d      	mov	r5, r1
 80040ce:	460b      	mov	r3, r1
 80040d0:	4602      	mov	r2, r0
 80040d2:	4649      	mov	r1, r9
 80040d4:	4640      	mov	r0, r8
 80040d6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80040da:	f7fc f83f 	bl	800015c <__adddf3>
 80040de:	4b1a      	ldr	r3, [pc, #104]	; (8004148 <__ieee754_pow+0x3d8>)
 80040e0:	4682      	mov	sl, r0
 80040e2:	4299      	cmp	r1, r3
 80040e4:	460f      	mov	r7, r1
 80040e6:	460e      	mov	r6, r1
 80040e8:	f340 82e1 	ble.w	80046ae <__ieee754_pow+0x93e>
 80040ec:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80040f0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80040f4:	4303      	orrs	r3, r0
 80040f6:	f000 81db 	beq.w	80044b0 <__ieee754_pow+0x740>
 80040fa:	a30d      	add	r3, pc, #52	; (adr r3, 8004130 <__ieee754_pow+0x3c0>)
 80040fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004100:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004104:	f7fc f9e0 	bl	80004c8 <__aeabi_dmul>
 8004108:	a309      	add	r3, pc, #36	; (adr r3, 8004130 <__ieee754_pow+0x3c0>)
 800410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410e:	e6c4      	b.n	8003e9a <__ieee754_pow+0x12a>
 8004110:	60000000 	.word	0x60000000
 8004114:	3ff71547 	.word	0x3ff71547
 8004118:	f85ddf44 	.word	0xf85ddf44
 800411c:	3e54ae0b 	.word	0x3e54ae0b
 8004120:	55555555 	.word	0x55555555
 8004124:	3fd55555 	.word	0x3fd55555
 8004128:	652b82fe 	.word	0x652b82fe
 800412c:	3ff71547 	.word	0x3ff71547
 8004130:	8800759c 	.word	0x8800759c
 8004134:	7e37e43c 	.word	0x7e37e43c
 8004138:	3ff00000 	.word	0x3ff00000
 800413c:	3fd00000 	.word	0x3fd00000
 8004140:	3fe00000 	.word	0x3fe00000
 8004144:	bff00000 	.word	0xbff00000
 8004148:	408fffff 	.word	0x408fffff
 800414c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	da08      	bge.n	8004168 <__ieee754_pow+0x3f8>
 8004156:	4658      	mov	r0, fp
 8004158:	4bcd      	ldr	r3, [pc, #820]	; (8004490 <__ieee754_pow+0x720>)
 800415a:	4661      	mov	r1, ip
 800415c:	f7fc f9b4 	bl	80004c8 <__aeabi_dmul>
 8004160:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004164:	4683      	mov	fp, r0
 8004166:	460c      	mov	r4, r1
 8004168:	1523      	asrs	r3, r4, #20
 800416a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800416e:	4413      	add	r3, r2
 8004170:	930c      	str	r3, [sp, #48]	; 0x30
 8004172:	4bc8      	ldr	r3, [pc, #800]	; (8004494 <__ieee754_pow+0x724>)
 8004174:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004178:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800417c:	429c      	cmp	r4, r3
 800417e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004182:	dd08      	ble.n	8004196 <__ieee754_pow+0x426>
 8004184:	4bc4      	ldr	r3, [pc, #784]	; (8004498 <__ieee754_pow+0x728>)
 8004186:	429c      	cmp	r4, r3
 8004188:	f340 815b 	ble.w	8004442 <__ieee754_pow+0x6d2>
 800418c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800418e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004192:	3301      	adds	r3, #1
 8004194:	930c      	str	r3, [sp, #48]	; 0x30
 8004196:	f04f 0800 	mov.w	r8, #0
 800419a:	4658      	mov	r0, fp
 800419c:	4629      	mov	r1, r5
 800419e:	4bbf      	ldr	r3, [pc, #764]	; (800449c <__ieee754_pow+0x72c>)
 80041a0:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80041a4:	444b      	add	r3, r9
 80041a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80041aa:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80041ae:	461a      	mov	r2, r3
 80041b0:	4623      	mov	r3, r4
 80041b2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80041b6:	f7fb ffcf 	bl	8000158 <__aeabi_dsub>
 80041ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80041be:	4606      	mov	r6, r0
 80041c0:	460f      	mov	r7, r1
 80041c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80041c6:	f7fb ffc9 	bl	800015c <__adddf3>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	2000      	movs	r0, #0
 80041d0:	49b3      	ldr	r1, [pc, #716]	; (80044a0 <__ieee754_pow+0x730>)
 80041d2:	f7fc faa3 	bl	800071c <__aeabi_ddiv>
 80041d6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4630      	mov	r0, r6
 80041e0:	4639      	mov	r1, r7
 80041e2:	f7fc f971 	bl	80004c8 <__aeabi_dmul>
 80041e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80041ea:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80041ee:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80041f2:	2300      	movs	r3, #0
 80041f4:	2200      	movs	r2, #0
 80041f6:	106d      	asrs	r5, r5, #1
 80041f8:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80041fc:	9304      	str	r3, [sp, #16]
 80041fe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004202:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004206:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800420a:	4650      	mov	r0, sl
 800420c:	4659      	mov	r1, fp
 800420e:	4614      	mov	r4, r2
 8004210:	461d      	mov	r5, r3
 8004212:	f7fc f959 	bl	80004c8 <__aeabi_dmul>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4630      	mov	r0, r6
 800421c:	4639      	mov	r1, r7
 800421e:	f7fb ff9b 	bl	8000158 <__aeabi_dsub>
 8004222:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004226:	4606      	mov	r6, r0
 8004228:	460f      	mov	r7, r1
 800422a:	4620      	mov	r0, r4
 800422c:	4629      	mov	r1, r5
 800422e:	f7fb ff93 	bl	8000158 <__aeabi_dsub>
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800423a:	f7fb ff8d 	bl	8000158 <__aeabi_dsub>
 800423e:	4652      	mov	r2, sl
 8004240:	465b      	mov	r3, fp
 8004242:	f7fc f941 	bl	80004c8 <__aeabi_dmul>
 8004246:	4602      	mov	r2, r0
 8004248:	460b      	mov	r3, r1
 800424a:	4630      	mov	r0, r6
 800424c:	4639      	mov	r1, r7
 800424e:	f7fb ff83 	bl	8000158 <__aeabi_dsub>
 8004252:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004256:	f7fc f937 	bl	80004c8 <__aeabi_dmul>
 800425a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800425e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004262:	4610      	mov	r0, r2
 8004264:	4619      	mov	r1, r3
 8004266:	f7fc f92f 	bl	80004c8 <__aeabi_dmul>
 800426a:	a377      	add	r3, pc, #476	; (adr r3, 8004448 <__ieee754_pow+0x6d8>)
 800426c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004270:	4604      	mov	r4, r0
 8004272:	460d      	mov	r5, r1
 8004274:	f7fc f928 	bl	80004c8 <__aeabi_dmul>
 8004278:	a375      	add	r3, pc, #468	; (adr r3, 8004450 <__ieee754_pow+0x6e0>)
 800427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427e:	f7fb ff6d 	bl	800015c <__adddf3>
 8004282:	4622      	mov	r2, r4
 8004284:	462b      	mov	r3, r5
 8004286:	f7fc f91f 	bl	80004c8 <__aeabi_dmul>
 800428a:	a373      	add	r3, pc, #460	; (adr r3, 8004458 <__ieee754_pow+0x6e8>)
 800428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004290:	f7fb ff64 	bl	800015c <__adddf3>
 8004294:	4622      	mov	r2, r4
 8004296:	462b      	mov	r3, r5
 8004298:	f7fc f916 	bl	80004c8 <__aeabi_dmul>
 800429c:	a370      	add	r3, pc, #448	; (adr r3, 8004460 <__ieee754_pow+0x6f0>)
 800429e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a2:	f7fb ff5b 	bl	800015c <__adddf3>
 80042a6:	4622      	mov	r2, r4
 80042a8:	462b      	mov	r3, r5
 80042aa:	f7fc f90d 	bl	80004c8 <__aeabi_dmul>
 80042ae:	a36e      	add	r3, pc, #440	; (adr r3, 8004468 <__ieee754_pow+0x6f8>)
 80042b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b4:	f7fb ff52 	bl	800015c <__adddf3>
 80042b8:	4622      	mov	r2, r4
 80042ba:	462b      	mov	r3, r5
 80042bc:	f7fc f904 	bl	80004c8 <__aeabi_dmul>
 80042c0:	a36b      	add	r3, pc, #428	; (adr r3, 8004470 <__ieee754_pow+0x700>)
 80042c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c6:	f7fb ff49 	bl	800015c <__adddf3>
 80042ca:	4622      	mov	r2, r4
 80042cc:	4606      	mov	r6, r0
 80042ce:	460f      	mov	r7, r1
 80042d0:	462b      	mov	r3, r5
 80042d2:	4620      	mov	r0, r4
 80042d4:	4629      	mov	r1, r5
 80042d6:	f7fc f8f7 	bl	80004c8 <__aeabi_dmul>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4630      	mov	r0, r6
 80042e0:	4639      	mov	r1, r7
 80042e2:	f7fc f8f1 	bl	80004c8 <__aeabi_dmul>
 80042e6:	4604      	mov	r4, r0
 80042e8:	460d      	mov	r5, r1
 80042ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042ee:	4652      	mov	r2, sl
 80042f0:	465b      	mov	r3, fp
 80042f2:	f7fb ff33 	bl	800015c <__adddf3>
 80042f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80042fa:	f7fc f8e5 	bl	80004c8 <__aeabi_dmul>
 80042fe:	4622      	mov	r2, r4
 8004300:	462b      	mov	r3, r5
 8004302:	f7fb ff2b 	bl	800015c <__adddf3>
 8004306:	4652      	mov	r2, sl
 8004308:	4606      	mov	r6, r0
 800430a:	460f      	mov	r7, r1
 800430c:	465b      	mov	r3, fp
 800430e:	4650      	mov	r0, sl
 8004310:	4659      	mov	r1, fp
 8004312:	f7fc f8d9 	bl	80004c8 <__aeabi_dmul>
 8004316:	2200      	movs	r2, #0
 8004318:	4b62      	ldr	r3, [pc, #392]	; (80044a4 <__ieee754_pow+0x734>)
 800431a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800431e:	f7fb ff1d 	bl	800015c <__adddf3>
 8004322:	4632      	mov	r2, r6
 8004324:	463b      	mov	r3, r7
 8004326:	f7fb ff19 	bl	800015c <__adddf3>
 800432a:	9804      	ldr	r0, [sp, #16]
 800432c:	460d      	mov	r5, r1
 800432e:	4604      	mov	r4, r0
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4650      	mov	r0, sl
 8004336:	4659      	mov	r1, fp
 8004338:	f7fc f8c6 	bl	80004c8 <__aeabi_dmul>
 800433c:	2200      	movs	r2, #0
 800433e:	4682      	mov	sl, r0
 8004340:	468b      	mov	fp, r1
 8004342:	4b58      	ldr	r3, [pc, #352]	; (80044a4 <__ieee754_pow+0x734>)
 8004344:	4620      	mov	r0, r4
 8004346:	4629      	mov	r1, r5
 8004348:	f7fb ff06 	bl	8000158 <__aeabi_dsub>
 800434c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004350:	f7fb ff02 	bl	8000158 <__aeabi_dsub>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4630      	mov	r0, r6
 800435a:	4639      	mov	r1, r7
 800435c:	f7fb fefc 	bl	8000158 <__aeabi_dsub>
 8004360:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004364:	f7fc f8b0 	bl	80004c8 <__aeabi_dmul>
 8004368:	4622      	mov	r2, r4
 800436a:	4606      	mov	r6, r0
 800436c:	460f      	mov	r7, r1
 800436e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004372:	462b      	mov	r3, r5
 8004374:	f7fc f8a8 	bl	80004c8 <__aeabi_dmul>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4630      	mov	r0, r6
 800437e:	4639      	mov	r1, r7
 8004380:	f7fb feec 	bl	800015c <__adddf3>
 8004384:	4606      	mov	r6, r0
 8004386:	460f      	mov	r7, r1
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4650      	mov	r0, sl
 800438e:	4659      	mov	r1, fp
 8004390:	f7fb fee4 	bl	800015c <__adddf3>
 8004394:	a338      	add	r3, pc, #224	; (adr r3, 8004478 <__ieee754_pow+0x708>)
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	9804      	ldr	r0, [sp, #16]
 800439c:	460d      	mov	r5, r1
 800439e:	4604      	mov	r4, r0
 80043a0:	f7fc f892 	bl	80004c8 <__aeabi_dmul>
 80043a4:	4652      	mov	r2, sl
 80043a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80043aa:	465b      	mov	r3, fp
 80043ac:	4620      	mov	r0, r4
 80043ae:	4629      	mov	r1, r5
 80043b0:	f7fb fed2 	bl	8000158 <__aeabi_dsub>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4630      	mov	r0, r6
 80043ba:	4639      	mov	r1, r7
 80043bc:	f7fb fecc 	bl	8000158 <__aeabi_dsub>
 80043c0:	a32f      	add	r3, pc, #188	; (adr r3, 8004480 <__ieee754_pow+0x710>)
 80043c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c6:	f7fc f87f 	bl	80004c8 <__aeabi_dmul>
 80043ca:	a32f      	add	r3, pc, #188	; (adr r3, 8004488 <__ieee754_pow+0x718>)
 80043cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d0:	4606      	mov	r6, r0
 80043d2:	460f      	mov	r7, r1
 80043d4:	4620      	mov	r0, r4
 80043d6:	4629      	mov	r1, r5
 80043d8:	f7fc f876 	bl	80004c8 <__aeabi_dmul>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4630      	mov	r0, r6
 80043e2:	4639      	mov	r1, r7
 80043e4:	f7fb feba 	bl	800015c <__adddf3>
 80043e8:	4b2f      	ldr	r3, [pc, #188]	; (80044a8 <__ieee754_pow+0x738>)
 80043ea:	444b      	add	r3, r9
 80043ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f0:	f7fb feb4 	bl	800015c <__adddf3>
 80043f4:	4604      	mov	r4, r0
 80043f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80043f8:	460d      	mov	r5, r1
 80043fa:	f7fb fffb 	bl	80003f4 <__aeabi_i2d>
 80043fe:	4606      	mov	r6, r0
 8004400:	460f      	mov	r7, r1
 8004402:	4b2a      	ldr	r3, [pc, #168]	; (80044ac <__ieee754_pow+0x73c>)
 8004404:	4622      	mov	r2, r4
 8004406:	444b      	add	r3, r9
 8004408:	e9d3 8900 	ldrd	r8, r9, [r3]
 800440c:	462b      	mov	r3, r5
 800440e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004412:	f7fb fea3 	bl	800015c <__adddf3>
 8004416:	4642      	mov	r2, r8
 8004418:	464b      	mov	r3, r9
 800441a:	f7fb fe9f 	bl	800015c <__adddf3>
 800441e:	4632      	mov	r2, r6
 8004420:	463b      	mov	r3, r7
 8004422:	f7fb fe9b 	bl	800015c <__adddf3>
 8004426:	9804      	ldr	r0, [sp, #16]
 8004428:	4632      	mov	r2, r6
 800442a:	463b      	mov	r3, r7
 800442c:	4682      	mov	sl, r0
 800442e:	468b      	mov	fp, r1
 8004430:	f7fb fe92 	bl	8000158 <__aeabi_dsub>
 8004434:	4642      	mov	r2, r8
 8004436:	464b      	mov	r3, r9
 8004438:	f7fb fe8e 	bl	8000158 <__aeabi_dsub>
 800443c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004440:	e60b      	b.n	800405a <__ieee754_pow+0x2ea>
 8004442:	f04f 0801 	mov.w	r8, #1
 8004446:	e6a8      	b.n	800419a <__ieee754_pow+0x42a>
 8004448:	4a454eef 	.word	0x4a454eef
 800444c:	3fca7e28 	.word	0x3fca7e28
 8004450:	93c9db65 	.word	0x93c9db65
 8004454:	3fcd864a 	.word	0x3fcd864a
 8004458:	a91d4101 	.word	0xa91d4101
 800445c:	3fd17460 	.word	0x3fd17460
 8004460:	518f264d 	.word	0x518f264d
 8004464:	3fd55555 	.word	0x3fd55555
 8004468:	db6fabff 	.word	0xdb6fabff
 800446c:	3fdb6db6 	.word	0x3fdb6db6
 8004470:	33333303 	.word	0x33333303
 8004474:	3fe33333 	.word	0x3fe33333
 8004478:	e0000000 	.word	0xe0000000
 800447c:	3feec709 	.word	0x3feec709
 8004480:	dc3a03fd 	.word	0xdc3a03fd
 8004484:	3feec709 	.word	0x3feec709
 8004488:	145b01f5 	.word	0x145b01f5
 800448c:	be3e2fe0 	.word	0xbe3e2fe0
 8004490:	43400000 	.word	0x43400000
 8004494:	0003988e 	.word	0x0003988e
 8004498:	000bb679 	.word	0x000bb679
 800449c:	08004b50 	.word	0x08004b50
 80044a0:	3ff00000 	.word	0x3ff00000
 80044a4:	40080000 	.word	0x40080000
 80044a8:	08004b70 	.word	0x08004b70
 80044ac:	08004b60 	.word	0x08004b60
 80044b0:	a39b      	add	r3, pc, #620	; (adr r3, 8004720 <__ieee754_pow+0x9b0>)
 80044b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b6:	4640      	mov	r0, r8
 80044b8:	4649      	mov	r1, r9
 80044ba:	f7fb fe4f 	bl	800015c <__adddf3>
 80044be:	4622      	mov	r2, r4
 80044c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80044c4:	462b      	mov	r3, r5
 80044c6:	4650      	mov	r0, sl
 80044c8:	4639      	mov	r1, r7
 80044ca:	f7fb fe45 	bl	8000158 <__aeabi_dsub>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044d6:	f7fc fa87 	bl	80009e8 <__aeabi_dcmpgt>
 80044da:	2800      	cmp	r0, #0
 80044dc:	f47f ae0d 	bne.w	80040fa <__ieee754_pow+0x38a>
 80044e0:	4aa3      	ldr	r2, [pc, #652]	; (8004770 <__ieee754_pow+0xa00>)
 80044e2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80044e6:	4293      	cmp	r3, r2
 80044e8:	f340 8103 	ble.w	80046f2 <__ieee754_pow+0x982>
 80044ec:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80044f0:	2000      	movs	r0, #0
 80044f2:	151b      	asrs	r3, r3, #20
 80044f4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80044f8:	fa4a f303 	asr.w	r3, sl, r3
 80044fc:	4433      	add	r3, r6
 80044fe:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004502:	4f9c      	ldr	r7, [pc, #624]	; (8004774 <__ieee754_pow+0xa04>)
 8004504:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004508:	4117      	asrs	r7, r2
 800450a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800450e:	ea23 0107 	bic.w	r1, r3, r7
 8004512:	f1c2 0214 	rsb	r2, r2, #20
 8004516:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800451a:	fa4a fa02 	asr.w	sl, sl, r2
 800451e:	2e00      	cmp	r6, #0
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4620      	mov	r0, r4
 8004526:	4629      	mov	r1, r5
 8004528:	bfb8      	it	lt
 800452a:	f1ca 0a00 	rsblt	sl, sl, #0
 800452e:	f7fb fe13 	bl	8000158 <__aeabi_dsub>
 8004532:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800453a:	4642      	mov	r2, r8
 800453c:	464b      	mov	r3, r9
 800453e:	f7fb fe0d 	bl	800015c <__adddf3>
 8004542:	a379      	add	r3, pc, #484	; (adr r3, 8004728 <__ieee754_pow+0x9b8>)
 8004544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004548:	2000      	movs	r0, #0
 800454a:	460d      	mov	r5, r1
 800454c:	4604      	mov	r4, r0
 800454e:	f7fb ffbb 	bl	80004c8 <__aeabi_dmul>
 8004552:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004556:	4606      	mov	r6, r0
 8004558:	460f      	mov	r7, r1
 800455a:	4620      	mov	r0, r4
 800455c:	4629      	mov	r1, r5
 800455e:	f7fb fdfb 	bl	8000158 <__aeabi_dsub>
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	4640      	mov	r0, r8
 8004568:	4649      	mov	r1, r9
 800456a:	f7fb fdf5 	bl	8000158 <__aeabi_dsub>
 800456e:	a370      	add	r3, pc, #448	; (adr r3, 8004730 <__ieee754_pow+0x9c0>)
 8004570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004574:	f7fb ffa8 	bl	80004c8 <__aeabi_dmul>
 8004578:	a36f      	add	r3, pc, #444	; (adr r3, 8004738 <__ieee754_pow+0x9c8>)
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	4680      	mov	r8, r0
 8004580:	4689      	mov	r9, r1
 8004582:	4620      	mov	r0, r4
 8004584:	4629      	mov	r1, r5
 8004586:	f7fb ff9f 	bl	80004c8 <__aeabi_dmul>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4640      	mov	r0, r8
 8004590:	4649      	mov	r1, r9
 8004592:	f7fb fde3 	bl	800015c <__adddf3>
 8004596:	4604      	mov	r4, r0
 8004598:	460d      	mov	r5, r1
 800459a:	4602      	mov	r2, r0
 800459c:	460b      	mov	r3, r1
 800459e:	4630      	mov	r0, r6
 80045a0:	4639      	mov	r1, r7
 80045a2:	f7fb fddb 	bl	800015c <__adddf3>
 80045a6:	4632      	mov	r2, r6
 80045a8:	463b      	mov	r3, r7
 80045aa:	4680      	mov	r8, r0
 80045ac:	4689      	mov	r9, r1
 80045ae:	f7fb fdd3 	bl	8000158 <__aeabi_dsub>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4620      	mov	r0, r4
 80045b8:	4629      	mov	r1, r5
 80045ba:	f7fb fdcd 	bl	8000158 <__aeabi_dsub>
 80045be:	4642      	mov	r2, r8
 80045c0:	4606      	mov	r6, r0
 80045c2:	460f      	mov	r7, r1
 80045c4:	464b      	mov	r3, r9
 80045c6:	4640      	mov	r0, r8
 80045c8:	4649      	mov	r1, r9
 80045ca:	f7fb ff7d 	bl	80004c8 <__aeabi_dmul>
 80045ce:	a35c      	add	r3, pc, #368	; (adr r3, 8004740 <__ieee754_pow+0x9d0>)
 80045d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d4:	4604      	mov	r4, r0
 80045d6:	460d      	mov	r5, r1
 80045d8:	f7fb ff76 	bl	80004c8 <__aeabi_dmul>
 80045dc:	a35a      	add	r3, pc, #360	; (adr r3, 8004748 <__ieee754_pow+0x9d8>)
 80045de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e2:	f7fb fdb9 	bl	8000158 <__aeabi_dsub>
 80045e6:	4622      	mov	r2, r4
 80045e8:	462b      	mov	r3, r5
 80045ea:	f7fb ff6d 	bl	80004c8 <__aeabi_dmul>
 80045ee:	a358      	add	r3, pc, #352	; (adr r3, 8004750 <__ieee754_pow+0x9e0>)
 80045f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f4:	f7fb fdb2 	bl	800015c <__adddf3>
 80045f8:	4622      	mov	r2, r4
 80045fa:	462b      	mov	r3, r5
 80045fc:	f7fb ff64 	bl	80004c8 <__aeabi_dmul>
 8004600:	a355      	add	r3, pc, #340	; (adr r3, 8004758 <__ieee754_pow+0x9e8>)
 8004602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004606:	f7fb fda7 	bl	8000158 <__aeabi_dsub>
 800460a:	4622      	mov	r2, r4
 800460c:	462b      	mov	r3, r5
 800460e:	f7fb ff5b 	bl	80004c8 <__aeabi_dmul>
 8004612:	a353      	add	r3, pc, #332	; (adr r3, 8004760 <__ieee754_pow+0x9f0>)
 8004614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004618:	f7fb fda0 	bl	800015c <__adddf3>
 800461c:	4622      	mov	r2, r4
 800461e:	462b      	mov	r3, r5
 8004620:	f7fb ff52 	bl	80004c8 <__aeabi_dmul>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4640      	mov	r0, r8
 800462a:	4649      	mov	r1, r9
 800462c:	f7fb fd94 	bl	8000158 <__aeabi_dsub>
 8004630:	4604      	mov	r4, r0
 8004632:	460d      	mov	r5, r1
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4640      	mov	r0, r8
 800463a:	4649      	mov	r1, r9
 800463c:	f7fb ff44 	bl	80004c8 <__aeabi_dmul>
 8004640:	2200      	movs	r2, #0
 8004642:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800464a:	4620      	mov	r0, r4
 800464c:	4629      	mov	r1, r5
 800464e:	f7fb fd83 	bl	8000158 <__aeabi_dsub>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800465a:	f7fc f85f 	bl	800071c <__aeabi_ddiv>
 800465e:	4632      	mov	r2, r6
 8004660:	4604      	mov	r4, r0
 8004662:	460d      	mov	r5, r1
 8004664:	463b      	mov	r3, r7
 8004666:	4640      	mov	r0, r8
 8004668:	4649      	mov	r1, r9
 800466a:	f7fb ff2d 	bl	80004c8 <__aeabi_dmul>
 800466e:	4632      	mov	r2, r6
 8004670:	463b      	mov	r3, r7
 8004672:	f7fb fd73 	bl	800015c <__adddf3>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4620      	mov	r0, r4
 800467c:	4629      	mov	r1, r5
 800467e:	f7fb fd6b 	bl	8000158 <__aeabi_dsub>
 8004682:	4642      	mov	r2, r8
 8004684:	464b      	mov	r3, r9
 8004686:	f7fb fd67 	bl	8000158 <__aeabi_dsub>
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	2000      	movs	r0, #0
 8004690:	4939      	ldr	r1, [pc, #228]	; (8004778 <__ieee754_pow+0xa08>)
 8004692:	f7fb fd61 	bl	8000158 <__aeabi_dsub>
 8004696:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800469a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800469e:	da2b      	bge.n	80046f8 <__ieee754_pow+0x988>
 80046a0:	4652      	mov	r2, sl
 80046a2:	f000 f9b9 	bl	8004a18 <scalbn>
 80046a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80046aa:	f7ff bbf6 	b.w	8003e9a <__ieee754_pow+0x12a>
 80046ae:	4b33      	ldr	r3, [pc, #204]	; (800477c <__ieee754_pow+0xa0c>)
 80046b0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80046b4:	429f      	cmp	r7, r3
 80046b6:	f77f af13 	ble.w	80044e0 <__ieee754_pow+0x770>
 80046ba:	4b31      	ldr	r3, [pc, #196]	; (8004780 <__ieee754_pow+0xa10>)
 80046bc:	440b      	add	r3, r1
 80046be:	4303      	orrs	r3, r0
 80046c0:	d00b      	beq.n	80046da <__ieee754_pow+0x96a>
 80046c2:	a329      	add	r3, pc, #164	; (adr r3, 8004768 <__ieee754_pow+0x9f8>)
 80046c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046cc:	f7fb fefc 	bl	80004c8 <__aeabi_dmul>
 80046d0:	a325      	add	r3, pc, #148	; (adr r3, 8004768 <__ieee754_pow+0x9f8>)
 80046d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d6:	f7ff bbe0 	b.w	8003e9a <__ieee754_pow+0x12a>
 80046da:	4622      	mov	r2, r4
 80046dc:	462b      	mov	r3, r5
 80046de:	f7fb fd3b 	bl	8000158 <__aeabi_dsub>
 80046e2:	4642      	mov	r2, r8
 80046e4:	464b      	mov	r3, r9
 80046e6:	f7fc f975 	bl	80009d4 <__aeabi_dcmpge>
 80046ea:	2800      	cmp	r0, #0
 80046ec:	f43f aef8 	beq.w	80044e0 <__ieee754_pow+0x770>
 80046f0:	e7e7      	b.n	80046c2 <__ieee754_pow+0x952>
 80046f2:	f04f 0a00 	mov.w	sl, #0
 80046f6:	e71e      	b.n	8004536 <__ieee754_pow+0x7c6>
 80046f8:	4621      	mov	r1, r4
 80046fa:	e7d4      	b.n	80046a6 <__ieee754_pow+0x936>
 80046fc:	f04f 0b00 	mov.w	fp, #0
 8004700:	f8df c074 	ldr.w	ip, [pc, #116]	; 8004778 <__ieee754_pow+0xa08>
 8004704:	f7ff bb95 	b.w	8003e32 <__ieee754_pow+0xc2>
 8004708:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800470c:	f7ff bb91 	b.w	8003e32 <__ieee754_pow+0xc2>
 8004710:	4638      	mov	r0, r7
 8004712:	4641      	mov	r1, r8
 8004714:	f7ff bbc3 	b.w	8003e9e <__ieee754_pow+0x12e>
 8004718:	9200      	str	r2, [sp, #0]
 800471a:	f7ff bb9f 	b.w	8003e5c <__ieee754_pow+0xec>
 800471e:	bf00      	nop
 8004720:	652b82fe 	.word	0x652b82fe
 8004724:	3c971547 	.word	0x3c971547
 8004728:	00000000 	.word	0x00000000
 800472c:	3fe62e43 	.word	0x3fe62e43
 8004730:	fefa39ef 	.word	0xfefa39ef
 8004734:	3fe62e42 	.word	0x3fe62e42
 8004738:	0ca86c39 	.word	0x0ca86c39
 800473c:	be205c61 	.word	0xbe205c61
 8004740:	72bea4d0 	.word	0x72bea4d0
 8004744:	3e663769 	.word	0x3e663769
 8004748:	c5d26bf1 	.word	0xc5d26bf1
 800474c:	3ebbbd41 	.word	0x3ebbbd41
 8004750:	af25de2c 	.word	0xaf25de2c
 8004754:	3f11566a 	.word	0x3f11566a
 8004758:	16bebd93 	.word	0x16bebd93
 800475c:	3f66c16c 	.word	0x3f66c16c
 8004760:	5555553e 	.word	0x5555553e
 8004764:	3fc55555 	.word	0x3fc55555
 8004768:	c2f8f359 	.word	0xc2f8f359
 800476c:	01a56e1f 	.word	0x01a56e1f
 8004770:	3fe00000 	.word	0x3fe00000
 8004774:	000fffff 	.word	0x000fffff
 8004778:	3ff00000 	.word	0x3ff00000
 800477c:	4090cbff 	.word	0x4090cbff
 8004780:	3f6f3400 	.word	0x3f6f3400

08004784 <__ieee754_sqrt>:
 8004784:	4b54      	ldr	r3, [pc, #336]	; (80048d8 <__ieee754_sqrt+0x154>)
 8004786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800478a:	438b      	bics	r3, r1
 800478c:	4606      	mov	r6, r0
 800478e:	460d      	mov	r5, r1
 8004790:	460a      	mov	r2, r1
 8004792:	460c      	mov	r4, r1
 8004794:	d10f      	bne.n	80047b6 <__ieee754_sqrt+0x32>
 8004796:	4602      	mov	r2, r0
 8004798:	460b      	mov	r3, r1
 800479a:	f7fb fe95 	bl	80004c8 <__aeabi_dmul>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4630      	mov	r0, r6
 80047a4:	4629      	mov	r1, r5
 80047a6:	f7fb fcd9 	bl	800015c <__adddf3>
 80047aa:	4606      	mov	r6, r0
 80047ac:	460d      	mov	r5, r1
 80047ae:	4630      	mov	r0, r6
 80047b0:	4629      	mov	r1, r5
 80047b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047b6:	2900      	cmp	r1, #0
 80047b8:	4607      	mov	r7, r0
 80047ba:	4603      	mov	r3, r0
 80047bc:	dc0e      	bgt.n	80047dc <__ieee754_sqrt+0x58>
 80047be:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80047c2:	ea5c 0707 	orrs.w	r7, ip, r7
 80047c6:	d0f2      	beq.n	80047ae <__ieee754_sqrt+0x2a>
 80047c8:	b141      	cbz	r1, 80047dc <__ieee754_sqrt+0x58>
 80047ca:	4602      	mov	r2, r0
 80047cc:	460b      	mov	r3, r1
 80047ce:	f7fb fcc3 	bl	8000158 <__aeabi_dsub>
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	f7fb ffa1 	bl	800071c <__aeabi_ddiv>
 80047da:	e7e6      	b.n	80047aa <__ieee754_sqrt+0x26>
 80047dc:	1512      	asrs	r2, r2, #20
 80047de:	d074      	beq.n	80048ca <__ieee754_sqrt+0x146>
 80047e0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80047e4:	07d5      	lsls	r5, r2, #31
 80047e6:	f04f 0500 	mov.w	r5, #0
 80047ea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80047ee:	bf48      	it	mi
 80047f0:	0fd9      	lsrmi	r1, r3, #31
 80047f2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80047f6:	bf44      	itt	mi
 80047f8:	005b      	lslmi	r3, r3, #1
 80047fa:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 80047fe:	1051      	asrs	r1, r2, #1
 8004800:	0fda      	lsrs	r2, r3, #31
 8004802:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8004806:	4628      	mov	r0, r5
 8004808:	2216      	movs	r2, #22
 800480a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	1987      	adds	r7, r0, r6
 8004812:	42a7      	cmp	r7, r4
 8004814:	bfde      	ittt	le
 8004816:	19b8      	addle	r0, r7, r6
 8004818:	1be4      	suble	r4, r4, r7
 800481a:	19ad      	addle	r5, r5, r6
 800481c:	0fdf      	lsrs	r7, r3, #31
 800481e:	3a01      	subs	r2, #1
 8004820:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8004824:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004828:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800482c:	d1f0      	bne.n	8004810 <__ieee754_sqrt+0x8c>
 800482e:	f04f 0c20 	mov.w	ip, #32
 8004832:	4696      	mov	lr, r2
 8004834:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004838:	4284      	cmp	r4, r0
 800483a:	eb06 070e 	add.w	r7, r6, lr
 800483e:	dc02      	bgt.n	8004846 <__ieee754_sqrt+0xc2>
 8004840:	d112      	bne.n	8004868 <__ieee754_sqrt+0xe4>
 8004842:	429f      	cmp	r7, r3
 8004844:	d810      	bhi.n	8004868 <__ieee754_sqrt+0xe4>
 8004846:	2f00      	cmp	r7, #0
 8004848:	eb07 0e06 	add.w	lr, r7, r6
 800484c:	da42      	bge.n	80048d4 <__ieee754_sqrt+0x150>
 800484e:	f1be 0f00 	cmp.w	lr, #0
 8004852:	db3f      	blt.n	80048d4 <__ieee754_sqrt+0x150>
 8004854:	f100 0801 	add.w	r8, r0, #1
 8004858:	1a24      	subs	r4, r4, r0
 800485a:	4640      	mov	r0, r8
 800485c:	429f      	cmp	r7, r3
 800485e:	bf88      	it	hi
 8004860:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8004864:	1bdb      	subs	r3, r3, r7
 8004866:	4432      	add	r2, r6
 8004868:	0064      	lsls	r4, r4, #1
 800486a:	f1bc 0c01 	subs.w	ip, ip, #1
 800486e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8004872:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004876:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800487a:	d1dd      	bne.n	8004838 <__ieee754_sqrt+0xb4>
 800487c:	4323      	orrs	r3, r4
 800487e:	d006      	beq.n	800488e <__ieee754_sqrt+0x10a>
 8004880:	1c54      	adds	r4, r2, #1
 8004882:	bf0b      	itete	eq
 8004884:	4662      	moveq	r2, ip
 8004886:	3201      	addne	r2, #1
 8004888:	3501      	addeq	r5, #1
 800488a:	f022 0201 	bicne.w	r2, r2, #1
 800488e:	106b      	asrs	r3, r5, #1
 8004890:	0852      	lsrs	r2, r2, #1
 8004892:	07e8      	lsls	r0, r5, #31
 8004894:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004898:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800489c:	bf48      	it	mi
 800489e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80048a2:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 80048a6:	4616      	mov	r6, r2
 80048a8:	e781      	b.n	80047ae <__ieee754_sqrt+0x2a>
 80048aa:	0adc      	lsrs	r4, r3, #11
 80048ac:	3915      	subs	r1, #21
 80048ae:	055b      	lsls	r3, r3, #21
 80048b0:	2c00      	cmp	r4, #0
 80048b2:	d0fa      	beq.n	80048aa <__ieee754_sqrt+0x126>
 80048b4:	02e6      	lsls	r6, r4, #11
 80048b6:	d50a      	bpl.n	80048ce <__ieee754_sqrt+0x14a>
 80048b8:	f1c2 0020 	rsb	r0, r2, #32
 80048bc:	fa23 f000 	lsr.w	r0, r3, r0
 80048c0:	1e55      	subs	r5, r2, #1
 80048c2:	4093      	lsls	r3, r2
 80048c4:	4304      	orrs	r4, r0
 80048c6:	1b4a      	subs	r2, r1, r5
 80048c8:	e78a      	b.n	80047e0 <__ieee754_sqrt+0x5c>
 80048ca:	4611      	mov	r1, r2
 80048cc:	e7f0      	b.n	80048b0 <__ieee754_sqrt+0x12c>
 80048ce:	0064      	lsls	r4, r4, #1
 80048d0:	3201      	adds	r2, #1
 80048d2:	e7ef      	b.n	80048b4 <__ieee754_sqrt+0x130>
 80048d4:	4680      	mov	r8, r0
 80048d6:	e7bf      	b.n	8004858 <__ieee754_sqrt+0xd4>
 80048d8:	7ff00000 	.word	0x7ff00000

080048dc <fabs>:
 80048dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80048e0:	4619      	mov	r1, r3
 80048e2:	4770      	bx	lr

080048e4 <finite>:
 80048e4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80048e8:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80048ec:	0fc0      	lsrs	r0, r0, #31
 80048ee:	4770      	bx	lr

080048f0 <matherr>:
 80048f0:	2000      	movs	r0, #0
 80048f2:	4770      	bx	lr

080048f4 <nan>:
 80048f4:	2000      	movs	r0, #0
 80048f6:	4901      	ldr	r1, [pc, #4]	; (80048fc <nan+0x8>)
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	7ff80000 	.word	0x7ff80000

08004900 <rint>:
 8004900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004902:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004906:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800490a:	f1bc 0f13 	cmp.w	ip, #19
 800490e:	4604      	mov	r4, r0
 8004910:	460d      	mov	r5, r1
 8004912:	460b      	mov	r3, r1
 8004914:	4606      	mov	r6, r0
 8004916:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800491a:	dc5a      	bgt.n	80049d2 <rint+0xd2>
 800491c:	f1bc 0f00 	cmp.w	ip, #0
 8004920:	da2b      	bge.n	800497a <rint+0x7a>
 8004922:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004926:	4302      	orrs	r2, r0
 8004928:	d023      	beq.n	8004972 <rint+0x72>
 800492a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800492e:	4302      	orrs	r2, r0
 8004930:	4256      	negs	r6, r2
 8004932:	4316      	orrs	r6, r2
 8004934:	0c4b      	lsrs	r3, r1, #17
 8004936:	0b36      	lsrs	r6, r6, #12
 8004938:	4934      	ldr	r1, [pc, #208]	; (8004a0c <rint+0x10c>)
 800493a:	045b      	lsls	r3, r3, #17
 800493c:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8004940:	ea46 0503 	orr.w	r5, r6, r3
 8004944:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8004948:	4602      	mov	r2, r0
 800494a:	462b      	mov	r3, r5
 800494c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8004950:	4620      	mov	r0, r4
 8004952:	4629      	mov	r1, r5
 8004954:	f7fb fc02 	bl	800015c <__adddf3>
 8004958:	e9cd 0100 	strd	r0, r1, [sp]
 800495c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004960:	462b      	mov	r3, r5
 8004962:	4622      	mov	r2, r4
 8004964:	f7fb fbf8 	bl	8000158 <__aeabi_dsub>
 8004968:	4604      	mov	r4, r0
 800496a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800496e:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8004972:	4620      	mov	r0, r4
 8004974:	4629      	mov	r1, r5
 8004976:	b003      	add	sp, #12
 8004978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800497a:	4a25      	ldr	r2, [pc, #148]	; (8004a10 <rint+0x110>)
 800497c:	fa42 f20c 	asr.w	r2, r2, ip
 8004980:	4011      	ands	r1, r2
 8004982:	4301      	orrs	r1, r0
 8004984:	d0f5      	beq.n	8004972 <rint+0x72>
 8004986:	0852      	lsrs	r2, r2, #1
 8004988:	ea05 0102 	and.w	r1, r5, r2
 800498c:	ea50 0601 	orrs.w	r6, r0, r1
 8004990:	d00c      	beq.n	80049ac <rint+0xac>
 8004992:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004996:	f1bc 0f13 	cmp.w	ip, #19
 800499a:	bf0c      	ite	eq
 800499c:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 80049a0:	2600      	movne	r6, #0
 80049a2:	ea25 0202 	bic.w	r2, r5, r2
 80049a6:	fa43 f30c 	asr.w	r3, r3, ip
 80049aa:	4313      	orrs	r3, r2
 80049ac:	4917      	ldr	r1, [pc, #92]	; (8004a0c <rint+0x10c>)
 80049ae:	4632      	mov	r2, r6
 80049b0:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 80049b4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049b8:	4620      	mov	r0, r4
 80049ba:	4629      	mov	r1, r5
 80049bc:	f7fb fbce 	bl	800015c <__adddf3>
 80049c0:	e9cd 0100 	strd	r0, r1, [sp]
 80049c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80049c8:	4622      	mov	r2, r4
 80049ca:	462b      	mov	r3, r5
 80049cc:	f7fb fbc4 	bl	8000158 <__aeabi_dsub>
 80049d0:	e008      	b.n	80049e4 <rint+0xe4>
 80049d2:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 80049d6:	dd08      	ble.n	80049ea <rint+0xea>
 80049d8:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 80049dc:	d1c9      	bne.n	8004972 <rint+0x72>
 80049de:	4602      	mov	r2, r0
 80049e0:	f7fb fbbc 	bl	800015c <__adddf3>
 80049e4:	4604      	mov	r4, r0
 80049e6:	460d      	mov	r5, r1
 80049e8:	e7c3      	b.n	8004972 <rint+0x72>
 80049ea:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 80049ee:	f04f 32ff 	mov.w	r2, #4294967295
 80049f2:	40ca      	lsrs	r2, r1
 80049f4:	4210      	tst	r0, r2
 80049f6:	d0bc      	beq.n	8004972 <rint+0x72>
 80049f8:	0852      	lsrs	r2, r2, #1
 80049fa:	4210      	tst	r0, r2
 80049fc:	bf1f      	itttt	ne
 80049fe:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8004a02:	ea20 0202 	bicne.w	r2, r0, r2
 8004a06:	410e      	asrne	r6, r1
 8004a08:	4316      	orrne	r6, r2
 8004a0a:	e7cf      	b.n	80049ac <rint+0xac>
 8004a0c:	08004b80 	.word	0x08004b80
 8004a10:	000fffff 	.word	0x000fffff
 8004a14:	00000000 	.word	0x00000000

08004a18 <scalbn>:
 8004a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1a:	4616      	mov	r6, r2
 8004a1c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004a20:	4604      	mov	r4, r0
 8004a22:	460d      	mov	r5, r1
 8004a24:	460b      	mov	r3, r1
 8004a26:	b982      	cbnz	r2, 8004a4a <scalbn+0x32>
 8004a28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004a2c:	4303      	orrs	r3, r0
 8004a2e:	d034      	beq.n	8004a9a <scalbn+0x82>
 8004a30:	4b2d      	ldr	r3, [pc, #180]	; (8004ae8 <scalbn+0xd0>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	f7fb fd48 	bl	80004c8 <__aeabi_dmul>
 8004a38:	4b2c      	ldr	r3, [pc, #176]	; (8004aec <scalbn+0xd4>)
 8004a3a:	4604      	mov	r4, r0
 8004a3c:	429e      	cmp	r6, r3
 8004a3e:	460d      	mov	r5, r1
 8004a40:	da0d      	bge.n	8004a5e <scalbn+0x46>
 8004a42:	a325      	add	r3, pc, #148	; (adr r3, 8004ad8 <scalbn+0xc0>)
 8004a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a48:	e01c      	b.n	8004a84 <scalbn+0x6c>
 8004a4a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8004a4e:	42ba      	cmp	r2, r7
 8004a50:	d109      	bne.n	8004a66 <scalbn+0x4e>
 8004a52:	4602      	mov	r2, r0
 8004a54:	f7fb fb82 	bl	800015c <__adddf3>
 8004a58:	4604      	mov	r4, r0
 8004a5a:	460d      	mov	r5, r1
 8004a5c:	e01d      	b.n	8004a9a <scalbn+0x82>
 8004a5e:	460b      	mov	r3, r1
 8004a60:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004a64:	3a36      	subs	r2, #54	; 0x36
 8004a66:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004a6a:	4432      	add	r2, r6
 8004a6c:	428a      	cmp	r2, r1
 8004a6e:	dd0c      	ble.n	8004a8a <scalbn+0x72>
 8004a70:	4622      	mov	r2, r4
 8004a72:	462b      	mov	r3, r5
 8004a74:	a11a      	add	r1, pc, #104	; (adr r1, 8004ae0 <scalbn+0xc8>)
 8004a76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a7a:	f000 f83b 	bl	8004af4 <copysign>
 8004a7e:	a318      	add	r3, pc, #96	; (adr r3, 8004ae0 <scalbn+0xc8>)
 8004a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a84:	f7fb fd20 	bl	80004c8 <__aeabi_dmul>
 8004a88:	e7e6      	b.n	8004a58 <scalbn+0x40>
 8004a8a:	2a00      	cmp	r2, #0
 8004a8c:	dd08      	ble.n	8004aa0 <scalbn+0x88>
 8004a8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004a92:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004a96:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aa0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004aa4:	da0b      	bge.n	8004abe <scalbn+0xa6>
 8004aa6:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004aaa:	429e      	cmp	r6, r3
 8004aac:	4622      	mov	r2, r4
 8004aae:	462b      	mov	r3, r5
 8004ab0:	dce0      	bgt.n	8004a74 <scalbn+0x5c>
 8004ab2:	a109      	add	r1, pc, #36	; (adr r1, 8004ad8 <scalbn+0xc0>)
 8004ab4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ab8:	f000 f81c 	bl	8004af4 <copysign>
 8004abc:	e7c1      	b.n	8004a42 <scalbn+0x2a>
 8004abe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004ac2:	3236      	adds	r2, #54	; 0x36
 8004ac4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004ac8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004acc:	4620      	mov	r0, r4
 8004ace:	4629      	mov	r1, r5
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	4b07      	ldr	r3, [pc, #28]	; (8004af0 <scalbn+0xd8>)
 8004ad4:	e7d6      	b.n	8004a84 <scalbn+0x6c>
 8004ad6:	bf00      	nop
 8004ad8:	c2f8f359 	.word	0xc2f8f359
 8004adc:	01a56e1f 	.word	0x01a56e1f
 8004ae0:	8800759c 	.word	0x8800759c
 8004ae4:	7e37e43c 	.word	0x7e37e43c
 8004ae8:	43500000 	.word	0x43500000
 8004aec:	ffff3cb0 	.word	0xffff3cb0
 8004af0:	3c900000 	.word	0x3c900000

08004af4 <copysign>:
 8004af4:	b530      	push	{r4, r5, lr}
 8004af6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004afa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004afe:	ea42 0503 	orr.w	r5, r2, r3
 8004b02:	4629      	mov	r1, r5
 8004b04:	bd30      	pop	{r4, r5, pc}
	...

08004b08 <_init>:
 8004b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0a:	bf00      	nop
 8004b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b0e:	bc08      	pop	{r3}
 8004b10:	469e      	mov	lr, r3
 8004b12:	4770      	bx	lr

08004b14 <_fini>:
 8004b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b16:	bf00      	nop
 8004b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b1a:	bc08      	pop	{r3}
 8004b1c:	469e      	mov	lr, r3
 8004b1e:	4770      	bx	lr
